
dynamixel_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015d0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001768  08001768  00011768  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001780  08001780  00011780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001788  08001788  00011788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800178c  0800178c  0001178c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000a0  2000000c  0800179c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000ac  0800179c  000200ac  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c49e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001c52  00000000  00000000  0002c4da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002a7a  00000000  00000000  0002e12c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000548  00000000  00000000  00030ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006e0  00000000  00000000  000310f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003290  00000000  00000000  000317d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000023ce  00000000  00000000  00034a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00036e2e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000d58  00000000  00000000  00036eac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001750 	.word	0x08001750

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001750 	.word	0x08001750

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <HAL_InitTick+0x3c>)
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_InitTick+0x40>)
{
 80004ee:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f0:	7818      	ldrb	r0, [r3, #0]
 80004f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004fa:	6810      	ldr	r0, [r2, #0]
 80004fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000500:	f000 f8a8 	bl	8000654 <HAL_SYSTICK_Config>
 8000504:	4604      	mov	r4, r0
 8000506:	b958      	cbnz	r0, 8000520 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000508:	2d0f      	cmp	r5, #15
 800050a:	d809      	bhi.n	8000520 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800050c:	4602      	mov	r2, r0
 800050e:	4629      	mov	r1, r5
 8000510:	f04f 30ff 	mov.w	r0, #4294967295
 8000514:	f000 f85e 	bl	80005d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <HAL_InitTick+0x44>)
 800051a:	4620      	mov	r0, r4
 800051c:	601d      	str	r5, [r3, #0]
 800051e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000520:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000522:	bd38      	pop	{r3, r4, r5, pc}
 8000524:	20000008 	.word	0x20000008
 8000528:	20000000 	.word	0x20000000
 800052c:	20000004 	.word	0x20000004

08000530 <HAL_Init>:
{
 8000530:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <HAL_Init+0x30>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800053a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000542:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800054a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f82f 	bl	80005b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff ffc8 	bl	80004e8 <HAL_InitTick>
  HAL_MspInit();
 8000558:	f000 fff6 	bl	8001548 <HAL_MspInit>
}
 800055c:	2000      	movs	r0, #0
 800055e:	bd08      	pop	{r3, pc}
 8000560:	40023c00 	.word	0x40023c00

08000564 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <HAL_IncTick+0x10>)
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_IncTick+0x14>)
 8000568:	6811      	ldr	r1, [r2, #0]
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	440b      	add	r3, r1
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <HAL_GetTick+0x8>)
 800057e:	6818      	ldr	r0, [r3, #0]
}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000028 	.word	0x20000028

08000588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000588:	b538      	push	{r3, r4, r5, lr}
 800058a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800058c:	f7ff fff6 	bl	800057c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000590:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000592:	bf1c      	itt	ne
 8000594:	4b05      	ldrne	r3, [pc, #20]	; (80005ac <HAL_Delay+0x24>)
 8000596:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000598:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800059a:	bf18      	it	ne
 800059c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800059e:	f7ff ffed 	bl	800057c <HAL_GetTick>
 80005a2:	1b40      	subs	r0, r0, r5
 80005a4:	4284      	cmp	r4, r0
 80005a6:	d8fa      	bhi.n	800059e <HAL_Delay+0x16>
  {
  }
}
 80005a8:	bd38      	pop	{r3, r4, r5, pc}
 80005aa:	bf00      	nop
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005b2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005b8:	041b      	lsls	r3, r3, #16
 80005ba:	0c1b      	lsrs	r3, r3, #16
 80005bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005c0:	0200      	lsls	r0, r0, #8
 80005c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005cc:	60d3      	str	r3, [r2, #12]
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	68dc      	ldr	r4, [r3, #12]
 80005da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	bf28      	it	cs
 80005e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ec:	f04f 0501 	mov.w	r5, #1
 80005f0:	fa05 f303 	lsl.w	r3, r5, r3
 80005f4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f8:	bf8c      	ite	hi
 80005fa:	3c03      	subhi	r4, #3
 80005fc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fe:	4019      	ands	r1, r3
 8000600:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000602:	fa05 f404 	lsl.w	r4, r5, r4
 8000606:	3c01      	subs	r4, #1
 8000608:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800060a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060c:	ea42 0201 	orr.w	r2, r2, r1
 8000610:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	bfaf      	iteee	ge
 8000616:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	f000 000f 	andlt.w	r0, r0, #15
 800061e:	4b06      	ldrlt	r3, [pc, #24]	; (8000638 <HAL_NVIC_SetPriority+0x64>)
 8000620:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000622:	bfa5      	ittet	ge
 8000624:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000628:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	e000ed14 	.word	0xe000ed14

0800063c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800063c:	0942      	lsrs	r2, r0, #5
 800063e:	2301      	movs	r3, #1
 8000640:	f000 001f 	and.w	r0, r0, #31
 8000644:	fa03 f000 	lsl.w	r0, r3, r0
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <HAL_NVIC_EnableIRQ+0x14>)
 800064a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100

08000654 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000654:	3801      	subs	r0, #1
 8000656:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800065a:	d20a      	bcs.n	8000672 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	4a07      	ldr	r2, [pc, #28]	; (800067c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000660:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	21f0      	movs	r1, #240	; 0xf0
 8000664:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000668:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800066c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000672:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000e010 	.word	0xe000e010
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000682:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000684:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000686:	bf0c      	ite	eq
 8000688:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800068c:	f022 0204 	bicne.w	r2, r2, #4
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	4770      	bx	lr
 8000694:	e000e010 	.word	0xe000e010

08000698 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000698:	4770      	bx	lr

0800069a <HAL_SYSTICK_IRQHandler>:
{
 800069a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800069c:	f7ff fffc 	bl	8000698 <HAL_SYSTICK_Callback>
 80006a0:	bd08      	pop	{r3, pc}

080006a2 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80006a2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80006a6:	2b02      	cmp	r3, #2
 80006a8:	d003      	beq.n	80006b2 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80006ae:	2001      	movs	r0, #1
 80006b0:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80006b2:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80006b4:	2305      	movs	r3, #5
 80006b6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80006ba:	6813      	ldr	r3, [r2, #0]
 80006bc:	f023 0301 	bic.w	r3, r3, #1
 80006c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80006c2:	2000      	movs	r0, #0
}
 80006c4:	4770      	bx	lr
	...

080006c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006cc:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ce:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d0:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000870 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006d4:	4a64      	ldr	r2, [pc, #400]	; (8000868 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d6:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 80006d8:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006dc:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006de:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006e0:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006e4:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 80006e8:	42b7      	cmp	r7, r6
 80006ea:	f040 80ad 	bne.w	8000848 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006ee:	684c      	ldr	r4, [r1, #4]
 80006f0:	f024 0a10 	bic.w	sl, r4, #16
 80006f4:	f1ba 0f02 	cmp.w	sl, #2
 80006f8:	d116      	bne.n	8000728 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 80006fa:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80006fe:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000702:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000706:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800070a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800070e:	f04f 0e0f 	mov.w	lr, #15
 8000712:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000716:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800071a:	690d      	ldr	r5, [r1, #16]
 800071c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000720:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000724:	f8cc 5020 	str.w	r5, [ip, #32]
 8000728:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800072c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800072e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000732:	fa05 f50c 	lsl.w	r5, r5, ip
 8000736:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000738:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800073c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000740:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000744:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000748:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800074c:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000750:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8000752:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000756:	d815      	bhi.n	8000784 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8000758:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800075c:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000760:	68cd      	ldr	r5, [r1, #12]
 8000762:	fa05 fa0c 	lsl.w	sl, r5, ip
 8000766:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800076a:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 800076e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000772:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000776:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 800077a:	fa0e fe03 	lsl.w	lr, lr, r3
 800077e:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000782:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000784:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000786:	9d00      	ldr	r5, [sp, #0]
 8000788:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800078a:	688f      	ldr	r7, [r1, #8]
 800078c:	fa07 f70c 	lsl.w	r7, r7, ip
 8000790:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000792:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000794:	00e5      	lsls	r5, r4, #3
 8000796:	d557      	bpl.n	8000848 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000798:	f04f 0b00 	mov.w	fp, #0
 800079c:	f8cd b00c 	str.w	fp, [sp, #12]
 80007a0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a4:	4d31      	ldr	r5, [pc, #196]	; (800086c <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007aa:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80007ae:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80007b2:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80007b6:	9703      	str	r7, [sp, #12]
 80007b8:	9f03      	ldr	r7, [sp, #12]
 80007ba:	f023 0703 	bic.w	r7, r3, #3
 80007be:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007c2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007c6:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007ca:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007ce:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007d2:	f04f 0e0f 	mov.w	lr, #15
 80007d6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007da:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007dc:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007e0:	d039      	beq.n	8000856 <HAL_GPIO_Init+0x18e>
 80007e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007e6:	42a8      	cmp	r0, r5
 80007e8:	d037      	beq.n	800085a <HAL_GPIO_Init+0x192>
 80007ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007ee:	42a8      	cmp	r0, r5
 80007f0:	d035      	beq.n	800085e <HAL_GPIO_Init+0x196>
 80007f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f6:	42a8      	cmp	r0, r5
 80007f8:	d033      	beq.n	8000862 <HAL_GPIO_Init+0x19a>
 80007fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007fe:	42a8      	cmp	r0, r5
 8000800:	bf14      	ite	ne
 8000802:	2507      	movne	r5, #7
 8000804:	2504      	moveq	r5, #4
 8000806:	fa05 f50c 	lsl.w	r5, r5, ip
 800080a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800080e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000810:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000812:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000814:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000818:	bf0c      	ite	eq
 800081a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800081c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800081e:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000820:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000822:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000826:	bf0c      	ite	eq
 8000828:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800082a:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800082c:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800082e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000830:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000834:	bf0c      	ite	eq
 8000836:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000838:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800083a:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800083c:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800083e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000840:	bf54      	ite	pl
 8000842:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000844:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000846:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000848:	3301      	adds	r3, #1
 800084a:	2b10      	cmp	r3, #16
 800084c:	f47f af47 	bne.w	80006de <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000850:	b005      	add	sp, #20
 8000852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000856:	465d      	mov	r5, fp
 8000858:	e7d5      	b.n	8000806 <HAL_GPIO_Init+0x13e>
 800085a:	2501      	movs	r5, #1
 800085c:	e7d3      	b.n	8000806 <HAL_GPIO_Init+0x13e>
 800085e:	2502      	movs	r5, #2
 8000860:	e7d1      	b.n	8000806 <HAL_GPIO_Init+0x13e>
 8000862:	2503      	movs	r5, #3
 8000864:	e7cf      	b.n	8000806 <HAL_GPIO_Init+0x13e>
 8000866:	bf00      	nop
 8000868:	40013c00 	.word	0x40013c00
 800086c:	40020000 	.word	0x40020000
 8000870:	40023800 	.word	0x40023800

08000874 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000874:	b10a      	cbz	r2, 800087a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000876:	6181      	str	r1, [r0, #24]
 8000878:	4770      	bx	lr
 800087a:	0409      	lsls	r1, r1, #16
 800087c:	e7fb      	b.n	8000876 <HAL_GPIO_WritePin+0x2>
	...

08000880 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000880:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000884:	4604      	mov	r4, r0
 8000886:	b918      	cbnz	r0, 8000890 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000888:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800088a:	b002      	add	sp, #8
 800088c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000890:	6803      	ldr	r3, [r0, #0]
 8000892:	07dd      	lsls	r5, r3, #31
 8000894:	d410      	bmi.n	80008b8 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000896:	6823      	ldr	r3, [r4, #0]
 8000898:	0798      	lsls	r0, r3, #30
 800089a:	d458      	bmi.n	800094e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800089c:	6823      	ldr	r3, [r4, #0]
 800089e:	071a      	lsls	r2, r3, #28
 80008a0:	f100 809a 	bmi.w	80009d8 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008a4:	6823      	ldr	r3, [r4, #0]
 80008a6:	075b      	lsls	r3, r3, #29
 80008a8:	f100 80b8 	bmi.w	8000a1c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008ac:	69a2      	ldr	r2, [r4, #24]
 80008ae:	2a00      	cmp	r2, #0
 80008b0:	f040 8119 	bne.w	8000ae6 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80008b4:	2000      	movs	r0, #0
 80008b6:	e7e8      	b.n	800088a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008b8:	4ba6      	ldr	r3, [pc, #664]	; (8000b54 <HAL_RCC_OscConfig+0x2d4>)
 80008ba:	689a      	ldr	r2, [r3, #8]
 80008bc:	f002 020c 	and.w	r2, r2, #12
 80008c0:	2a04      	cmp	r2, #4
 80008c2:	d007      	beq.n	80008d4 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008ca:	2a08      	cmp	r2, #8
 80008cc:	d10a      	bne.n	80008e4 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	0259      	lsls	r1, r3, #9
 80008d2:	d507      	bpl.n	80008e4 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008d4:	4b9f      	ldr	r3, [pc, #636]	; (8000b54 <HAL_RCC_OscConfig+0x2d4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	039a      	lsls	r2, r3, #14
 80008da:	d5dc      	bpl.n	8000896 <HAL_RCC_OscConfig+0x16>
 80008dc:	6863      	ldr	r3, [r4, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d1d9      	bne.n	8000896 <HAL_RCC_OscConfig+0x16>
 80008e2:	e7d1      	b.n	8000888 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e4:	6863      	ldr	r3, [r4, #4]
 80008e6:	4d9b      	ldr	r5, [pc, #620]	; (8000b54 <HAL_RCC_OscConfig+0x2d4>)
 80008e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008ec:	d111      	bne.n	8000912 <HAL_RCC_OscConfig+0x92>
 80008ee:	682b      	ldr	r3, [r5, #0]
 80008f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008f6:	f7ff fe41 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008fa:	4d96      	ldr	r5, [pc, #600]	; (8000b54 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80008fc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008fe:	682b      	ldr	r3, [r5, #0]
 8000900:	039b      	lsls	r3, r3, #14
 8000902:	d4c8      	bmi.n	8000896 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000904:	f7ff fe3a 	bl	800057c <HAL_GetTick>
 8000908:	1b80      	subs	r0, r0, r6
 800090a:	2864      	cmp	r0, #100	; 0x64
 800090c:	d9f7      	bls.n	80008fe <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800090e:	2003      	movs	r0, #3
 8000910:	e7bb      	b.n	800088a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000912:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000916:	d104      	bne.n	8000922 <HAL_RCC_OscConfig+0xa2>
 8000918:	682b      	ldr	r3, [r5, #0]
 800091a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800091e:	602b      	str	r3, [r5, #0]
 8000920:	e7e5      	b.n	80008ee <HAL_RCC_OscConfig+0x6e>
 8000922:	682a      	ldr	r2, [r5, #0]
 8000924:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000928:	602a      	str	r2, [r5, #0]
 800092a:	682a      	ldr	r2, [r5, #0]
 800092c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000930:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1df      	bne.n	80008f6 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000936:	f7ff fe21 	bl	800057c <HAL_GetTick>
 800093a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800093c:	682b      	ldr	r3, [r5, #0]
 800093e:	039f      	lsls	r7, r3, #14
 8000940:	d5a9      	bpl.n	8000896 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000942:	f7ff fe1b 	bl	800057c <HAL_GetTick>
 8000946:	1b80      	subs	r0, r0, r6
 8000948:	2864      	cmp	r0, #100	; 0x64
 800094a:	d9f7      	bls.n	800093c <HAL_RCC_OscConfig+0xbc>
 800094c:	e7df      	b.n	800090e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800094e:	4b81      	ldr	r3, [pc, #516]	; (8000b54 <HAL_RCC_OscConfig+0x2d4>)
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	f012 0f0c 	tst.w	r2, #12
 8000956:	d007      	beq.n	8000968 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000958:	689a      	ldr	r2, [r3, #8]
 800095a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800095e:	2a08      	cmp	r2, #8
 8000960:	d111      	bne.n	8000986 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	025e      	lsls	r6, r3, #9
 8000966:	d40e      	bmi.n	8000986 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000968:	4b7a      	ldr	r3, [pc, #488]	; (8000b54 <HAL_RCC_OscConfig+0x2d4>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	0795      	lsls	r5, r2, #30
 800096e:	d502      	bpl.n	8000976 <HAL_RCC_OscConfig+0xf6>
 8000970:	68e2      	ldr	r2, [r4, #12]
 8000972:	2a01      	cmp	r2, #1
 8000974:	d188      	bne.n	8000888 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	6921      	ldr	r1, [r4, #16]
 800097a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800097e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000982:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000984:	e78a      	b.n	800089c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000986:	68e2      	ldr	r2, [r4, #12]
 8000988:	4b73      	ldr	r3, [pc, #460]	; (8000b58 <HAL_RCC_OscConfig+0x2d8>)
 800098a:	b1b2      	cbz	r2, 80009ba <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 800098c:	2201      	movs	r2, #1
 800098e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000990:	f7ff fdf4 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000994:	4d6f      	ldr	r5, [pc, #444]	; (8000b54 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000996:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000998:	682b      	ldr	r3, [r5, #0]
 800099a:	0798      	lsls	r0, r3, #30
 800099c:	d507      	bpl.n	80009ae <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800099e:	682b      	ldr	r3, [r5, #0]
 80009a0:	6922      	ldr	r2, [r4, #16]
 80009a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009a6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009aa:	602b      	str	r3, [r5, #0]
 80009ac:	e776      	b.n	800089c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ae:	f7ff fde5 	bl	800057c <HAL_GetTick>
 80009b2:	1b80      	subs	r0, r0, r6
 80009b4:	2802      	cmp	r0, #2
 80009b6:	d9ef      	bls.n	8000998 <HAL_RCC_OscConfig+0x118>
 80009b8:	e7a9      	b.n	800090e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80009ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009bc:	f7ff fdde 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009c0:	4d64      	ldr	r5, [pc, #400]	; (8000b54 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009c2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009c4:	682b      	ldr	r3, [r5, #0]
 80009c6:	0799      	lsls	r1, r3, #30
 80009c8:	f57f af68 	bpl.w	800089c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009cc:	f7ff fdd6 	bl	800057c <HAL_GetTick>
 80009d0:	1b80      	subs	r0, r0, r6
 80009d2:	2802      	cmp	r0, #2
 80009d4:	d9f6      	bls.n	80009c4 <HAL_RCC_OscConfig+0x144>
 80009d6:	e79a      	b.n	800090e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009d8:	6962      	ldr	r2, [r4, #20]
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_RCC_OscConfig+0x2dc>)
 80009dc:	b17a      	cbz	r2, 80009fe <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80009de:	2201      	movs	r2, #1
 80009e0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009e2:	f7ff fdcb 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009e6:	4d5b      	ldr	r5, [pc, #364]	; (8000b54 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009e8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ea:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009ec:	079f      	lsls	r7, r3, #30
 80009ee:	f53f af59 	bmi.w	80008a4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009f2:	f7ff fdc3 	bl	800057c <HAL_GetTick>
 80009f6:	1b80      	subs	r0, r0, r6
 80009f8:	2802      	cmp	r0, #2
 80009fa:	d9f6      	bls.n	80009ea <HAL_RCC_OscConfig+0x16a>
 80009fc:	e787      	b.n	800090e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80009fe:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a00:	f7ff fdbc 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a04:	4d53      	ldr	r5, [pc, #332]	; (8000b54 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a06:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a08:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a0a:	0798      	lsls	r0, r3, #30
 8000a0c:	f57f af4a 	bpl.w	80008a4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a10:	f7ff fdb4 	bl	800057c <HAL_GetTick>
 8000a14:	1b80      	subs	r0, r0, r6
 8000a16:	2802      	cmp	r0, #2
 8000a18:	d9f6      	bls.n	8000a08 <HAL_RCC_OscConfig+0x188>
 8000a1a:	e778      	b.n	800090e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a1c:	4b4d      	ldr	r3, [pc, #308]	; (8000b54 <HAL_RCC_OscConfig+0x2d4>)
 8000a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a20:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a24:	d128      	bne.n	8000a78 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	9201      	str	r2, [sp, #4]
 8000a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a2e:	641a      	str	r2, [r3, #64]	; 0x40
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a3a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a3c:	4d48      	ldr	r5, [pc, #288]	; (8000b60 <HAL_RCC_OscConfig+0x2e0>)
 8000a3e:	682b      	ldr	r3, [r5, #0]
 8000a40:	05d9      	lsls	r1, r3, #23
 8000a42:	d51b      	bpl.n	8000a7c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a44:	68a3      	ldr	r3, [r4, #8]
 8000a46:	4d43      	ldr	r5, [pc, #268]	; (8000b54 <HAL_RCC_OscConfig+0x2d4>)
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d127      	bne.n	8000a9c <HAL_RCC_OscConfig+0x21c>
 8000a4c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a54:	f7ff fd92 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a58:	4d3e      	ldr	r5, [pc, #248]	; (8000b54 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a5a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a5c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a60:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a62:	079b      	lsls	r3, r3, #30
 8000a64:	d539      	bpl.n	8000ada <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a66:	2e00      	cmp	r6, #0
 8000a68:	f43f af20 	beq.w	80008ac <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a6c:	4a39      	ldr	r2, [pc, #228]	; (8000b54 <HAL_RCC_OscConfig+0x2d4>)
 8000a6e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	e719      	b.n	80008ac <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000a78:	2600      	movs	r6, #0
 8000a7a:	e7df      	b.n	8000a3c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a7c:	682b      	ldr	r3, [r5, #0]
 8000a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a82:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a84:	f7ff fd7a 	bl	800057c <HAL_GetTick>
 8000a88:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a8a:	682b      	ldr	r3, [r5, #0]
 8000a8c:	05da      	lsls	r2, r3, #23
 8000a8e:	d4d9      	bmi.n	8000a44 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a90:	f7ff fd74 	bl	800057c <HAL_GetTick>
 8000a94:	1bc0      	subs	r0, r0, r7
 8000a96:	2802      	cmp	r0, #2
 8000a98:	d9f7      	bls.n	8000a8a <HAL_RCC_OscConfig+0x20a>
 8000a9a:	e738      	b.n	800090e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a9c:	2b05      	cmp	r3, #5
 8000a9e:	d104      	bne.n	8000aaa <HAL_RCC_OscConfig+0x22a>
 8000aa0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	672b      	str	r3, [r5, #112]	; 0x70
 8000aa8:	e7d0      	b.n	8000a4c <HAL_RCC_OscConfig+0x1cc>
 8000aaa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000aac:	f022 0201 	bic.w	r2, r2, #1
 8000ab0:	672a      	str	r2, [r5, #112]	; 0x70
 8000ab2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ab4:	f022 0204 	bic.w	r2, r2, #4
 8000ab8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1ca      	bne.n	8000a54 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000abe:	f7ff fd5d 	bl	800057c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ac6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ac8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aca:	0798      	lsls	r0, r3, #30
 8000acc:	d5cb      	bpl.n	8000a66 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ace:	f7ff fd55 	bl	800057c <HAL_GetTick>
 8000ad2:	1bc0      	subs	r0, r0, r7
 8000ad4:	4540      	cmp	r0, r8
 8000ad6:	d9f7      	bls.n	8000ac8 <HAL_RCC_OscConfig+0x248>
 8000ad8:	e719      	b.n	800090e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ada:	f7ff fd4f 	bl	800057c <HAL_GetTick>
 8000ade:	1bc0      	subs	r0, r0, r7
 8000ae0:	4540      	cmp	r0, r8
 8000ae2:	d9bd      	bls.n	8000a60 <HAL_RCC_OscConfig+0x1e0>
 8000ae4:	e713      	b.n	800090e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ae6:	4d1b      	ldr	r5, [pc, #108]	; (8000b54 <HAL_RCC_OscConfig+0x2d4>)
 8000ae8:	68ab      	ldr	r3, [r5, #8]
 8000aea:	f003 030c 	and.w	r3, r3, #12
 8000aee:	2b08      	cmp	r3, #8
 8000af0:	f43f aeca 	beq.w	8000888 <HAL_RCC_OscConfig+0x8>
 8000af4:	4e1b      	ldr	r6, [pc, #108]	; (8000b64 <HAL_RCC_OscConfig+0x2e4>)
 8000af6:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000af8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000afa:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000afc:	d134      	bne.n	8000b68 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000afe:	f7ff fd3d 	bl	800057c <HAL_GetTick>
 8000b02:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b04:	682b      	ldr	r3, [r5, #0]
 8000b06:	0199      	lsls	r1, r3, #6
 8000b08:	d41e      	bmi.n	8000b48 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b0a:	6a22      	ldr	r2, [r4, #32]
 8000b0c:	69e3      	ldr	r3, [r4, #28]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b12:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b18:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b1c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b1e:	4c0d      	ldr	r4, [pc, #52]	; (8000b54 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b20:	0852      	lsrs	r2, r2, #1
 8000b22:	3a01      	subs	r2, #1
 8000b24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b28:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b2e:	f7ff fd25 	bl	800057c <HAL_GetTick>
 8000b32:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b34:	6823      	ldr	r3, [r4, #0]
 8000b36:	019a      	lsls	r2, r3, #6
 8000b38:	f53f aebc 	bmi.w	80008b4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b3c:	f7ff fd1e 	bl	800057c <HAL_GetTick>
 8000b40:	1b40      	subs	r0, r0, r5
 8000b42:	2802      	cmp	r0, #2
 8000b44:	d9f6      	bls.n	8000b34 <HAL_RCC_OscConfig+0x2b4>
 8000b46:	e6e2      	b.n	800090e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b48:	f7ff fd18 	bl	800057c <HAL_GetTick>
 8000b4c:	1bc0      	subs	r0, r0, r7
 8000b4e:	2802      	cmp	r0, #2
 8000b50:	d9d8      	bls.n	8000b04 <HAL_RCC_OscConfig+0x284>
 8000b52:	e6dc      	b.n	800090e <HAL_RCC_OscConfig+0x8e>
 8000b54:	40023800 	.word	0x40023800
 8000b58:	42470000 	.word	0x42470000
 8000b5c:	42470e80 	.word	0x42470e80
 8000b60:	40007000 	.word	0x40007000
 8000b64:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000b68:	f7ff fd08 	bl	800057c <HAL_GetTick>
 8000b6c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b6e:	682b      	ldr	r3, [r5, #0]
 8000b70:	019b      	lsls	r3, r3, #6
 8000b72:	f57f ae9f 	bpl.w	80008b4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b76:	f7ff fd01 	bl	800057c <HAL_GetTick>
 8000b7a:	1b00      	subs	r0, r0, r4
 8000b7c:	2802      	cmp	r0, #2
 8000b7e:	d9f6      	bls.n	8000b6e <HAL_RCC_OscConfig+0x2ee>
 8000b80:	e6c5      	b.n	800090e <HAL_RCC_OscConfig+0x8e>
 8000b82:	bf00      	nop

08000b84 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b84:	4913      	ldr	r1, [pc, #76]	; (8000bd4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b86:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b88:	688b      	ldr	r3, [r1, #8]
 8000b8a:	f003 030c 	and.w	r3, r3, #12
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	d003      	beq.n	8000b9a <HAL_RCC_GetSysClockFreq+0x16>
 8000b92:	2b08      	cmp	r3, #8
 8000b94:	d003      	beq.n	8000b9e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b96:	4810      	ldr	r0, [pc, #64]	; (8000bd8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b98:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b9a:	4810      	ldr	r0, [pc, #64]	; (8000bdc <HAL_RCC_GetSysClockFreq+0x58>)
 8000b9c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b9e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ba0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ba2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ba4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ba8:	bf14      	ite	ne
 8000baa:	480c      	ldrne	r0, [pc, #48]	; (8000bdc <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bac:	480a      	ldreq	r0, [pc, #40]	; (8000bd8 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bae:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000bb2:	bf18      	it	ne
 8000bb4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bb6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bba:	fba1 0100 	umull	r0, r1, r1, r0
 8000bbe:	f7ff fb0b 	bl	80001d8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <HAL_RCC_GetSysClockFreq+0x50>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000bca:	3301      	adds	r3, #1
 8000bcc:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000bce:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bd2:	bd08      	pop	{r3, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	00f42400 	.word	0x00f42400
 8000bdc:	007a1200 	.word	0x007a1200

08000be0 <HAL_RCC_ClockConfig>:
{
 8000be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000be4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000be6:	4604      	mov	r4, r0
 8000be8:	b910      	cbnz	r0, 8000bf0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000bea:	2001      	movs	r0, #1
 8000bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000bf0:	4b44      	ldr	r3, [pc, #272]	; (8000d04 <HAL_RCC_ClockConfig+0x124>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	f002 020f 	and.w	r2, r2, #15
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	d328      	bcc.n	8000c4e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bfc:	6821      	ldr	r1, [r4, #0]
 8000bfe:	078f      	lsls	r7, r1, #30
 8000c00:	d42d      	bmi.n	8000c5e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c02:	07c8      	lsls	r0, r1, #31
 8000c04:	d440      	bmi.n	8000c88 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c06:	4b3f      	ldr	r3, [pc, #252]	; (8000d04 <HAL_RCC_ClockConfig+0x124>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	f002 020f 	and.w	r2, r2, #15
 8000c0e:	4295      	cmp	r5, r2
 8000c10:	d366      	bcc.n	8000ce0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c12:	6822      	ldr	r2, [r4, #0]
 8000c14:	0751      	lsls	r1, r2, #29
 8000c16:	d46c      	bmi.n	8000cf2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c18:	0713      	lsls	r3, r2, #28
 8000c1a:	d507      	bpl.n	8000c2c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c1c:	4a3a      	ldr	r2, [pc, #232]	; (8000d08 <HAL_RCC_ClockConfig+0x128>)
 8000c1e:	6921      	ldr	r1, [r4, #16]
 8000c20:	6893      	ldr	r3, [r2, #8]
 8000c22:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c26:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c2a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c2c:	f7ff ffaa 	bl	8000b84 <HAL_RCC_GetSysClockFreq>
 8000c30:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <HAL_RCC_ClockConfig+0x128>)
 8000c32:	4a36      	ldr	r2, [pc, #216]	; (8000d0c <HAL_RCC_ClockConfig+0x12c>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c3a:	5cd3      	ldrb	r3, [r2, r3]
 8000c3c:	40d8      	lsrs	r0, r3
 8000c3e:	4b34      	ldr	r3, [pc, #208]	; (8000d10 <HAL_RCC_ClockConfig+0x130>)
 8000c40:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c42:	2000      	movs	r0, #0
 8000c44:	f7ff fc50 	bl	80004e8 <HAL_InitTick>
  return HAL_OK;
 8000c48:	2000      	movs	r0, #0
 8000c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c4e:	b2ca      	uxtb	r2, r1
 8000c50:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 030f 	and.w	r3, r3, #15
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d1c6      	bne.n	8000bea <HAL_RCC_ClockConfig+0xa>
 8000c5c:	e7ce      	b.n	8000bfc <HAL_RCC_ClockConfig+0x1c>
 8000c5e:	4b2a      	ldr	r3, [pc, #168]	; (8000d08 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c60:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c64:	bf1e      	ittt	ne
 8000c66:	689a      	ldrne	r2, [r3, #8]
 8000c68:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c6c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c6e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c70:	bf42      	ittt	mi
 8000c72:	689a      	ldrmi	r2, [r3, #8]
 8000c74:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c78:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	68a0      	ldr	r0, [r4, #8]
 8000c7e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c82:	4302      	orrs	r2, r0
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	e7bc      	b.n	8000c02 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c88:	6862      	ldr	r2, [r4, #4]
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <HAL_RCC_ClockConfig+0x128>)
 8000c8c:	2a01      	cmp	r2, #1
 8000c8e:	d11d      	bne.n	8000ccc <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c96:	d0a8      	beq.n	8000bea <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c98:	4e1b      	ldr	r6, [pc, #108]	; (8000d08 <HAL_RCC_ClockConfig+0x128>)
 8000c9a:	68b3      	ldr	r3, [r6, #8]
 8000c9c:	f023 0303 	bic.w	r3, r3, #3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000ca4:	f7ff fc6a 	bl	800057c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ca8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cac:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cae:	68b3      	ldr	r3, [r6, #8]
 8000cb0:	6862      	ldr	r2, [r4, #4]
 8000cb2:	f003 030c 	and.w	r3, r3, #12
 8000cb6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000cba:	d0a4      	beq.n	8000c06 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cbc:	f7ff fc5e 	bl	800057c <HAL_GetTick>
 8000cc0:	1bc0      	subs	r0, r0, r7
 8000cc2:	4540      	cmp	r0, r8
 8000cc4:	d9f3      	bls.n	8000cae <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000cc6:	2003      	movs	r0, #3
}
 8000cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ccc:	1e91      	subs	r1, r2, #2
 8000cce:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cd0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cd2:	d802      	bhi.n	8000cda <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cd4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cd8:	e7dd      	b.n	8000c96 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cda:	f013 0f02 	tst.w	r3, #2
 8000cde:	e7da      	b.n	8000c96 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ce0:	b2ea      	uxtb	r2, r5
 8000ce2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	429d      	cmp	r5, r3
 8000cec:	f47f af7d 	bne.w	8000bea <HAL_RCC_ClockConfig+0xa>
 8000cf0:	e78f      	b.n	8000c12 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cf2:	4905      	ldr	r1, [pc, #20]	; (8000d08 <HAL_RCC_ClockConfig+0x128>)
 8000cf4:	68e0      	ldr	r0, [r4, #12]
 8000cf6:	688b      	ldr	r3, [r1, #8]
 8000cf8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000cfc:	4303      	orrs	r3, r0
 8000cfe:	608b      	str	r3, [r1, #8]
 8000d00:	e78a      	b.n	8000c18 <HAL_RCC_ClockConfig+0x38>
 8000d02:	bf00      	nop
 8000d04:	40023c00 	.word	0x40023c00
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	08001768 	.word	0x08001768
 8000d10:	20000008 	.word	0x20000008

08000d14 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000d14:	4b01      	ldr	r3, [pc, #4]	; (8000d1c <HAL_RCC_GetHCLKFreq+0x8>)
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008

08000d20 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d2a:	5cd3      	ldrb	r3, [r2, r3]
 8000d2c:	4a03      	ldr	r2, [pc, #12]	; (8000d3c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d2e:	6810      	ldr	r0, [r2, #0]
}
 8000d30:	40d8      	lsrs	r0, r3
 8000d32:	4770      	bx	lr
 8000d34:	40023800 	.word	0x40023800
 8000d38:	08001778 	.word	0x08001778
 8000d3c:	20000008 	.word	0x20000008

08000d40 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d4a:	5cd3      	ldrb	r3, [r2, r3]
 8000d4c:	4a03      	ldr	r2, [pc, #12]	; (8000d5c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d4e:	6810      	ldr	r0, [r2, #0]
}
 8000d50:	40d8      	lsrs	r0, r3
 8000d52:	4770      	bx	lr
 8000d54:	40023800 	.word	0x40023800
 8000d58:	08001778 	.word	0x08001778
 8000d5c:	20000008 	.word	0x20000008

08000d60 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000d60:	6803      	ldr	r3, [r0, #0]
 8000d62:	68da      	ldr	r2, [r3, #12]
 8000d64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000d68:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000d6a:	695a      	ldr	r2, [r3, #20]
 8000d6c:	f022 0201 	bic.w	r2, r2, #1
 8000d70:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000d72:	2320      	movs	r3, #32
 8000d74:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000d78:	4770      	bx	lr
	...

08000d7c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000d80:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000d82:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8000d84:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d86:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000d88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000d8c:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000d8e:	6133      	str	r3, [r6, #16]
{
 8000d90:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d92:	6883      	ldr	r3, [r0, #8]
 8000d94:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8000d96:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d98:	4303      	orrs	r3, r0
 8000d9a:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000d9c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000da0:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000da2:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000da6:	430b      	orrs	r3, r1
 8000da8:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8000daa:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8000dac:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000dae:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8000db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8000db4:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000db6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8000dba:	6173      	str	r3, [r6, #20]
 8000dbc:	4b7a      	ldr	r3, [pc, #488]	; (8000fa8 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000dbe:	d17c      	bne.n	8000eba <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000dc0:	429e      	cmp	r6, r3
 8000dc2:	d003      	beq.n	8000dcc <UART_SetConfig+0x50>
 8000dc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dc8:	429e      	cmp	r6, r3
 8000dca:	d144      	bne.n	8000e56 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000dcc:	f7ff ffb8 	bl	8000d40 <HAL_RCC_GetPCLK2Freq>
 8000dd0:	2519      	movs	r5, #25
 8000dd2:	fb05 f300 	mul.w	r3, r5, r0
 8000dd6:	6860      	ldr	r0, [r4, #4]
 8000dd8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000ddc:	0040      	lsls	r0, r0, #1
 8000dde:	fbb3 f3f0 	udiv	r3, r3, r0
 8000de2:	fbb3 f3f9 	udiv	r3, r3, r9
 8000de6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000dea:	f7ff ffa9 	bl	8000d40 <HAL_RCC_GetPCLK2Freq>
 8000dee:	6863      	ldr	r3, [r4, #4]
 8000df0:	4368      	muls	r0, r5
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	fbb0 f7f3 	udiv	r7, r0, r3
 8000df8:	f7ff ffa2 	bl	8000d40 <HAL_RCC_GetPCLK2Freq>
 8000dfc:	6863      	ldr	r3, [r4, #4]
 8000dfe:	4368      	muls	r0, r5
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e06:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e0a:	fb09 7313 	mls	r3, r9, r3, r7
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	3332      	adds	r3, #50	; 0x32
 8000e12:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000e1c:	f7ff ff90 	bl	8000d40 <HAL_RCC_GetPCLK2Freq>
 8000e20:	6862      	ldr	r2, [r4, #4]
 8000e22:	4368      	muls	r0, r5
 8000e24:	0052      	lsls	r2, r2, #1
 8000e26:	fbb0 faf2 	udiv	sl, r0, r2
 8000e2a:	f7ff ff89 	bl	8000d40 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e2e:	6863      	ldr	r3, [r4, #4]
 8000e30:	4368      	muls	r0, r5
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e38:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e3c:	fb09 a313 	mls	r3, r9, r3, sl
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	3332      	adds	r3, #50	; 0x32
 8000e44:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e4e:	443b      	add	r3, r7
 8000e50:	60b3      	str	r3, [r6, #8]
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e56:	f7ff ff63 	bl	8000d20 <HAL_RCC_GetPCLK1Freq>
 8000e5a:	2519      	movs	r5, #25
 8000e5c:	fb05 f300 	mul.w	r3, r5, r0
 8000e60:	6860      	ldr	r0, [r4, #4]
 8000e62:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000e66:	0040      	lsls	r0, r0, #1
 8000e68:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e6c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000e74:	f7ff ff54 	bl	8000d20 <HAL_RCC_GetPCLK1Freq>
 8000e78:	6863      	ldr	r3, [r4, #4]
 8000e7a:	4368      	muls	r0, r5
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	fbb0 f7f3 	udiv	r7, r0, r3
 8000e82:	f7ff ff4d 	bl	8000d20 <HAL_RCC_GetPCLK1Freq>
 8000e86:	6863      	ldr	r3, [r4, #4]
 8000e88:	4368      	muls	r0, r5
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e90:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e94:	fb09 7313 	mls	r3, r9, r3, r7
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	3332      	adds	r3, #50	; 0x32
 8000e9c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000ea6:	f7ff ff3b 	bl	8000d20 <HAL_RCC_GetPCLK1Freq>
 8000eaa:	6862      	ldr	r2, [r4, #4]
 8000eac:	4368      	muls	r0, r5
 8000eae:	0052      	lsls	r2, r2, #1
 8000eb0:	fbb0 faf2 	udiv	sl, r0, r2
 8000eb4:	f7ff ff34 	bl	8000d20 <HAL_RCC_GetPCLK1Freq>
 8000eb8:	e7b9      	b.n	8000e2e <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000eba:	429e      	cmp	r6, r3
 8000ebc:	d002      	beq.n	8000ec4 <UART_SetConfig+0x148>
 8000ebe:	4b3b      	ldr	r3, [pc, #236]	; (8000fac <UART_SetConfig+0x230>)
 8000ec0:	429e      	cmp	r6, r3
 8000ec2:	d140      	bne.n	8000f46 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000ec4:	f7ff ff3c 	bl	8000d40 <HAL_RCC_GetPCLK2Freq>
 8000ec8:	6867      	ldr	r7, [r4, #4]
 8000eca:	2519      	movs	r5, #25
 8000ecc:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000ed0:	fb05 f300 	mul.w	r3, r5, r0
 8000ed4:	00bf      	lsls	r7, r7, #2
 8000ed6:	fbb3 f3f7 	udiv	r3, r3, r7
 8000eda:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ede:	011f      	lsls	r7, r3, #4
 8000ee0:	f7ff ff2e 	bl	8000d40 <HAL_RCC_GetPCLK2Freq>
 8000ee4:	6863      	ldr	r3, [r4, #4]
 8000ee6:	4368      	muls	r0, r5
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	fbb0 f8f3 	udiv	r8, r0, r3
 8000eee:	f7ff ff27 	bl	8000d40 <HAL_RCC_GetPCLK2Freq>
 8000ef2:	6863      	ldr	r3, [r4, #4]
 8000ef4:	4368      	muls	r0, r5
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000efc:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f00:	fb09 8313 	mls	r3, r9, r3, r8
 8000f04:	011b      	lsls	r3, r3, #4
 8000f06:	3332      	adds	r3, #50	; 0x32
 8000f08:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f0c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8000f10:	f7ff ff16 	bl	8000d40 <HAL_RCC_GetPCLK2Freq>
 8000f14:	6862      	ldr	r2, [r4, #4]
 8000f16:	4368      	muls	r0, r5
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	fbb0 faf2 	udiv	sl, r0, r2
 8000f1e:	f7ff ff0f 	bl	8000d40 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f22:	6863      	ldr	r3, [r4, #4]
 8000f24:	4368      	muls	r0, r5
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f2c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f30:	fb09 a313 	mls	r3, r9, r3, sl
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	3332      	adds	r3, #50	; 0x32
 8000f38:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f3c:	f003 030f 	and.w	r3, r3, #15
 8000f40:	ea43 0308 	orr.w	r3, r3, r8
 8000f44:	e783      	b.n	8000e4e <UART_SetConfig+0xd2>
 8000f46:	f7ff feeb 	bl	8000d20 <HAL_RCC_GetPCLK1Freq>
 8000f4a:	6867      	ldr	r7, [r4, #4]
 8000f4c:	2519      	movs	r5, #25
 8000f4e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000f52:	fb05 f300 	mul.w	r3, r5, r0
 8000f56:	00bf      	lsls	r7, r7, #2
 8000f58:	fbb3 f3f7 	udiv	r3, r3, r7
 8000f5c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f60:	011f      	lsls	r7, r3, #4
 8000f62:	f7ff fedd 	bl	8000d20 <HAL_RCC_GetPCLK1Freq>
 8000f66:	6863      	ldr	r3, [r4, #4]
 8000f68:	4368      	muls	r0, r5
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	fbb0 f8f3 	udiv	r8, r0, r3
 8000f70:	f7ff fed6 	bl	8000d20 <HAL_RCC_GetPCLK1Freq>
 8000f74:	6863      	ldr	r3, [r4, #4]
 8000f76:	4368      	muls	r0, r5
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f7e:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f82:	fb09 8313 	mls	r3, r9, r3, r8
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	3332      	adds	r3, #50	; 0x32
 8000f8a:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f8e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8000f92:	f7ff fec5 	bl	8000d20 <HAL_RCC_GetPCLK1Freq>
 8000f96:	6862      	ldr	r2, [r4, #4]
 8000f98:	4368      	muls	r0, r5
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	fbb0 faf2 	udiv	sl, r0, r2
 8000fa0:	f7ff febe 	bl	8000d20 <HAL_RCC_GetPCLK1Freq>
 8000fa4:	e7bd      	b.n	8000f22 <UART_SetConfig+0x1a6>
 8000fa6:	bf00      	nop
 8000fa8:	40011000 	.word	0x40011000
 8000fac:	40011400 	.word	0x40011400

08000fb0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	460e      	mov	r6, r1
 8000fb6:	4617      	mov	r7, r2
 8000fb8:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000fba:	6821      	ldr	r1, [r4, #0]
 8000fbc:	680b      	ldr	r3, [r1, #0]
 8000fbe:	ea36 0303 	bics.w	r3, r6, r3
 8000fc2:	d101      	bne.n	8000fc8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000fc4:	2000      	movs	r0, #0
}
 8000fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000fc8:	1c6b      	adds	r3, r5, #1
 8000fca:	d0f7      	beq.n	8000fbc <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000fcc:	b995      	cbnz	r5, 8000ff4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000fce:	6823      	ldr	r3, [r4, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000fd6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000fd8:	695a      	ldr	r2, [r3, #20]
 8000fda:	f022 0201 	bic.w	r2, r2, #1
 8000fde:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000fe6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000fea:	2300      	movs	r3, #0
 8000fec:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000ff4:	f7ff fac2 	bl	800057c <HAL_GetTick>
 8000ff8:	1bc0      	subs	r0, r0, r7
 8000ffa:	4285      	cmp	r5, r0
 8000ffc:	d2dd      	bcs.n	8000fba <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000ffe:	e7e6      	b.n	8000fce <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001000 <HAL_UART_Init>:
{
 8001000:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001002:	4604      	mov	r4, r0
 8001004:	b340      	cbz	r0, 8001058 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001006:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800100a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800100e:	b91b      	cbnz	r3, 8001018 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001010:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001014:	f000 fac8 	bl	80015a8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001018:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800101a:	2324      	movs	r3, #36	; 0x24
 800101c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001020:	68d3      	ldr	r3, [r2, #12]
 8001022:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001026:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001028:	4620      	mov	r0, r4
 800102a:	f7ff fea7 	bl	8000d7c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	691a      	ldr	r2, [r3, #16]
 8001032:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001036:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001038:	695a      	ldr	r2, [r3, #20]
 800103a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800103e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001046:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001048:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800104a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800104c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800104e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001052:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001056:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001058:	2001      	movs	r0, #1
}
 800105a:	bd10      	pop	{r4, pc}

0800105c <HAL_UART_Transmit>:
{
 800105c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001060:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8001062:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001066:	2b20      	cmp	r3, #32
{
 8001068:	4604      	mov	r4, r0
 800106a:	460d      	mov	r5, r1
 800106c:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 800106e:	d14f      	bne.n	8001110 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8001070:	2900      	cmp	r1, #0
 8001072:	d04a      	beq.n	800110a <HAL_UART_Transmit+0xae>
 8001074:	2a00      	cmp	r2, #0
 8001076:	d048      	beq.n	800110a <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001078:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800107c:	2b01      	cmp	r3, #1
 800107e:	d047      	beq.n	8001110 <HAL_UART_Transmit+0xb4>
 8001080:	2301      	movs	r3, #1
 8001082:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001086:	2300      	movs	r3, #0
 8001088:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800108a:	2321      	movs	r3, #33	; 0x21
 800108c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001090:	f7ff fa74 	bl	800057c <HAL_GetTick>
    huart->TxXferSize = Size;
 8001094:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001098:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800109a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800109e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	b96b      	cbnz	r3, 80010c0 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80010a4:	463b      	mov	r3, r7
 80010a6:	4632      	mov	r2, r6
 80010a8:	2140      	movs	r1, #64	; 0x40
 80010aa:	4620      	mov	r0, r4
 80010ac:	f7ff ff80 	bl	8000fb0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80010b0:	b9b0      	cbnz	r0, 80010e0 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 80010b2:	2320      	movs	r3, #32
 80010b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80010b8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80010bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80010c0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80010c2:	3b01      	subs	r3, #1
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010c8:	68a3      	ldr	r3, [r4, #8]
 80010ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010ce:	4632      	mov	r2, r6
 80010d0:	463b      	mov	r3, r7
 80010d2:	f04f 0180 	mov.w	r1, #128	; 0x80
 80010d6:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010d8:	d10e      	bne.n	80010f8 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010da:	f7ff ff69 	bl	8000fb0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80010de:	b110      	cbz	r0, 80010e6 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80010e0:	2003      	movs	r0, #3
 80010e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80010e6:	882b      	ldrh	r3, [r5, #0]
 80010e8:	6822      	ldr	r2, [r4, #0]
 80010ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010ee:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80010f0:	6923      	ldr	r3, [r4, #16]
 80010f2:	b943      	cbnz	r3, 8001106 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 80010f4:	3502      	adds	r5, #2
 80010f6:	e7d2      	b.n	800109e <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010f8:	f7ff ff5a 	bl	8000fb0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80010fc:	2800      	cmp	r0, #0
 80010fe:	d1ef      	bne.n	80010e0 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	782a      	ldrb	r2, [r5, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	3501      	adds	r5, #1
 8001108:	e7c9      	b.n	800109e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800110a:	2001      	movs	r0, #1
 800110c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001110:	2002      	movs	r0, #2
}
 8001112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001116 <HAL_UART_TxCpltCallback>:
 8001116:	4770      	bx	lr

08001118 <HAL_UART_RxCpltCallback>:
 8001118:	4770      	bx	lr

0800111a <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800111a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800111e:	2b22      	cmp	r3, #34	; 0x22
{
 8001120:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001122:	d132      	bne.n	800118a <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001124:	6883      	ldr	r3, [r0, #8]
 8001126:	6901      	ldr	r1, [r0, #16]
 8001128:	6802      	ldr	r2, [r0, #0]
 800112a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800112e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001130:	d11f      	bne.n	8001172 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001132:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001134:	b9c9      	cbnz	r1, 800116a <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001136:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800113a:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800113e:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001140:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001142:	3c01      	subs	r4, #1
 8001144:	b2a4      	uxth	r4, r4
 8001146:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001148:	b96c      	cbnz	r4, 8001166 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800114a:	6803      	ldr	r3, [r0, #0]
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001152:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001154:	695a      	ldr	r2, [r3, #20]
 8001156:	f022 0201 	bic.w	r2, r2, #1
 800115a:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800115c:	2320      	movs	r3, #32
 800115e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001162:	f7ff ffd9 	bl	8001118 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8001166:	2000      	movs	r0, #0
}
 8001168:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	f823 2b01 	strh.w	r2, [r3], #1
 8001170:	e7e5      	b.n	800113e <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001172:	b921      	cbnz	r1, 800117e <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001174:	1c59      	adds	r1, r3, #1
 8001176:	6852      	ldr	r2, [r2, #4]
 8001178:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e7e0      	b.n	8001140 <UART_Receive_IT+0x26>
 800117e:	6852      	ldr	r2, [r2, #4]
 8001180:	1c59      	adds	r1, r3, #1
 8001182:	6281      	str	r1, [r0, #40]	; 0x28
 8001184:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001188:	e7f7      	b.n	800117a <UART_Receive_IT+0x60>
    return HAL_BUSY;
 800118a:	2002      	movs	r0, #2
 800118c:	bd10      	pop	{r4, pc}

0800118e <HAL_UART_ErrorCallback>:
 800118e:	4770      	bx	lr

08001190 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001190:	6803      	ldr	r3, [r0, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001194:	68d9      	ldr	r1, [r3, #12]
{
 8001196:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8001198:	0716      	lsls	r6, r2, #28
{
 800119a:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800119c:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 800119e:	d107      	bne.n	80011b0 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80011a0:	0696      	lsls	r6, r2, #26
 80011a2:	d55a      	bpl.n	800125a <HAL_UART_IRQHandler+0xca>
 80011a4:	068d      	lsls	r5, r1, #26
 80011a6:	d558      	bpl.n	800125a <HAL_UART_IRQHandler+0xca>
}
 80011a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80011ac:	f7ff bfb5 	b.w	800111a <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80011b0:	f015 0501 	ands.w	r5, r5, #1
 80011b4:	d102      	bne.n	80011bc <HAL_UART_IRQHandler+0x2c>
 80011b6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80011ba:	d04e      	beq.n	800125a <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80011bc:	07d3      	lsls	r3, r2, #31
 80011be:	d505      	bpl.n	80011cc <HAL_UART_IRQHandler+0x3c>
 80011c0:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80011c2:	bf42      	ittt	mi
 80011c4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80011c6:	f043 0301 	orrmi.w	r3, r3, #1
 80011ca:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80011cc:	0750      	lsls	r0, r2, #29
 80011ce:	d504      	bpl.n	80011da <HAL_UART_IRQHandler+0x4a>
 80011d0:	b11d      	cbz	r5, 80011da <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80011d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80011da:	0793      	lsls	r3, r2, #30
 80011dc:	d504      	bpl.n	80011e8 <HAL_UART_IRQHandler+0x58>
 80011de:	b11d      	cbz	r5, 80011e8 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80011e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011e2:	f043 0304 	orr.w	r3, r3, #4
 80011e6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80011e8:	0716      	lsls	r6, r2, #28
 80011ea:	d504      	bpl.n	80011f6 <HAL_UART_IRQHandler+0x66>
 80011ec:	b11d      	cbz	r5, 80011f6 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80011ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011f0:	f043 0308 	orr.w	r3, r3, #8
 80011f4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80011f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d066      	beq.n	80012ca <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80011fc:	0695      	lsls	r5, r2, #26
 80011fe:	d504      	bpl.n	800120a <HAL_UART_IRQHandler+0x7a>
 8001200:	0688      	lsls	r0, r1, #26
 8001202:	d502      	bpl.n	800120a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001204:	4620      	mov	r0, r4
 8001206:	f7ff ff88 	bl	800111a <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800120e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001210:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001212:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001214:	d402      	bmi.n	800121c <HAL_UART_IRQHandler+0x8c>
 8001216:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800121a:	d01a      	beq.n	8001252 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800121c:	f7ff fda0 	bl	8000d60 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	695a      	ldr	r2, [r3, #20]
 8001224:	0652      	lsls	r2, r2, #25
 8001226:	d510      	bpl.n	800124a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001228:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800122a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800122c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001230:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001232:	b150      	cbz	r0, 800124a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <HAL_UART_IRQHandler+0x13c>)
 8001236:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001238:	f7ff fa33 	bl	80006a2 <HAL_DMA_Abort_IT>
 800123c:	2800      	cmp	r0, #0
 800123e:	d044      	beq.n	80012ca <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001240:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001246:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001248:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800124a:	4620      	mov	r0, r4
 800124c:	f7ff ff9f 	bl	800118e <HAL_UART_ErrorCallback>
 8001250:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001252:	f7ff ff9c 	bl	800118e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001256:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001258:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800125a:	0616      	lsls	r6, r2, #24
 800125c:	d527      	bpl.n	80012ae <HAL_UART_IRQHandler+0x11e>
 800125e:	060d      	lsls	r5, r1, #24
 8001260:	d525      	bpl.n	80012ae <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001262:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001266:	2a21      	cmp	r2, #33	; 0x21
 8001268:	d12f      	bne.n	80012ca <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800126a:	68a2      	ldr	r2, [r4, #8]
 800126c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001270:	6a22      	ldr	r2, [r4, #32]
 8001272:	d117      	bne.n	80012a4 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001274:	8811      	ldrh	r1, [r2, #0]
 8001276:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800127a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800127c:	6921      	ldr	r1, [r4, #16]
 800127e:	b979      	cbnz	r1, 80012a0 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001280:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001282:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8001284:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001286:	3a01      	subs	r2, #1
 8001288:	b292      	uxth	r2, r2
 800128a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800128c:	b9ea      	cbnz	r2, 80012ca <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001294:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80012a0:	3201      	adds	r2, #1
 80012a2:	e7ee      	b.n	8001282 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80012a4:	1c51      	adds	r1, r2, #1
 80012a6:	6221      	str	r1, [r4, #32]
 80012a8:	7812      	ldrb	r2, [r2, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	e7ea      	b.n	8001284 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80012ae:	0650      	lsls	r0, r2, #25
 80012b0:	d50b      	bpl.n	80012ca <HAL_UART_IRQHandler+0x13a>
 80012b2:	064a      	lsls	r2, r1, #25
 80012b4:	d509      	bpl.n	80012ca <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012bc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80012be:	2320      	movs	r3, #32
 80012c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80012c4:	4620      	mov	r0, r4
 80012c6:	f7ff ff26 	bl	8001116 <HAL_UART_TxCpltCallback>
 80012ca:	bd70      	pop	{r4, r5, r6, pc}
 80012cc:	080012d1 	.word	0x080012d1

080012d0 <UART_DMAAbortOnError>:
{
 80012d0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80012d8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80012da:	f7ff ff58 	bl	800118e <HAL_UART_ErrorCallback>
 80012de:	bd08      	pop	{r3, pc}

080012e0 <checkSum>:
#define DIRECTION_PIN GPIO_PIN_9
#define DIRECTION_PORT GPIOA
#define SEND GPIO_PIN_SET
#define RECEIVE GPIO_PIN_RESET

uint8_t checkSum(uint8_t *data, int size){
 80012e0:	b510      	push	{r4, lr}
 80012e2:	1c82      	adds	r2, r0, #2
	uint8_t sum = 0x00;
 80012e4:	2300      	movs	r3, #0
	for (int i = 2; i<size; i++){
 80012e6:	1a14      	subs	r4, r2, r0
 80012e8:	42a1      	cmp	r1, r4
 80012ea:	dc02      	bgt.n	80012f2 <checkSum+0x12>
		sum += data[i];
	}
	return ~(sum);
 80012ec:	43d8      	mvns	r0, r3
}
 80012ee:	b2c0      	uxtb	r0, r0
 80012f0:	bd10      	pop	{r4, pc}
		sum += data[i];
 80012f2:	f812 4b01 	ldrb.w	r4, [r2], #1
 80012f6:	4423      	add	r3, r4
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	e7f4      	b.n	80012e6 <checkSum+0x6>

080012fc <sendData>:

void sendData(uint8_t byte, uint8_t mem_addr, uint8_t ID, UART_HandleTypeDef *huart){
 80012fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(DIRECTION_PORT, DIRECTION_PIN, SEND);
 8001300:	4c18      	ldr	r4, [pc, #96]	; (8001364 <sendData+0x68>)
void sendData(uint8_t byte, uint8_t mem_addr, uint8_t ID, UART_HandleTypeDef *huart){
 8001302:	4606      	mov	r6, r0
 8001304:	460f      	mov	r7, r1
 8001306:	4690      	mov	r8, r2
	HAL_GPIO_WritePin(DIRECTION_PORT, DIRECTION_PIN, SEND);
 8001308:	4620      	mov	r0, r4
 800130a:	2201      	movs	r2, #1
 800130c:	f44f 7100 	mov.w	r1, #512	; 0x200
void sendData(uint8_t byte, uint8_t mem_addr, uint8_t ID, UART_HandleTypeDef *huart){
 8001310:	461d      	mov	r5, r3
	HAL_GPIO_WritePin(DIRECTION_PORT, DIRECTION_PIN, SEND);
 8001312:	f7ff faaf 	bl	8000874 <HAL_GPIO_WritePin>
	uint8_t data[8];
	data[0] = 0xFF;
 8001316:	23ff      	movs	r3, #255	; 0xff
 8001318:	f88d 3000 	strb.w	r3, [sp]
	data[1] = 0xFF;
 800131c:	f88d 3001 	strb.w	r3, [sp, #1]
	data[2] = ID;
	data[3] = 0x04;
 8001320:	2304      	movs	r3, #4
 8001322:	f88d 3003 	strb.w	r3, [sp, #3]
	data[4] = 0x03;
	data[5] = mem_addr;
	data[6] = byte;
	data[7] = checkSum(data, 7);
 8001326:	2107      	movs	r1, #7
	data[4] = 0x03;
 8001328:	2303      	movs	r3, #3
	data[7] = checkSum(data, 7);
 800132a:	4668      	mov	r0, sp
	data[4] = 0x03;
 800132c:	f88d 3004 	strb.w	r3, [sp, #4]
	data[2] = ID;
 8001330:	f88d 8002 	strb.w	r8, [sp, #2]
	data[5] = mem_addr;
 8001334:	f88d 7005 	strb.w	r7, [sp, #5]
	data[6] = byte;
 8001338:	f88d 6006 	strb.w	r6, [sp, #6]
	data[7] = checkSum(data, 7);
 800133c:	f7ff ffd0 	bl	80012e0 <checkSum>
	HAL_UART_Transmit(huart, data, 8, 100);
 8001340:	2364      	movs	r3, #100	; 0x64
	data[7] = checkSum(data, 7);
 8001342:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_UART_Transmit(huart, data, 8, 100);
 8001346:	4669      	mov	r1, sp
 8001348:	2208      	movs	r2, #8
 800134a:	4628      	mov	r0, r5
 800134c:	f7ff fe86 	bl	800105c <HAL_UART_Transmit>
	HAL_GPIO_WritePin(DIRECTION_PORT, DIRECTION_PIN, RECEIVE);
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001356:	4620      	mov	r0, r4
 8001358:	f7ff fa8c 	bl	8000874 <HAL_GPIO_WritePin>
}
 800135c:	b002      	add	sp, #8
 800135e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001362:	bf00      	nop
 8001364:	40020000 	.word	0x40020000

08001368 <LedOn>:



void LedOn(uint8_t ID, UART_HandleTypeDef *huart){
	sendData(0x01, 0x18, ID, huart);
 8001368:	460b      	mov	r3, r1
 800136a:	4602      	mov	r2, r0
 800136c:	2118      	movs	r1, #24
 800136e:	2001      	movs	r0, #1
 8001370:	f7ff bfc4 	b.w	80012fc <sendData>

08001374 <LedOff>:
}

void LedOff(uint8_t ID, UART_HandleTypeDef *huart){
	sendData(0x00, 0x18, ID, huart);
 8001374:	460b      	mov	r3, r1
 8001376:	4602      	mov	r2, r0
 8001378:	2118      	movs	r1, #24
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff bfbe 	b.w	80012fc <sendData>

08001380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001380:	b530      	push	{r4, r5, lr}
 8001382:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	4a26      	ldr	r2, [pc, #152]	; (8001420 <SystemClock_Config+0xa0>)
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800138c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001390:	6411      	str	r1, [r2, #64]	; 0x40
 8001392:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001394:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001398:	9201      	str	r2, [sp, #4]
 800139a:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800139c:	4a21      	ldr	r2, [pc, #132]	; (8001424 <SystemClock_Config+0xa4>)
 800139e:	9302      	str	r3, [sp, #8]
 80013a0:	6811      	ldr	r1, [r2, #0]
 80013a2:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80013a6:	6011      	str	r1, [r2, #0]
 80013a8:	6812      	ldr	r2, [r2, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013aa:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ac:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80013b0:	9202      	str	r2, [sp, #8]
 80013b2:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b4:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b6:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013b8:	2504      	movs	r5, #4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ba:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80013c0:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c4:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80013c6:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c8:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013ca:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013cc:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013ce:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013d0:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d2:	f7ff fa55 	bl	8000880 <HAL_RCC_OscConfig>
 80013d6:	b100      	cbz	r0, 80013da <SystemClock_Config+0x5a>
 80013d8:	e7fe      	b.n	80013d8 <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013da:	230f      	movs	r3, #15
 80013dc:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013de:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e4:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013e6:	4621      	mov	r1, r4
 80013e8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ea:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ec:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ee:	f7ff fbf7 	bl	8000be0 <HAL_RCC_ClockConfig>
 80013f2:	4604      	mov	r4, r0
 80013f4:	b100      	cbz	r0, 80013f8 <SystemClock_Config+0x78>
 80013f6:	e7fe      	b.n	80013f6 <SystemClock_Config+0x76>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80013f8:	f7ff fc8c 	bl	8000d14 <HAL_RCC_GetHCLKFreq>
 80013fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001400:	fbb0 f0f3 	udiv	r0, r0, r3
 8001404:	f7ff f926 	bl	8000654 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001408:	4628      	mov	r0, r5
 800140a:	f7ff f939 	bl	8000680 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800140e:	4622      	mov	r2, r4
 8001410:	4621      	mov	r1, r4
 8001412:	f04f 30ff 	mov.w	r0, #4294967295
 8001416:	f7ff f8dd 	bl	80005d4 <HAL_NVIC_SetPriority>
}
 800141a:	b015      	add	sp, #84	; 0x54
 800141c:	bd30      	pop	{r4, r5, pc}
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40007000 	.word	0x40007000

08001428 <main>:
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142c:	2500      	movs	r5, #0
  HAL_Init();
 800142e:	f7ff f87f 	bl	8000530 <HAL_Init>
  SystemClock_Config();
 8001432:	f7ff ffa5 	bl	8001380 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	4b3b      	ldr	r3, [pc, #236]	; (8001524 <main+0xfc>)
 8001438:	9501      	str	r5, [sp, #4]
 800143a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800143c:	483a      	ldr	r0, [pc, #232]	; (8001528 <main+0x100>)
  huart2.Instance = USART2;
 800143e:	4c3b      	ldr	r4, [pc, #236]	; (800152c <main+0x104>)
  huart2.Init.BaudRate = 1000000;
 8001440:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8001544 <main+0x11c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001444:	f042 0204 	orr.w	r2, r2, #4
 8001448:	631a      	str	r2, [r3, #48]	; 0x30
 800144a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800144c:	f002 0204 	and.w	r2, r2, #4
 8001450:	9201      	str	r2, [sp, #4]
 8001452:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001454:	9502      	str	r5, [sp, #8]
 8001456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001458:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800145c:	631a      	str	r2, [r3, #48]	; 0x30
 800145e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001460:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001464:	9202      	str	r2, [sp, #8]
 8001466:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	9503      	str	r5, [sp, #12]
 800146a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800146c:	f042 0201 	orr.w	r2, r2, #1
 8001470:	631a      	str	r2, [r3, #48]	; 0x30
 8001472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001474:	f002 0201 	and.w	r2, r2, #1
 8001478:	9203      	str	r2, [sp, #12]
 800147a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147c:	9504      	str	r5, [sp, #16]
 800147e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001480:	f042 0202 	orr.w	r2, r2, #2
 8001484:	631a      	str	r2, [r3, #48]	; 0x30
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800148c:	462a      	mov	r2, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001490:	f44f 7108 	mov.w	r1, #544	; 0x220
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001496:	f44f 5700 	mov.w	r7, #8192	; 0x2000
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800149a:	f7ff f9eb 	bl	8000874 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800149e:	4b24      	ldr	r3, [pc, #144]	; (8001530 <main+0x108>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014a0:	4824      	ldr	r0, [pc, #144]	; (8001534 <main+0x10c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014a4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = B1_Pin;
 80014a6:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f7ff f90d 	bl	80006c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 80014ae:	f44f 7308 	mov.w	r3, #544	; 0x220
 80014b2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	481c      	ldr	r0, [pc, #112]	; (8001528 <main+0x100>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f7ff f902 	bl	80006c8 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 1000000;
 80014c4:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <main+0x110>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014c6:	60a5      	str	r5, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014c8:	260c      	movs	r6, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ca:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 1000000;
 80014cc:	e884 0108 	stmia.w	r4, {r3, r8}
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d0:	60e5      	str	r5, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014d2:	6125      	str	r5, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014d4:	6166      	str	r6, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	61a5      	str	r5, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	61e5      	str	r5, [r4, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014da:	f7ff fd91 	bl	8001000 <HAL_UART_Init>
 80014de:	b100      	cbz	r0, 80014e2 <main+0xba>
 80014e0:	e7fe      	b.n	80014e0 <main+0xb8>
  huart6.Instance = USART6;
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <main+0x114>)
 80014e4:	4a16      	ldr	r2, [pc, #88]	; (8001540 <main+0x118>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014e6:	6098      	str	r0, [r3, #8]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014e8:	6118      	str	r0, [r3, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	6198      	str	r0, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014ee:	4618      	mov	r0, r3
  huart6.Init.BaudRate = 1000000;
 80014f0:	e883 0104 	stmia.w	r3, {r2, r8}
  huart6.Init.StopBits = UART_STOPBITS_2;
 80014f4:	60df      	str	r7, [r3, #12]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014f6:	615e      	str	r6, [r3, #20]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014f8:	f7ff fd82 	bl	8001000 <HAL_UART_Init>
 80014fc:	b100      	cbz	r0, 8001500 <main+0xd8>
 80014fe:	e7fe      	b.n	80014fe <main+0xd6>
	  HAL_Delay(1000);
 8001500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001504:	f7ff f840 	bl	8000588 <HAL_Delay>
	  LedOn(0xFE, &huart2);
 8001508:	4621      	mov	r1, r4
 800150a:	20fe      	movs	r0, #254	; 0xfe
 800150c:	f7ff ff2c 	bl	8001368 <LedOn>
	  HAL_Delay(1000);
 8001510:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001514:	f7ff f838 	bl	8000588 <HAL_Delay>
	  LedOff(0xFE, &huart2);
 8001518:	4621      	mov	r1, r4
 800151a:	20fe      	movs	r0, #254	; 0xfe
 800151c:	f7ff ff2a 	bl	8001374 <LedOff>
 8001520:	e7ee      	b.n	8001500 <main+0xd8>
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40020000 	.word	0x40020000
 800152c:	2000006c 	.word	0x2000006c
 8001530:	10210000 	.word	0x10210000
 8001534:	40020800 	.word	0x40020800
 8001538:	40004400 	.word	0x40004400
 800153c:	2000002c 	.word	0x2000002c
 8001540:	40011400 	.word	0x40011400
 8001544:	000f4240 	.word	0x000f4240

08001548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800154a:	2007      	movs	r0, #7
 800154c:	f7ff f830 	bl	80005b0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	4611      	mov	r1, r2
 8001554:	f06f 000b 	mvn.w	r0, #11
 8001558:	f7ff f83c 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800155c:	2200      	movs	r2, #0
 800155e:	4611      	mov	r1, r2
 8001560:	f06f 000a 	mvn.w	r0, #10
 8001564:	f7ff f836 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	4611      	mov	r1, r2
 800156c:	f06f 0009 	mvn.w	r0, #9
 8001570:	f7ff f830 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	4611      	mov	r1, r2
 8001578:	f06f 0004 	mvn.w	r0, #4
 800157c:	f7ff f82a 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	4611      	mov	r1, r2
 8001584:	f06f 0003 	mvn.w	r0, #3
 8001588:	f7ff f824 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	4611      	mov	r1, r2
 8001590:	f06f 0001 	mvn.w	r0, #1
 8001594:	f7ff f81e 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	4611      	mov	r1, r2
 800159c:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80015a4:	f7ff b816 	b.w	80005d4 <HAL_NVIC_SetPriority>

080015a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80015aa:	6803      	ldr	r3, [r0, #0]
 80015ac:	4a22      	ldr	r2, [pc, #136]	; (8001638 <HAL_UART_MspInit+0x90>)
 80015ae:	4293      	cmp	r3, r2
{
 80015b0:	b088      	sub	sp, #32
  if(huart->Instance==USART2)
 80015b2:	d11b      	bne.n	80015ec <HAL_UART_MspInit+0x44>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b4:	2300      	movs	r3, #0
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	4b20      	ldr	r3, [pc, #128]	; (800163c <HAL_UART_MspInit+0x94>)
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	4821      	ldr	r0, [pc, #132]	; (8001640 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80015bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80015c2:	641a      	str	r2, [r3, #64]	; 0x40
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	9301      	str	r3, [sp, #4]
 80015cc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015ce:	230c      	movs	r3, #12
 80015d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015e0:	2307      	movs	r3, #7
 80015e2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f7ff f870 	bl	80006c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80015e8:	b008      	add	sp, #32
 80015ea:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART6)
 80015ec:	4a15      	ldr	r2, [pc, #84]	; (8001644 <HAL_UART_MspInit+0x9c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d1fa      	bne.n	80015e8 <HAL_UART_MspInit+0x40>
    __HAL_RCC_USART6_CLK_ENABLE();
 80015f2:	2400      	movs	r4, #0
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_UART_MspInit+0x94>)
 80015f6:	9402      	str	r4, [sp, #8]
 80015f8:	6c59      	ldr	r1, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fa:	4813      	ldr	r0, [pc, #76]	; (8001648 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART6_CLK_ENABLE();
 80015fc:	f041 0120 	orr.w	r1, r1, #32
 8001600:	6459      	str	r1, [r3, #68]	; 0x44
 8001602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001604:	f003 0320 	and.w	r3, r3, #32
 8001608:	9302      	str	r3, [sp, #8]
 800160a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800160c:	23c0      	movs	r3, #192	; 0xc0
 800160e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001614:	2301      	movs	r3, #1
 8001616:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800161e:	2308      	movs	r3, #8
 8001620:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001622:	f7ff f851 	bl	80006c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001626:	4622      	mov	r2, r4
 8001628:	4621      	mov	r1, r4
 800162a:	2047      	movs	r0, #71	; 0x47
 800162c:	f7fe ffd2 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001630:	2047      	movs	r0, #71	; 0x47
 8001632:	f7ff f803 	bl	800063c <HAL_NVIC_EnableIRQ>
}
 8001636:	e7d7      	b.n	80015e8 <HAL_UART_MspInit+0x40>
 8001638:	40004400 	.word	0x40004400
 800163c:	40023800 	.word	0x40023800
 8001640:	40020000 	.word	0x40020000
 8001644:	40011400 	.word	0x40011400
 8001648:	40020800 	.word	0x40020800

0800164c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800164c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164e:	f7fe ff89 	bl	8000564 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001656:	f7ff b820 	b.w	800069a <HAL_SYSTICK_IRQHandler>
	...

0800165c <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800165c:	4801      	ldr	r0, [pc, #4]	; (8001664 <USART6_IRQHandler+0x8>)
 800165e:	f7ff bd97 	b.w	8001190 <HAL_UART_IRQHandler>
 8001662:	bf00      	nop
 8001664:	2000002c 	.word	0x2000002c

08001668 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001668:	490f      	ldr	r1, [pc, #60]	; (80016a8 <SystemInit+0x40>)
 800166a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800166e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <SystemInit+0x44>)
 8001678:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800167a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800167c:	f042 0201 	orr.w	r2, r2, #1
 8001680:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001682:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800168a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800168e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001690:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <SystemInit+0x48>)
 8001692:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800169a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800169c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800169e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80016a2:	608b      	str	r3, [r1, #8]
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00
 80016ac:	40023800 	.word	0x40023800
 80016b0:	24003010 	.word	0x24003010

080016b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016ba:	e003      	b.n	80016c4 <LoopCopyDataInit>

080016bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016c2:	3104      	adds	r1, #4

080016c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016c4:	480b      	ldr	r0, [pc, #44]	; (80016f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016cc:	d3f6      	bcc.n	80016bc <CopyDataInit>
  ldr  r2, =_sbss
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016d0:	e002      	b.n	80016d8 <LoopFillZerobss>

080016d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016d4:	f842 3b04 	str.w	r3, [r2], #4

080016d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016dc:	d3f9      	bcc.n	80016d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016de:	f7ff ffc3 	bl	8001668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e2:	f000 f811 	bl	8001708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e6:	f7ff fe9f 	bl	8001428 <main>
  bx  lr    
 80016ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80016f0:	08001790 	.word	0x08001790
  ldr  r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016f8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80016fc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001700:	200000ac 	.word	0x200000ac

08001704 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001704:	e7fe      	b.n	8001704 <ADC_IRQHandler>
	...

08001708 <__libc_init_array>:
 8001708:	b570      	push	{r4, r5, r6, lr}
 800170a:	4e0d      	ldr	r6, [pc, #52]	; (8001740 <__libc_init_array+0x38>)
 800170c:	4c0d      	ldr	r4, [pc, #52]	; (8001744 <__libc_init_array+0x3c>)
 800170e:	1ba4      	subs	r4, r4, r6
 8001710:	10a4      	asrs	r4, r4, #2
 8001712:	2500      	movs	r5, #0
 8001714:	42a5      	cmp	r5, r4
 8001716:	d109      	bne.n	800172c <__libc_init_array+0x24>
 8001718:	4e0b      	ldr	r6, [pc, #44]	; (8001748 <__libc_init_array+0x40>)
 800171a:	4c0c      	ldr	r4, [pc, #48]	; (800174c <__libc_init_array+0x44>)
 800171c:	f000 f818 	bl	8001750 <_init>
 8001720:	1ba4      	subs	r4, r4, r6
 8001722:	10a4      	asrs	r4, r4, #2
 8001724:	2500      	movs	r5, #0
 8001726:	42a5      	cmp	r5, r4
 8001728:	d105      	bne.n	8001736 <__libc_init_array+0x2e>
 800172a:	bd70      	pop	{r4, r5, r6, pc}
 800172c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001730:	4798      	blx	r3
 8001732:	3501      	adds	r5, #1
 8001734:	e7ee      	b.n	8001714 <__libc_init_array+0xc>
 8001736:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800173a:	4798      	blx	r3
 800173c:	3501      	adds	r5, #1
 800173e:	e7f2      	b.n	8001726 <__libc_init_array+0x1e>
 8001740:	08001788 	.word	0x08001788
 8001744:	08001788 	.word	0x08001788
 8001748:	08001788 	.word	0x08001788
 800174c:	0800178c 	.word	0x0800178c

08001750 <_init>:
 8001750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001752:	bf00      	nop
 8001754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001756:	bc08      	pop	{r3}
 8001758:	469e      	mov	lr, r3
 800175a:	4770      	bx	lr

0800175c <_fini>:
 800175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175e:	bf00      	nop
 8001760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001762:	bc08      	pop	{r3}
 8001764:	469e      	mov	lr, r3
 8001766:	4770      	bx	lr
