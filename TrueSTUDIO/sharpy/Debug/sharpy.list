
sharpy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b24  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002cbc  08002cbc  00012cbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002cf8  08002cf8  00012cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002cfc  08002cfc  00012cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08002d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          000000f4  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000f8  200000f8  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_line   00004fe9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00010912  00000000  00000000  0002501d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000212b  00000000  00000000  0003592f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006c0  00000000  00000000  00037a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000910  00000000  00000000  00038120  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ad1  00000000  00000000  00038a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000301b  00000000  00000000  0003d501  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004051c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000013bc  00000000  00000000  00040598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002ca4 	.word	0x08002ca4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08002ca4 	.word	0x08002ca4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a12:	e003      	b.n	8000a1c <LoopCopyDataInit>

08000a14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a1a:	3104      	adds	r1, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a1c:	480b      	ldr	r0, [pc, #44]	; (8000a4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a24:	d3f6      	bcc.n	8000a14 <CopyDataInit>
	ldr	r2, =_sbss
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a28:	e002      	b.n	8000a30 <LoopFillZerobss>

08000a2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a2c:	f842 3b04 	str.w	r3, [r2], #4

08000a30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <LoopForever+0x16>)
	cmp	r2, r3
 8000a32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a34:	d3f9      	bcc.n	8000a2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a36:	f000 f9f5 	bl	8000e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f002 f90f 	bl	8002c5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a3e:	f000 f8bf 	bl	8000bc0 <main>

08000a42 <LoopForever>:

LoopForever:
    b LoopForever
 8000a42:	e7fe      	b.n	8000a42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a44:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000a48:	08002d00 	.word	0x08002d00
	ldr	r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a50:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000a54:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000a58:	200000f8 	.word	0x200000f8

08000a5c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC3_IRQHandler>
	...

08000a60 <HAL_ADC_ConvCpltCallback>:
static void MX_ADC1_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


static int i=0; static uint16_t Pomiar;
static  float suma=0,odl;
	Pomiar = HAL_ADC_GetValue(&hadc1);
 8000a62:	4831      	ldr	r0, [pc, #196]	; (8000b28 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000a64:	f000 fca6 	bl	80013b4 <HAL_ADC_GetValue>
 Volty = (5.0*Pomiar)/(4095.0);           // Przeliczenie wartosci zmierzonej na napiecie
 8000a68:	b280      	uxth	r0, r0
 8000a6a:	f7ff fd07 	bl	800047c <__aeabi_i2d>
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <HAL_ADC_ConvCpltCallback+0xcc>)
 8000a72:	f7ff fd69 	bl	8000548 <__aeabi_dmul>
 8000a76:	a324      	add	r3, pc, #144	; (adr r3, 8000b08 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a7c:	f7ff fe8e 	bl	800079c <__aeabi_ddiv>
 8000a80:	f7ff ff74 	bl	800096c <__aeabi_d2f>
 8000a84:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000a86:	6018      	str	r0, [r3, #0]
 odl=9.8887*Volty*Volty - 49.482*Volty + 77.29;   // Obliczenie odleglosci
 8000a88:	f7ff fd0a 	bl	80004a0 <__aeabi_f2d>
 8000a8c:	a320      	add	r3, pc, #128	; (adr r3, 8000b10 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a92:	4604      	mov	r4, r0
 8000a94:	460d      	mov	r5, r1
 8000a96:	f7ff fd57 	bl	8000548 <__aeabi_dmul>
 8000a9a:	4622      	mov	r2, r4
 8000a9c:	462b      	mov	r3, r5
 8000a9e:	f7ff fd53 	bl	8000548 <__aeabi_dmul>
 8000aa2:	a31d      	add	r3, pc, #116	; (adr r3, 8000b18 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aa8:	4606      	mov	r6, r0
 8000aaa:	460f      	mov	r7, r1
 8000aac:	4620      	mov	r0, r4
 8000aae:	4629      	mov	r1, r5
 8000ab0:	f7ff fd4a 	bl	8000548 <__aeabi_dmul>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	4630      	mov	r0, r6
 8000aba:	4639      	mov	r1, r7
 8000abc:	f7ff fb90 	bl	80001e0 <__aeabi_dsub>
 8000ac0:	a317      	add	r3, pc, #92	; (adr r3, 8000b20 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ac6:	f7ff fb8d 	bl	80001e4 <__adddf3>
 8000aca:	f7ff ff4f 	bl	800096c <__aeabi_d2f>
suma = suma + odl;
 8000ace:	4919      	ldr	r1, [pc, #100]	; (8000b34 <HAL_ADC_ConvCpltCallback+0xd4>)

if(i==9){odczyt=suma/10; i=0; suma=0;}   //  liczenie sredniej w celu eliminacji pojedynczych dropow
 8000ad0:	4a19      	ldr	r2, [pc, #100]	; (8000b38 <HAL_ADC_ConvCpltCallback+0xd8>)
suma = suma + odl;
 8000ad2:	edd1 7a00 	vldr	s15, [r1]
if(i==9){odczyt=suma/10; i=0; suma=0;}   //  liczenie sredniej w celu eliminacji pojedynczych dropow
 8000ad6:	6813      	ldr	r3, [r2, #0]
suma = suma + odl;
 8000ad8:	ee07 0a10 	vmov	s14, r0
 8000adc:	ee77 7a27 	vadd.f32	s15, s14, s15
if(i==9){odczyt=suma/10; i=0; suma=0;}   //  liczenie sredniej w celu eliminacji pojedynczych dropow
 8000ae0:	2b09      	cmp	r3, #9
suma = suma + odl;
 8000ae2:	edc1 7a00 	vstr	s15, [r1]
if(i==9){odczyt=suma/10; i=0; suma=0;}   //  liczenie sredniej w celu eliminacji pojedynczych dropow
 8000ae6:	d10b      	bne.n	8000b00 <HAL_ADC_ConvCpltCallback+0xa0>
 8000ae8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000aec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_ADC_ConvCpltCallback+0xdc>)
 8000af2:	ed83 7a00 	vstr	s14, [r3]
 8000af6:	2300      	movs	r3, #0
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	2300      	movs	r3, #0
 8000afc:	600b      	str	r3, [r1, #0]
 8000afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
else i++;
 8000b00:	3301      	adds	r3, #1
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b06:	bf00      	nop
 8000b08:	00000000 	.word	0x00000000
 8000b0c:	40affe00 	.word	0x40affe00
 8000b10:	afb7e910 	.word	0xafb7e910
 8000b14:	4023c703 	.word	0x4023c703
 8000b18:	2d0e5604 	.word	0x2d0e5604
 8000b1c:	4048bdb2 	.word	0x4048bdb2
 8000b20:	5c28f5c3 	.word	0x5c28f5c3
 8000b24:	4053528f 	.word	0x4053528f
 8000b28:	20000028 	.word	0x20000028
 8000b2c:	40140000 	.word	0x40140000
 8000b30:	2000007c 	.word	0x2000007c
 8000b34:	20000024 	.word	0x20000024
 8000b38:	20000020 	.word	0x20000020
 8000b3c:	20000080 	.word	0x20000080

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b510      	push	{r4, lr}
 8000b42:	b0a6      	sub	sp, #152	; 0x98
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b44:	2301      	movs	r3, #1
 8000b46:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000b48:	2310      	movs	r3, #16
 8000b4a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b50:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b52:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b56:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b58:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000b5c:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b5e:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b60:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000b62:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b64:	f001 f9a2 	bl	8001eac <HAL_RCC_OscConfig>
 8000b68:	b100      	cbz	r0, 8000b6c <SystemClock_Config+0x2c>
 8000b6a:	e7fe      	b.n	8000b6a <SystemClock_Config+0x2a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b70:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b76:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b78:	4621      	mov	r1, r4
 8000b7a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b7e:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b80:	f001 fc3e 	bl	8002400 <HAL_RCC_ClockConfig>
 8000b84:	b100      	cbz	r0, 8000b88 <SystemClock_Config+0x48>
 8000b86:	e7fe      	b.n	8000b86 <SystemClock_Config+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b88:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b8a:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b8c:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b8e:	f001 fd2f 	bl	80025f0 <HAL_RCCEx_PeriphCLKConfig>
 8000b92:	4604      	mov	r4, r0
 8000b94:	b100      	cbz	r0, 8000b98 <SystemClock_Config+0x58>
 8000b96:	e7fe      	b.n	8000b96 <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000b98:	f001 fcf4 	bl	8002584 <HAL_RCC_GetHCLKFreq>
 8000b9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ba4:	f001 f884 	bl	8001cb0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000ba8:	2004      	movs	r0, #4
 8000baa:	f001 f897 	bl	8001cdc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000bae:	4622      	mov	r2, r4
 8000bb0:	4621      	mov	r1, r4
 8000bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb6:	f001 f83b 	bl	8001c30 <HAL_NVIC_SetPriority>
}
 8000bba:	b026      	add	sp, #152	; 0x98
 8000bbc:	bd10      	pop	{r4, pc}
	...

08000bc0 <main>:
{
 8000bc0:	b500      	push	{lr}
 8000bc2:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8000bc4:	f000 f976 	bl	8000eb4 <HAL_Init>
  SystemClock_Config();
 8000bc8:	f7ff ffba 	bl	8000b40 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bcc:	4b43      	ldr	r3, [pc, #268]	; (8000cdc <main+0x11c>)
 8000bce:	695a      	ldr	r2, [r3, #20]
 8000bd0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000bd4:	615a      	str	r2, [r3, #20]
 8000bd6:	695a      	ldr	r2, [r3, #20]
 8000bd8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000bdc:	9201      	str	r2, [sp, #4]
 8000bde:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000be0:	695a      	ldr	r2, [r3, #20]
 8000be2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000be6:	615a      	str	r2, [r3, #20]
 8000be8:	695a      	ldr	r2, [r3, #20]
 8000bea:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000bee:	9202      	str	r2, [sp, #8]
 8000bf0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	695a      	ldr	r2, [r3, #20]
 8000bf4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000bf8:	615a      	str	r2, [r3, #20]
 8000bfa:	695a      	ldr	r2, [r3, #20]
 8000bfc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000c00:	9203      	str	r2, [sp, #12]
 8000c02:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c04:	695a      	ldr	r2, [r3, #20]
 8000c06:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000c0a:	615a      	str	r2, [r3, #20]
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c16:	2120      	movs	r1, #32
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c1e:	f001 f93f 	bl	8001ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8000c28:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <main+0x120>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	482d      	ldr	r0, [pc, #180]	; (8000ce4 <main+0x124>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c30:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f001 f864 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c38:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	eb0d 0103 	add.w	r1, sp, r3
 8000c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c44:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f001 f858 	bl	8001d00 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8000c50:	4825      	ldr	r0, [pc, #148]	; (8000ce8 <main+0x128>)
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8000c52:	4926      	ldr	r1, [pc, #152]	; (8000cec <main+0x12c>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c54:	60c4      	str	r4, [r0, #12]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8000c56:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000c5a:	f04f 5e80 	mov.w	lr, #268435456	; 0x10000000
 8000c5e:	e880 400a 	stmia.w	r0, {r1, r3, lr}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c62:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c64:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c66:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c68:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6a:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6c:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6e:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c70:	f001 ffc1 	bl	8002bf6 <HAL_UART_Init>
 8000c74:	b100      	cbz	r0, 8000c78 <main+0xb8>
 8000c76:	e7fe      	b.n	8000c76 <main+0xb6>
  hadc1.Instance = ADC1;
 8000c78:	4c1d      	ldr	r4, [pc, #116]	; (8000cf0 <main+0x130>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c7a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000c7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c82:	e884 000c 	stmia.w	r4, {r2, r3}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c86:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c88:	6120      	str	r0, [r4, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c8a:	6260      	str	r0, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c8c:	6320      	str	r0, [r4, #48]	; 0x30
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c8e:	60e0      	str	r0, [r4, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c90:	6360      	str	r0, [r4, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c92:	2304      	movs	r3, #4
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c94:	61a0      	str	r0, [r4, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c96:	63a0      	str	r0, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c98:	4620      	mov	r0, r4
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c9a:	61e5      	str	r5, [r4, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c9c:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 8000c9e:	6225      	str	r5, [r4, #32]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca0:	6163      	str	r3, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ca2:	f000 f98f 	bl	8000fc4 <HAL_ADC_Init>
 8000ca6:	b100      	cbz	r0, 8000caa <main+0xea>
 8000ca8:	e7fe      	b.n	8000ca8 <main+0xe8>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000caa:	a90e      	add	r1, sp, #56	; 0x38
 8000cac:	f841 0d24 	str.w	r0, [r1, #-36]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	f000 ff1b 	bl	8001aec <HAL_ADCEx_MultiModeConfigChannel>
 8000cb6:	b100      	cbz	r0, 8000cba <main+0xfa>
 8000cb8:	e7fe      	b.n	8000cb8 <main+0xf8>
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cba:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000cbc:	2307      	movs	r3, #7
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cbe:	900c      	str	r0, [sp, #48]	; 0x30
  sConfig.Offset = 0;
 8000cc0:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc2:	a908      	add	r1, sp, #32
 8000cc4:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8000cc6:	9508      	str	r5, [sp, #32]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cc8:	9509      	str	r5, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000cca:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ccc:	f000 fd76 	bl	80017bc <HAL_ADC_ConfigChannel>
 8000cd0:	b100      	cbz	r0, 8000cd4 <main+0x114>
 8000cd2:	e7fe      	b.n	8000cd2 <main+0x112>
  HAL_ADC_Start_IT(&hadc1);
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f000 faa9 	bl	800122c <HAL_ADC_Start_IT>
 8000cda:	e7fe      	b.n	8000cda <main+0x11a>
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	10210000 	.word	0x10210000
 8000ce4:	48000800 	.word	0x48000800
 8000ce8:	20000084 	.word	0x20000084
 8000cec:	40004400 	.word	0x40004400
 8000cf0:	20000028 	.word	0x20000028

08000cf4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <HAL_MspInit+0x78>)
{
 8000cf6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf8:	699a      	ldr	r2, [r3, #24]
 8000cfa:	f042 0201 	orr.w	r2, r2, #1
 8000cfe:	619a      	str	r2, [r3, #24]
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d08:	2007      	movs	r0, #7
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d0c:	f000 ff7e 	bl	8001c0c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	4611      	mov	r1, r2
 8000d14:	f06f 000b 	mvn.w	r0, #11
 8000d18:	f000 ff8a 	bl	8001c30 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4611      	mov	r1, r2
 8000d20:	f06f 000a 	mvn.w	r0, #10
 8000d24:	f000 ff84 	bl	8001c30 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	f06f 0009 	mvn.w	r0, #9
 8000d30:	f000 ff7e 	bl	8001c30 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	4611      	mov	r1, r2
 8000d38:	f06f 0004 	mvn.w	r0, #4
 8000d3c:	f000 ff78 	bl	8001c30 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	4611      	mov	r1, r2
 8000d44:	f06f 0003 	mvn.w	r0, #3
 8000d48:	f000 ff72 	bl	8001c30 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4611      	mov	r1, r2
 8000d50:	f06f 0001 	mvn.w	r0, #1
 8000d54:	f000 ff6c 	bl	8001c30 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	f000 ff66 	bl	8001c30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d64:	b003      	add	sp, #12
 8000d66:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000

08000d70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d70:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8000d72:	6803      	ldr	r3, [r0, #0]
 8000d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8000d78:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 8000d7a:	d11e      	bne.n	8000dba <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d7c:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8000d80:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2400      	movs	r4, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d86:	695a      	ldr	r2, [r3, #20]
 8000d88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d8c:	615a      	str	r2, [r3, #20]
 8000d8e:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	9403      	str	r4, [sp, #12]
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d9c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000da2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f000 ffab 	bl	8001d00 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000daa:	2012      	movs	r0, #18
 8000dac:	4622      	mov	r2, r4
 8000dae:	4621      	mov	r1, r4
 8000db0:	f000 ff3e 	bl	8001c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000db4:	2012      	movs	r0, #18
 8000db6:	f000 ff6f 	bl	8001c98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dba:	b006      	add	sp, #24
 8000dbc:	bd10      	pop	{r4, pc}
	...

08000dc0 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8000dc2:	6802      	ldr	r2, [r0, #0]
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <HAL_UART_MspInit+0x44>)
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d118      	bne.n	8000dfc <HAL_UART_MspInit+0x3c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dca:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd0:	69da      	ldr	r2, [r3, #28]
 8000dd2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000dd6:	61da      	str	r2, [r3, #28]
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000de2:	230c      	movs	r3, #12
 8000de4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df4:	2307      	movs	r3, #7
 8000df6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f000 ff82 	bl	8001d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dfc:	b007      	add	sp, #28
 8000dfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e02:	bf00      	nop
 8000e04:	40004400 	.word	0x40004400

08000e08 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000e08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0a:	f000 f865 	bl	8000ed8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000e12:	f000 bf70 	b.w	8001cf6 <HAL_SYSTICK_IRQHandler>
	...

08000e18 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e18:	4801      	ldr	r0, [pc, #4]	; (8000e20 <ADC1_2_IRQHandler+0x8>)
 8000e1a:	f000 bad3 	b.w	80013c4 <HAL_ADC_IRQHandler>
 8000e1e:	bf00      	nop
 8000e20:	20000028 	.word	0x20000028

08000e24 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e24:	4915      	ldr	r1, [pc, #84]	; (8000e7c <SystemInit+0x58>)
 8000e26:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000e2a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <SystemInit+0x5c>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	f042 0201 	orr.w	r2, r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000e3c:	6858      	ldr	r0, [r3, #4]
 8000e3e:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <SystemInit+0x60>)
 8000e40:	4002      	ands	r2, r0
 8000e42:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000e4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e4e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e56:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000e5e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e62:	f022 020f 	bic.w	r2, r2, #15
 8000e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000e68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000e6a:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <SystemInit+0x64>)
 8000e6c:	4002      	ands	r2, r0
 8000e6e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e78:	608b      	str	r3, [r1, #8]
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00
 8000e80:	40021000 	.word	0x40021000
 8000e84:	f87fc00c 	.word	0xf87fc00c
 8000e88:	ff00fccc 	.word	0xff00fccc

08000e8c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_InitTick+0x24>)
{
 8000e90:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000e92:	6818      	ldr	r0, [r3, #0]
 8000e94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e98:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e9c:	f000 ff08 	bl	8001cb0 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	4621      	mov	r1, r4
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f000 fec2 	bl	8001c30 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000eac:	2000      	movs	r0, #0
 8000eae:	bd10      	pop	{r4, pc}
 8000eb0:	20000000 	.word	0x20000000

08000eb4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_Init+0x20>)
{
 8000eb6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	6813      	ldr	r3, [r2, #0]
 8000eba:	f043 0310 	orr.w	r3, r3, #16
 8000ebe:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 fea3 	bl	8001c0c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff ffe0 	bl	8000e8c <HAL_InitTick>
  HAL_MspInit();
 8000ecc:	f7ff ff12 	bl	8000cf4 <HAL_MspInit>
}
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	bd08      	pop	{r3, pc}
 8000ed4:	40022000 	.word	0x40022000

08000ed8 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000ed8:	4a02      	ldr	r2, [pc, #8]	; (8000ee4 <HAL_IncTick+0xc>)
 8000eda:	6813      	ldr	r3, [r2, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	200000f4 	.word	0x200000f4

08000ee8 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000ee8:	4b01      	ldr	r3, [pc, #4]	; (8000ef0 <HAL_GetTick+0x8>)
 8000eea:	6818      	ldr	r0, [r3, #0]
}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	200000f4 	.word	0x200000f4

08000ef4 <HAL_ADC_LevelOutOfWindowCallback>:
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ef6:	4770      	bx	lr

08000ef8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000ef8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000efa:	6803      	ldr	r3, [r0, #0]
{
 8000efc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000efe:	6898      	ldr	r0, [r3, #8]
 8000f00:	f000 0003 	and.w	r0, r0, #3
 8000f04:	2801      	cmp	r0, #1
 8000f06:	d001      	beq.n	8000f0c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f08:	2000      	movs	r0, #0
 8000f0a:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	07d2      	lsls	r2, r2, #31
 8000f10:	d5fa      	bpl.n	8000f08 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	f002 020d 	and.w	r2, r2, #13
 8000f18:	2a01      	cmp	r2, #1
 8000f1a:	d11b      	bne.n	8000f54 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	f042 0202 	orr.w	r2, r2, #2
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	2203      	movs	r2, #3
 8000f26:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000f28:	f7ff ffde 	bl	8000ee8 <HAL_GetTick>
 8000f2c:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000f2e:	6823      	ldr	r3, [r4, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	07db      	lsls	r3, r3, #31
 8000f34:	d5e8      	bpl.n	8000f08 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f36:	f7ff ffd7 	bl	8000ee8 <HAL_GetTick>
 8000f3a:	1b40      	subs	r0, r0, r5
 8000f3c:	2802      	cmp	r0, #2
 8000f3e:	d9f6      	bls.n	8000f2e <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f42:	f043 0310 	orr.w	r3, r3, #16
 8000f46:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000f50:	2001      	movs	r0, #1
 8000f52:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f56:	f043 0310 	orr.w	r3, r3, #16
 8000f5a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000f64:	bd38      	pop	{r3, r4, r5, pc}
	...

08000f68 <ADC_Enable>:
{
 8000f68:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f6a:	6803      	ldr	r3, [r0, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	f002 0203 	and.w	r2, r2, #3
 8000f72:	2a01      	cmp	r2, #1
{
 8000f74:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f76:	d104      	bne.n	8000f82 <ADC_Enable+0x1a>
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	07d2      	lsls	r2, r2, #31
 8000f7c:	d501      	bpl.n	8000f82 <ADC_Enable+0x1a>
  return HAL_OK;
 8000f7e:	2000      	movs	r0, #0
 8000f80:	bd38      	pop	{r3, r4, r5, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000f82:	6899      	ldr	r1, [r3, #8]
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <ADC_Enable+0x58>)
 8000f86:	4211      	tst	r1, r2
 8000f88:	d10f      	bne.n	8000faa <ADC_Enable+0x42>
    __HAL_ADC_ENABLE(hadc);
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	f042 0201 	orr.w	r2, r2, #1
 8000f90:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8000f92:	f7ff ffa9 	bl	8000ee8 <HAL_GetTick>
 8000f96:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	07db      	lsls	r3, r3, #31
 8000f9e:	d4ee      	bmi.n	8000f7e <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000fa0:	f7ff ffa2 	bl	8000ee8 <HAL_GetTick>
 8000fa4:	1b40      	subs	r0, r0, r5
 8000fa6:	2802      	cmp	r0, #2
 8000fa8:	d9f6      	bls.n	8000f98 <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000faa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fac:	f043 0310 	orr.w	r3, r3, #16
 8000fb0:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000fba:	2001      	movs	r0, #1
 8000fbc:	bd38      	pop	{r3, r4, r5, pc}
 8000fbe:	bf00      	nop
 8000fc0:	8000003f 	.word	0x8000003f

08000fc4 <HAL_ADC_Init>:
{
 8000fc4:	b570      	push	{r4, r5, r6, lr}
 8000fc6:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000fcc:	4604      	mov	r4, r0
 8000fce:	2800      	cmp	r0, #0
 8000fd0:	f000 8091 	beq.w	80010f6 <HAL_ADC_Init+0x132>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000fd6:	06d2      	lsls	r2, r2, #27
 8000fd8:	d463      	bmi.n	80010a2 <HAL_ADC_Init+0xde>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000fda:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d02e      	beq.n	800103e <HAL_ADC_Init+0x7a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe0:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	00d1      	lsls	r1, r2, #3
 8000fe8:	d502      	bpl.n	8000ff0 <HAL_ADC_Init+0x2c>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000fea:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000fec:	009a      	lsls	r2, r3, #2
 8000fee:	d50a      	bpl.n	8001006 <HAL_ADC_Init+0x42>
      ADC_STATE_CLR_SET(hadc->State,
 8000ff0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ff2:	f023 0312 	bic.w	r3, r3, #18
 8000ff6:	f043 0310 	orr.w	r3, r3, #16
 8000ffa:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ffc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8001004:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001006:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001008:	06db      	lsls	r3, r3, #27
 800100a:	d46e      	bmi.n	80010ea <HAL_ADC_Init+0x126>
 800100c:	2800      	cmp	r0, #0
 800100e:	d16c      	bne.n	80010ea <HAL_ADC_Init+0x126>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	689d      	ldr	r5, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8001014:	f015 0504 	ands.w	r5, r5, #4
 8001018:	d167      	bne.n	80010ea <HAL_ADC_Init+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 800101a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800101c:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8001020:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8001028:	6462      	str	r2, [r4, #68]	; 0x44
 800102a:	4a78      	ldr	r2, [pc, #480]	; (800120c <HAL_ADC_Init+0x248>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800102c:	d065      	beq.n	80010fa <HAL_ADC_Init+0x136>
 800102e:	4293      	cmp	r3, r2
 8001030:	d166      	bne.n	8001100 <HAL_ADC_Init+0x13c>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001032:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001036:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001038:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800103c:	e066      	b.n	800110c <HAL_ADC_Init+0x148>
      ADC_CLEAR_ERRORCODE(hadc);
 800103e:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8001040:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8001042:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8001044:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8001048:	f7ff fe92 	bl	8000d70 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	00de      	lsls	r6, r3, #3
 8001052:	d4c5      	bmi.n	8000fe0 <HAL_ADC_Init+0x1c>
        tmp_hal_status = ADC_Disable(hadc);
 8001054:	4620      	mov	r0, r4
 8001056:	f7ff ff4f 	bl	8000ef8 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800105a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800105c:	06d5      	lsls	r5, r2, #27
 800105e:	d4c0      	bmi.n	8000fe2 <HAL_ADC_Init+0x1e>
 8001060:	2800      	cmp	r0, #0
 8001062:	d1be      	bne.n	8000fe2 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8001064:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001066:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800106a:	f023 0302 	bic.w	r3, r3, #2
 800106e:	f043 0302 	orr.w	r3, r3, #2
 8001072:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800107c:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001084:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001086:	4b62      	ldr	r3, [pc, #392]	; (8001210 <HAL_ADC_Init+0x24c>)
 8001088:	4a62      	ldr	r2, [pc, #392]	; (8001214 <HAL_ADC_Init+0x250>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001090:	230a      	movs	r3, #10
 8001092:	4353      	muls	r3, r2
            wait_loop_index--;
 8001094:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8001096:	9b00      	ldr	r3, [sp, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0a1      	beq.n	8000fe0 <HAL_ADC_Init+0x1c>
            wait_loop_index--;
 800109c:	9b00      	ldr	r3, [sp, #0]
 800109e:	3b01      	subs	r3, #1
 80010a0:	e7f8      	b.n	8001094 <HAL_ADC_Init+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a2:	4618      	mov	r0, r3
 80010a4:	e7af      	b.n	8001006 <HAL_ADC_Init+0x42>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010a6:	4293      	cmp	r3, r2
 80010a8:	bf0c      	ite	eq
 80010aa:	9101      	streq	r1, [sp, #4]
 80010ac:	9001      	strne	r0, [sp, #4]
 80010ae:	e02c      	b.n	800110a <HAL_ADC_Init+0x146>
        ADC_STATE_CLR_SET(hadc->State,
 80010b0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80010b2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80010b6:	f042 0220 	orr.w	r2, r2, #32
 80010ba:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010bc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80010be:	f042 0201 	orr.w	r2, r2, #1
 80010c2:	64a2      	str	r2, [r4, #72]	; 0x48
 80010c4:	e052      	b.n	800116c <HAL_ADC_Init+0x1a8>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80010c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010ca:	e06d      	b.n	80011a8 <HAL_ADC_Init+0x1e4>
 80010cc:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80010d0:	e06a      	b.n	80011a8 <HAL_ADC_Init+0x1e4>
 80010d2:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 80010d6:	e067      	b.n	80011a8 <HAL_ADC_Init+0x1e4>
 80010d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010dc:	e064      	b.n	80011a8 <HAL_ADC_Init+0x1e4>
 80010de:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80010e2:	e061      	b.n	80011a8 <HAL_ADC_Init+0x1e4>
 80010e4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80010e8:	e05e      	b.n	80011a8 <HAL_ADC_Init+0x1e4>
    ADC_STATE_CLR_SET(hadc->State,
 80010ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010ec:	f023 0312 	bic.w	r3, r3, #18
 80010f0:	f043 0310 	orr.w	r3, r3, #16
 80010f4:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 80010f6:	2001      	movs	r0, #1
 80010f8:	e085      	b.n	8001206 <HAL_ADC_Init+0x242>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010fa:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010fc:	4a46      	ldr	r2, [pc, #280]	; (8001218 <HAL_ADC_Init+0x254>)
 80010fe:	e005      	b.n	800110c <HAL_ADC_Init+0x148>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001100:	4946      	ldr	r1, [pc, #280]	; (800121c <HAL_ADC_Init+0x258>)
 8001102:	4a47      	ldr	r2, [pc, #284]	; (8001220 <HAL_ADC_Init+0x25c>)
 8001104:	428b      	cmp	r3, r1
 8001106:	d1ce      	bne.n	80010a6 <HAL_ADC_Init+0xe2>
 8001108:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800110a:	4a46      	ldr	r2, [pc, #280]	; (8001224 <HAL_ADC_Init+0x260>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800110c:	6899      	ldr	r1, [r3, #8]
 800110e:	f001 0103 	and.w	r1, r1, #3
 8001112:	2901      	cmp	r1, #1
 8001114:	d102      	bne.n	800111c <HAL_ADC_Init+0x158>
 8001116:	6819      	ldr	r1, [r3, #0]
 8001118:	07ce      	lsls	r6, r1, #31
 800111a:	d40f      	bmi.n	800113c <HAL_ADC_Init+0x178>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800111c:	9901      	ldr	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800111e:	b139      	cbz	r1, 8001130 <HAL_ADC_Init+0x16c>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001120:	688e      	ldr	r6, [r1, #8]
 8001122:	f006 0603 	and.w	r6, r6, #3
 8001126:	2e01      	cmp	r6, #1
 8001128:	d102      	bne.n	8001130 <HAL_ADC_Init+0x16c>
 800112a:	6809      	ldr	r1, [r1, #0]
 800112c:	07c9      	lsls	r1, r1, #31
 800112e:	d405      	bmi.n	800113c <HAL_ADC_Init+0x178>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001130:	6891      	ldr	r1, [r2, #8]
 8001132:	6866      	ldr	r6, [r4, #4]
 8001134:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8001138:	4331      	orrs	r1, r6
 800113a:	6091      	str	r1, [r2, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800113c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800113e:	68a6      	ldr	r6, [r4, #8]
 8001140:	69e2      	ldr	r2, [r4, #28]
 8001142:	2901      	cmp	r1, #1
 8001144:	68e1      	ldr	r1, [r4, #12]
 8001146:	ea41 0106 	orr.w	r1, r1, r6
 800114a:	bf18      	it	ne
 800114c:	f44f 5580 	movne.w	r5, #4096	; 0x1000
 8001150:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
 8001154:	4329      	orrs	r1, r5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001156:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001158:	2d01      	cmp	r5, #1
 800115a:	d107      	bne.n	800116c <HAL_ADC_Init+0x1a8>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800115c:	2a00      	cmp	r2, #0
 800115e:	d1a7      	bne.n	80010b0 <HAL_ADC_Init+0xec>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001160:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001162:	3a01      	subs	r2, #1
 8001164:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
 8001168:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800116c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800116e:	2a01      	cmp	r2, #1
 8001170:	d01d      	beq.n	80011ae <HAL_ADC_Init+0x1ea>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001172:	4d2a      	ldr	r5, [pc, #168]	; (800121c <HAL_ADC_Init+0x258>)
 8001174:	42ab      	cmp	r3, r5
 8001176:	d003      	beq.n	8001180 <HAL_ADC_Init+0x1bc>
 8001178:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800117c:	42ab      	cmp	r3, r5
 800117e:	d1a2      	bne.n	80010c6 <HAL_ADC_Init+0x102>
 8001180:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 8001184:	d0a2      	beq.n	80010cc <HAL_ADC_Init+0x108>
 8001186:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800118a:	d0a2      	beq.n	80010d2 <HAL_ADC_Init+0x10e>
 800118c:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 8001190:	d0a2      	beq.n	80010d8 <HAL_ADC_Init+0x114>
 8001192:	f5b2 5f8a 	cmp.w	r2, #4416	; 0x1140
 8001196:	d0a2      	beq.n	80010de <HAL_ADC_Init+0x11a>
 8001198:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 800119c:	d0a2      	beq.n	80010e4 <HAL_ADC_Init+0x120>
 800119e:	f5b2 5f86 	cmp.w	r2, #4288	; 0x10c0
 80011a2:	bf08      	it	eq
 80011a4:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 80011a8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80011aa:	4329      	orrs	r1, r5
 80011ac:	4311      	orrs	r1, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	f012 0f0c 	tst.w	r2, #12
 80011b4:	d10b      	bne.n	80011ce <HAL_ADC_Init+0x20a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80011b6:	68da      	ldr	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80011b8:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80011ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011be:	f022 0202 	bic.w	r2, r2, #2
 80011c2:	60da      	str	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80011c4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80011c6:	0052      	lsls	r2, r2, #1
 80011c8:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 80011cc:	4311      	orrs	r1, r2
    MODIFY_REG(hadc->Instance->CFGR,
 80011ce:	68dd      	ldr	r5, [r3, #12]
 80011d0:	4a15      	ldr	r2, [pc, #84]	; (8001228 <HAL_ADC_Init+0x264>)
 80011d2:	402a      	ands	r2, r5
 80011d4:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011d6:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 80011d8:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011da:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80011dc:	bf05      	ittet	eq
 80011de:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 80011e0:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011e2:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80011e4:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80011e8:	bf06      	itte	eq
 80011ea:	f021 010f 	biceq.w	r1, r1, #15
 80011ee:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011f0:	f022 020f 	bicne.w	r2, r2, #15
 80011f4:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80011f6:	2300      	movs	r3, #0
 80011f8:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 80011fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011fc:	f023 0303 	bic.w	r3, r3, #3
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6463      	str	r3, [r4, #68]	; 0x44
}
 8001206:	b016      	add	sp, #88	; 0x58
 8001208:	bd70      	pop	{r4, r5, r6, pc}
 800120a:	bf00      	nop
 800120c:	50000100 	.word	0x50000100
 8001210:	20000000 	.word	0x20000000
 8001214:	000f4240 	.word	0x000f4240
 8001218:	50000300 	.word	0x50000300
 800121c:	50000400 	.word	0x50000400
 8001220:	50000500 	.word	0x50000500
 8001224:	50000700 	.word	0x50000700
 8001228:	fff0c007 	.word	0xfff0c007

0800122c <HAL_ADC_Start_IT>:
{
 800122c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800122e:	6803      	ldr	r3, [r0, #0]
 8001230:	689d      	ldr	r5, [r3, #8]
 8001232:	f015 0504 	ands.w	r5, r5, #4
{
 8001236:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001238:	f040 80b1 	bne.w	800139e <HAL_ADC_Start_IT+0x172>
    __HAL_LOCK(hadc);
 800123c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001240:	2b01      	cmp	r3, #1
 8001242:	f000 80ac 	beq.w	800139e <HAL_ADC_Start_IT+0x172>
 8001246:	2301      	movs	r3, #1
 8001248:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 800124c:	f7ff fe8c 	bl	8000f68 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001250:	2800      	cmp	r0, #0
 8001252:	f040 80a1 	bne.w	8001398 <HAL_ADC_Start_IT+0x16c>
      ADC_STATE_CLR_SET(hadc->State,
 8001256:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001258:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001264:	6463      	str	r3, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001266:	6823      	ldr	r3, [r4, #0]
 8001268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800126c:	d002      	beq.n	8001274 <HAL_ADC_Start_IT+0x48>
 800126e:	4a4d      	ldr	r2, [pc, #308]	; (80013a4 <HAL_ADC_Start_IT+0x178>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d117      	bne.n	80012a4 <HAL_ADC_Start_IT+0x78>
 8001274:	4a4c      	ldr	r2, [pc, #304]	; (80013a8 <HAL_ADC_Start_IT+0x17c>)
 8001276:	6892      	ldr	r2, [r2, #8]
 8001278:	06d1      	lsls	r1, r2, #27
 800127a:	d005      	beq.n	8001288 <HAL_ADC_Start_IT+0x5c>
 800127c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001280:	d002      	beq.n	8001288 <HAL_ADC_Start_IT+0x5c>
 8001282:	4a4a      	ldr	r2, [pc, #296]	; (80013ac <HAL_ADC_Start_IT+0x180>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d11a      	bne.n	80012be <HAL_ADC_Start_IT+0x92>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001288:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800128a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800128e:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	0195      	lsls	r5, r2, #6
 8001294:	d521      	bpl.n	80012da <HAL_ADC_Start_IT+0xae>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001296:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001298:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800129c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012a0:	6462      	str	r2, [r4, #68]	; 0x44
 80012a2:	e01a      	b.n	80012da <HAL_ADC_Start_IT+0xae>
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012a4:	4a42      	ldr	r2, [pc, #264]	; (80013b0 <HAL_ADC_Start_IT+0x184>)
 80012a6:	6892      	ldr	r2, [r2, #8]
 80012a8:	06d2      	lsls	r2, r2, #27
 80012aa:	d0ed      	beq.n	8001288 <HAL_ADC_Start_IT+0x5c>
 80012ac:	4a3f      	ldr	r2, [pc, #252]	; (80013ac <HAL_ADC_Start_IT+0x180>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d0ea      	beq.n	8001288 <HAL_ADC_Start_IT+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012b2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80012b4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80012b8:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012ba:	4a3c      	ldr	r2, [pc, #240]	; (80013ac <HAL_ADC_Start_IT+0x180>)
 80012bc:	e008      	b.n	80012d0 <HAL_ADC_Start_IT+0xa4>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012be:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80012c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80012c4:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012c6:	4a37      	ldr	r2, [pc, #220]	; (80013a4 <HAL_ADC_Start_IT+0x178>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d1f6      	bne.n	80012ba <HAL_ADC_Start_IT+0x8e>
 80012cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012d0:	68d2      	ldr	r2, [r2, #12]
 80012d2:	f3c2 6240 	ubfx	r2, r2, #25, #1
 80012d6:	2a00      	cmp	r2, #0
 80012d8:	d1dd      	bne.n	8001296 <HAL_ADC_Start_IT+0x6a>
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012da:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80012dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012e0:	bf1c      	itt	ne
 80012e2:	6ca2      	ldrne	r2, [r4, #72]	; 0x48
 80012e4:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80012e8:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012f0:	221c      	movs	r2, #28
 80012f2:	601a      	str	r2, [r3, #0]
      switch(hadc->Init.EOCSelection)
 80012f4:	6962      	ldr	r2, [r4, #20]
 80012f6:	2a08      	cmp	r2, #8
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	bf03      	ittte	eq
 80012fc:	f022 0204 	biceq.w	r2, r2, #4
 8001300:	605a      	streq	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001302:	685a      	ldreq	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8001304:	f042 020c 	orrne.w	r2, r2, #12
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001308:	bf08      	it	eq
 800130a:	f042 0208 	orreq.w	r2, r2, #8
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800130e:	605a      	str	r2, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001310:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001312:	2a01      	cmp	r2, #1
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001314:	bf02      	ittt	eq
 8001316:	685a      	ldreq	r2, [r3, #4]
 8001318:	f022 0210 	biceq.w	r2, r2, #16
 800131c:	605a      	streq	r2, [r3, #4]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800131e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001322:	d002      	beq.n	800132a <HAL_ADC_Start_IT+0xfe>
 8001324:	4a1f      	ldr	r2, [pc, #124]	; (80013a4 <HAL_ADC_Start_IT+0x178>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d108      	bne.n	800133c <HAL_ADC_Start_IT+0x110>
 800132a:	4a1f      	ldr	r2, [pc, #124]	; (80013a8 <HAL_ADC_Start_IT+0x17c>)
 800132c:	6891      	ldr	r1, [r2, #8]
 800132e:	06c9      	lsls	r1, r1, #27
 8001330:	d118      	bne.n	8001364 <HAL_ADC_Start_IT+0x138>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	f042 0204 	orr.w	r2, r2, #4
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800133c:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <HAL_ADC_Start_IT+0x184>)
 800133e:	6892      	ldr	r2, [r2, #8]
 8001340:	06d2      	lsls	r2, r2, #27
 8001342:	d0f6      	beq.n	8001332 <HAL_ADC_Start_IT+0x106>
 8001344:	4a1a      	ldr	r2, [pc, #104]	; (80013b0 <HAL_ADC_Start_IT+0x184>)
 8001346:	6892      	ldr	r2, [r2, #8]
 8001348:	f002 021f 	and.w	r2, r2, #31
 800134c:	2a05      	cmp	r2, #5
 800134e:	d0f0      	beq.n	8001332 <HAL_ADC_Start_IT+0x106>
 8001350:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_ADC_Start_IT+0x184>)
 8001352:	6892      	ldr	r2, [r2, #8]
 8001354:	f002 021f 	and.w	r2, r2, #31
 8001358:	2a09      	cmp	r2, #9
 800135a:	d0ea      	beq.n	8001332 <HAL_ADC_Start_IT+0x106>
 800135c:	4a13      	ldr	r2, [pc, #76]	; (80013ac <HAL_ADC_Start_IT+0x180>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d0e7      	beq.n	8001332 <HAL_ADC_Start_IT+0x106>
}
 8001362:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001368:	d002      	beq.n	8001370 <HAL_ADC_Start_IT+0x144>
 800136a:	490e      	ldr	r1, [pc, #56]	; (80013a4 <HAL_ADC_Start_IT+0x178>)
 800136c:	428b      	cmp	r3, r1
 800136e:	d1e9      	bne.n	8001344 <HAL_ADC_Start_IT+0x118>
 8001370:	6892      	ldr	r2, [r2, #8]
 8001372:	f002 021f 	and.w	r2, r2, #31
 8001376:	2a05      	cmp	r2, #5
 8001378:	d0db      	beq.n	8001332 <HAL_ADC_Start_IT+0x106>
 800137a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800137e:	d002      	beq.n	8001386 <HAL_ADC_Start_IT+0x15a>
 8001380:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_ADC_Start_IT+0x178>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d1e4      	bne.n	8001350 <HAL_ADC_Start_IT+0x124>
 8001386:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <HAL_ADC_Start_IT+0x17c>)
 8001388:	6892      	ldr	r2, [r2, #8]
 800138a:	f002 021f 	and.w	r2, r2, #31
 800138e:	2a09      	cmp	r2, #9
 8001390:	d0cf      	beq.n	8001332 <HAL_ADC_Start_IT+0x106>
 8001392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001396:	e7e0      	b.n	800135a <HAL_ADC_Start_IT+0x12e>
      __HAL_UNLOCK(hadc);
 8001398:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
 800139c:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 800139e:	2002      	movs	r0, #2
 80013a0:	bd38      	pop	{r3, r4, r5, pc}
 80013a2:	bf00      	nop
 80013a4:	50000100 	.word	0x50000100
 80013a8:	50000300 	.word	0x50000300
 80013ac:	50000400 	.word	0x50000400
 80013b0:	50000700 	.word	0x50000700

080013b4 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80013b4:	6803      	ldr	r3, [r0, #0]
 80013b6:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80013b8:	4770      	bx	lr

080013ba <HAL_ADCEx_InjectedConvCpltCallback>:
 80013ba:	4770      	bx	lr

080013bc <HAL_ADCEx_InjectedQueueOverflowCallback>:
 80013bc:	4770      	bx	lr

080013be <HAL_ADCEx_LevelOutOfWindow2Callback>:
 80013be:	4770      	bx	lr

080013c0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
{
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80013c4:	6803      	ldr	r3, [r0, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	0752      	lsls	r2, r2, #29
{
 80013ca:	b510      	push	{r4, lr}
 80013cc:	4604      	mov	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80013ce:	d502      	bpl.n	80013d6 <HAL_ADC_IRQHandler+0x12>
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	0750      	lsls	r0, r2, #29
 80013d4:	d405      	bmi.n	80013e2 <HAL_ADC_IRQHandler+0x1e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80013d6:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80013d8:	0711      	lsls	r1, r2, #28
 80013da:	d544      	bpl.n	8001466 <HAL_ADC_IRQHandler+0xa2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	0712      	lsls	r2, r2, #28
 80013e0:	d541      	bpl.n	8001466 <HAL_ADC_IRQHandler+0xa2>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013e2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80013e4:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80013e6:	bf5e      	ittt	pl
 80013e8:	6c62      	ldrpl	r2, [r4, #68]	; 0x44
 80013ea:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80013ee:	6462      	strpl	r2, [r4, #68]	; 0x44
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80013f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013f4:	d003      	beq.n	80013fe <HAL_ADC_IRQHandler+0x3a>
 80013f6:	4aa3      	ldr	r2, [pc, #652]	; (8001684 <HAL_ADC_IRQHandler+0x2c0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	f040 810f 	bne.w	800161c <HAL_ADC_IRQHandler+0x258>
 80013fe:	4aa2      	ldr	r2, [pc, #648]	; (8001688 <HAL_ADC_IRQHandler+0x2c4>)
 8001400:	6891      	ldr	r1, [r2, #8]
 8001402:	06c9      	lsls	r1, r1, #27
 8001404:	d00c      	beq.n	8001420 <HAL_ADC_IRQHandler+0x5c>
 8001406:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800140a:	d003      	beq.n	8001414 <HAL_ADC_IRQHandler+0x50>
 800140c:	499d      	ldr	r1, [pc, #628]	; (8001684 <HAL_ADC_IRQHandler+0x2c0>)
 800140e:	428b      	cmp	r3, r1
 8001410:	f040 8109 	bne.w	8001626 <HAL_ADC_IRQHandler+0x262>
 8001414:	6892      	ldr	r2, [r2, #8]
 8001416:	f002 021f 	and.w	r2, r2, #31
 800141a:	2a05      	cmp	r2, #5
 800141c:	f040 8115 	bne.w	800164a <HAL_ADC_IRQHandler+0x286>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001420:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001422:	68d9      	ldr	r1, [r3, #12]
 8001424:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8001428:	d117      	bne.n	800145a <HAL_ADC_IRQHandler+0x96>
 800142a:	0490      	lsls	r0, r2, #18
 800142c:	d415      	bmi.n	800145a <HAL_ADC_IRQHandler+0x96>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	0711      	lsls	r1, r2, #28
 8001432:	d512      	bpl.n	800145a <HAL_ADC_IRQHandler+0x96>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	0752      	lsls	r2, r2, #29
 8001438:	f100 812c 	bmi.w	8001694 <HAL_ADC_IRQHandler+0x2d0>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	f022 020c 	bic.w	r2, r2, #12
 8001442:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001444:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001446:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800144a:	6463      	str	r3, [r4, #68]	; 0x44
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800144c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800144e:	04db      	lsls	r3, r3, #19
 8001450:	d403      	bmi.n	800145a <HAL_ADC_IRQHandler+0x96>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001452:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 800145a:	4620      	mov	r0, r4
 800145c:	f7ff fb00 	bl	8000a60 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	220c      	movs	r2, #12
 8001464:	601a      	str	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	0690      	lsls	r0, r2, #26
 800146c:	d502      	bpl.n	8001474 <HAL_ADC_IRQHandler+0xb0>
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	0691      	lsls	r1, r2, #26
 8001472:	d405      	bmi.n	8001480 <HAL_ADC_IRQHandler+0xbc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001474:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001476:	0652      	lsls	r2, r2, #25
 8001478:	d562      	bpl.n	8001540 <HAL_ADC_IRQHandler+0x17c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	0650      	lsls	r0, r2, #25
 800147e:	d55f      	bpl.n	8001540 <HAL_ADC_IRQHandler+0x17c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001480:	6c62      	ldr	r2, [r4, #68]	; 0x44
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001486:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800148a:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800148c:	d003      	beq.n	8001496 <HAL_ADC_IRQHandler+0xd2>
 800148e:	4a7d      	ldr	r2, [pc, #500]	; (8001684 <HAL_ADC_IRQHandler+0x2c0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	f040 8108 	bne.w	80016a6 <HAL_ADC_IRQHandler+0x2e2>
 8001496:	4a7c      	ldr	r2, [pc, #496]	; (8001688 <HAL_ADC_IRQHandler+0x2c4>)
 8001498:	6891      	ldr	r1, [r2, #8]
 800149a:	06c9      	lsls	r1, r1, #27
 800149c:	d00c      	beq.n	80014b8 <HAL_ADC_IRQHandler+0xf4>
 800149e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a2:	d003      	beq.n	80014ac <HAL_ADC_IRQHandler+0xe8>
 80014a4:	4977      	ldr	r1, [pc, #476]	; (8001684 <HAL_ADC_IRQHandler+0x2c0>)
 80014a6:	428b      	cmp	r3, r1
 80014a8:	f040 8102 	bne.w	80016b0 <HAL_ADC_IRQHandler+0x2ec>
 80014ac:	6892      	ldr	r2, [r2, #8]
 80014ae:	f002 021f 	and.w	r2, r2, #31
 80014b2:	2a05      	cmp	r2, #5
 80014b4:	f040 810e 	bne.w	80016d4 <HAL_ADC_IRQHandler+0x310>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80014b8:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80014ba:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80014bc:	f011 0fc0 	tst.w	r1, #192	; 0xc0
 80014c0:	d007      	beq.n	80014d2 <HAL_ADC_IRQHandler+0x10e>
 80014c2:	0190      	lsls	r0, r2, #6
 80014c4:	d436      	bmi.n	8001534 <HAL_ADC_IRQHandler+0x170>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80014c6:	68d9      	ldr	r1, [r3, #12]
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80014c8:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 80014cc:	d132      	bne.n	8001534 <HAL_ADC_IRQHandler+0x170>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80014ce:	0491      	lsls	r1, r2, #18
 80014d0:	d430      	bmi.n	8001534 <HAL_ADC_IRQHandler+0x170>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	0652      	lsls	r2, r2, #25
 80014d6:	d52d      	bpl.n	8001534 <HAL_ADC_IRQHandler+0x170>
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80014d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014dc:	d003      	beq.n	80014e6 <HAL_ADC_IRQHandler+0x122>
 80014de:	4a69      	ldr	r2, [pc, #420]	; (8001684 <HAL_ADC_IRQHandler+0x2c0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	f040 8113 	bne.w	800170c <HAL_ADC_IRQHandler+0x348>
 80014e6:	4a68      	ldr	r2, [pc, #416]	; (8001688 <HAL_ADC_IRQHandler+0x2c4>)
 80014e8:	6891      	ldr	r1, [r2, #8]
 80014ea:	06c8      	lsls	r0, r1, #27
 80014ec:	d00c      	beq.n	8001508 <HAL_ADC_IRQHandler+0x144>
 80014ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014f2:	d003      	beq.n	80014fc <HAL_ADC_IRQHandler+0x138>
 80014f4:	4963      	ldr	r1, [pc, #396]	; (8001684 <HAL_ADC_IRQHandler+0x2c0>)
 80014f6:	428b      	cmp	r3, r1
 80014f8:	f040 810d 	bne.w	8001716 <HAL_ADC_IRQHandler+0x352>
 80014fc:	6892      	ldr	r2, [r2, #8]
 80014fe:	f002 021f 	and.w	r2, r2, #31
 8001502:	2a06      	cmp	r2, #6
 8001504:	f040 8119 	bne.w	800173a <HAL_ADC_IRQHandler+0x376>
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001508:	68da      	ldr	r2, [r3, #12]
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800150a:	0292      	lsls	r2, r2, #10
 800150c:	d412      	bmi.n	8001534 <HAL_ADC_IRQHandler+0x170>
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	0710      	lsls	r0, r2, #28
 8001512:	f100 812e 	bmi.w	8001772 <HAL_ADC_IRQHandler+0x3ae>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800151c:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800151e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001520:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001524:	6463      	str	r3, [r4, #68]	; 0x44
            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001526:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001528:	05d9      	lsls	r1, r3, #23
 800152a:	d403      	bmi.n	8001534 <HAL_ADC_IRQHandler+0x170>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800152c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001534:	4620      	mov	r0, r4
 8001536:	f7ff ff40 	bl	80013ba <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	2260      	movs	r2, #96	; 0x60
 800153e:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001540:	6823      	ldr	r3, [r4, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	0612      	lsls	r2, r2, #24
 8001546:	d50c      	bpl.n	8001562 <HAL_ADC_IRQHandler+0x19e>
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	061b      	lsls	r3, r3, #24
 800154c:	d509      	bpl.n	8001562 <HAL_ADC_IRQHandler+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800154e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001554:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001556:	4620      	mov	r0, r4
 8001558:	f7ff fccc 	bl	8000ef4 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800155c:	6823      	ldr	r3, [r4, #0]
 800155e:	2280      	movs	r2, #128	; 0x80
 8001560:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	05d0      	lsls	r0, r2, #23
 8001568:	d50d      	bpl.n	8001586 <HAL_ADC_IRQHandler+0x1c2>
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	05d9      	lsls	r1, r3, #23
 800156e:	d50a      	bpl.n	8001586 <HAL_ADC_IRQHandler+0x1c2>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001570:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001576:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001578:	4620      	mov	r0, r4
 800157a:	f7ff ff20 	bl	80013be <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800157e:	6823      	ldr	r3, [r4, #0]
 8001580:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001584:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	0592      	lsls	r2, r2, #22
 800158c:	d50d      	bpl.n	80015aa <HAL_ADC_IRQHandler+0x1e6>
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	0598      	lsls	r0, r3, #22
 8001592:	d50a      	bpl.n	80015aa <HAL_ADC_IRQHandler+0x1e6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001594:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001596:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800159a:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800159c:	4620      	mov	r0, r4
 800159e:	f7ff ff0f 	bl	80013c0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a8:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80015aa:	6822      	ldr	r2, [r4, #0]
 80015ac:	6813      	ldr	r3, [r2, #0]
 80015ae:	06d9      	lsls	r1, r3, #27
 80015b0:	d51c      	bpl.n	80015ec <HAL_ADC_IRQHandler+0x228>
 80015b2:	6853      	ldr	r3, [r2, #4]
 80015b4:	06db      	lsls	r3, r3, #27
 80015b6:	d519      	bpl.n	80015ec <HAL_ADC_IRQHandler+0x228>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80015b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	f000 80e8 	beq.w	8001790 <HAL_ADC_IRQHandler+0x3cc>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015c0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80015c4:	f000 80de 	beq.w	8001784 <HAL_ADC_IRQHandler+0x3c0>
 80015c8:	492f      	ldr	r1, [pc, #188]	; (8001688 <HAL_ADC_IRQHandler+0x2c4>)
 80015ca:	4b30      	ldr	r3, [pc, #192]	; (800168c <HAL_ADC_IRQHandler+0x2c8>)
 80015cc:	482d      	ldr	r0, [pc, #180]	; (8001684 <HAL_ADC_IRQHandler+0x2c0>)
 80015ce:	4282      	cmp	r2, r0
 80015d0:	bf08      	it	eq
 80015d2:	460b      	moveq	r3, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80015d4:	6899      	ldr	r1, [r3, #8]
 80015d6:	06c8      	lsls	r0, r1, #27
 80015d8:	f040 80d6 	bne.w	8001788 <HAL_ADC_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80015dc:	68d3      	ldr	r3, [r2, #12]
 80015de:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80015e2:	f040 80d5 	bne.w	8001790 <HAL_ADC_IRQHandler+0x3cc>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	2210      	movs	r2, #16
 80015ea:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80015ec:	6823      	ldr	r3, [r4, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	0551      	lsls	r1, r2, #21
 80015f2:	f140 80d9 	bpl.w	80017a8 <HAL_ADC_IRQHandler+0x3e4>
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	0552      	lsls	r2, r2, #21
 80015fa:	f140 80d5 	bpl.w	80017a8 <HAL_ADC_IRQHandler+0x3e4>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80015fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001600:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001604:	6462      	str	r2, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001606:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001608:	f042 0208 	orr.w	r2, r2, #8
 800160c:	64a2      	str	r2, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800160e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001612:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001614:	4620      	mov	r0, r4
 8001616:	f7ff fed1 	bl	80013bc <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 800161a:	bd10      	pop	{r4, pc}
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800161c:	4a1b      	ldr	r2, [pc, #108]	; (800168c <HAL_ADC_IRQHandler+0x2c8>)
 800161e:	6892      	ldr	r2, [r2, #8]
 8001620:	06d2      	lsls	r2, r2, #27
 8001622:	f43f aefd 	beq.w	8001420 <HAL_ADC_IRQHandler+0x5c>
 8001626:	4a19      	ldr	r2, [pc, #100]	; (800168c <HAL_ADC_IRQHandler+0x2c8>)
 8001628:	6892      	ldr	r2, [r2, #8]
 800162a:	f002 021f 	and.w	r2, r2, #31
 800162e:	2a05      	cmp	r2, #5
 8001630:	f43f aef6 	beq.w	8001420 <HAL_ADC_IRQHandler+0x5c>
 8001634:	4a15      	ldr	r2, [pc, #84]	; (800168c <HAL_ADC_IRQHandler+0x2c8>)
 8001636:	6892      	ldr	r2, [r2, #8]
 8001638:	f002 021f 	and.w	r2, r2, #31
 800163c:	2a09      	cmp	r2, #9
 800163e:	f43f aeef 	beq.w	8001420 <HAL_ADC_IRQHandler+0x5c>
 8001642:	4a13      	ldr	r2, [pc, #76]	; (8001690 <HAL_ADC_IRQHandler+0x2cc>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d11a      	bne.n	800167e <HAL_ADC_IRQHandler+0x2ba>
 8001648:	e6ea      	b.n	8001420 <HAL_ADC_IRQHandler+0x5c>
 800164a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800164e:	d002      	beq.n	8001656 <HAL_ADC_IRQHandler+0x292>
 8001650:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <HAL_ADC_IRQHandler+0x2c0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d1ee      	bne.n	8001634 <HAL_ADC_IRQHandler+0x270>
 8001656:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <HAL_ADC_IRQHandler+0x2c4>)
 8001658:	6892      	ldr	r2, [r2, #8]
 800165a:	f002 021f 	and.w	r2, r2, #31
 800165e:	2a09      	cmp	r2, #9
 8001660:	f43f aede 	beq.w	8001420 <HAL_ADC_IRQHandler+0x5c>
 8001664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001668:	f43f aeda 	beq.w	8001420 <HAL_ADC_IRQHandler+0x5c>
 800166c:	4a08      	ldr	r2, [pc, #32]	; (8001690 <HAL_ADC_IRQHandler+0x2cc>)
 800166e:	4293      	cmp	r3, r2
 8001670:	f43f aed6 	beq.w	8001420 <HAL_ADC_IRQHandler+0x5c>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001674:	4903      	ldr	r1, [pc, #12]	; (8001684 <HAL_ADC_IRQHandler+0x2c0>)
 8001676:	428b      	cmp	r3, r1
 8001678:	bf08      	it	eq
 800167a:	f04f 42a0 	moveq.w	r2, #1342177280	; 0x50000000
 800167e:	68d2      	ldr	r2, [r2, #12]
 8001680:	e6cf      	b.n	8001422 <HAL_ADC_IRQHandler+0x5e>
 8001682:	bf00      	nop
 8001684:	50000100 	.word	0x50000100
 8001688:	50000300 	.word	0x50000300
 800168c:	50000700 	.word	0x50000700
 8001690:	50000400 	.word	0x50000400
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001694:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001696:	f043 0310 	orr.w	r3, r3, #16
 800169a:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800169c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	64a3      	str	r3, [r4, #72]	; 0x48
 80016a4:	e6d9      	b.n	800145a <HAL_ADC_IRQHandler+0x96>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80016a6:	4a41      	ldr	r2, [pc, #260]	; (80017ac <HAL_ADC_IRQHandler+0x3e8>)
 80016a8:	6892      	ldr	r2, [r2, #8]
 80016aa:	06d2      	lsls	r2, r2, #27
 80016ac:	f43f af04 	beq.w	80014b8 <HAL_ADC_IRQHandler+0xf4>
 80016b0:	4a3e      	ldr	r2, [pc, #248]	; (80017ac <HAL_ADC_IRQHandler+0x3e8>)
 80016b2:	6892      	ldr	r2, [r2, #8]
 80016b4:	f002 021f 	and.w	r2, r2, #31
 80016b8:	2a05      	cmp	r2, #5
 80016ba:	f43f aefd 	beq.w	80014b8 <HAL_ADC_IRQHandler+0xf4>
 80016be:	4a3b      	ldr	r2, [pc, #236]	; (80017ac <HAL_ADC_IRQHandler+0x3e8>)
 80016c0:	6892      	ldr	r2, [r2, #8]
 80016c2:	f002 021f 	and.w	r2, r2, #31
 80016c6:	2a09      	cmp	r2, #9
 80016c8:	f43f aef6 	beq.w	80014b8 <HAL_ADC_IRQHandler+0xf4>
 80016cc:	4a38      	ldr	r2, [pc, #224]	; (80017b0 <HAL_ADC_IRQHandler+0x3ec>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d11a      	bne.n	8001708 <HAL_ADC_IRQHandler+0x344>
 80016d2:	e6f1      	b.n	80014b8 <HAL_ADC_IRQHandler+0xf4>
 80016d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016d8:	d002      	beq.n	80016e0 <HAL_ADC_IRQHandler+0x31c>
 80016da:	4a36      	ldr	r2, [pc, #216]	; (80017b4 <HAL_ADC_IRQHandler+0x3f0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d1ee      	bne.n	80016be <HAL_ADC_IRQHandler+0x2fa>
 80016e0:	4a35      	ldr	r2, [pc, #212]	; (80017b8 <HAL_ADC_IRQHandler+0x3f4>)
 80016e2:	6892      	ldr	r2, [r2, #8]
 80016e4:	f002 021f 	and.w	r2, r2, #31
 80016e8:	2a09      	cmp	r2, #9
 80016ea:	f43f aee5 	beq.w	80014b8 <HAL_ADC_IRQHandler+0xf4>
 80016ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016f2:	f43f aee1 	beq.w	80014b8 <HAL_ADC_IRQHandler+0xf4>
 80016f6:	4a2e      	ldr	r2, [pc, #184]	; (80017b0 <HAL_ADC_IRQHandler+0x3ec>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	f43f aedd 	beq.w	80014b8 <HAL_ADC_IRQHandler+0xf4>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80016fe:	492d      	ldr	r1, [pc, #180]	; (80017b4 <HAL_ADC_IRQHandler+0x3f0>)
 8001700:	428b      	cmp	r3, r1
 8001702:	bf08      	it	eq
 8001704:	f04f 42a0 	moveq.w	r2, #1342177280	; 0x50000000
 8001708:	68d2      	ldr	r2, [r2, #12]
 800170a:	e6d6      	b.n	80014ba <HAL_ADC_IRQHandler+0xf6>
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800170c:	4a27      	ldr	r2, [pc, #156]	; (80017ac <HAL_ADC_IRQHandler+0x3e8>)
 800170e:	6892      	ldr	r2, [r2, #8]
 8001710:	06d1      	lsls	r1, r2, #27
 8001712:	f43f aef9 	beq.w	8001508 <HAL_ADC_IRQHandler+0x144>
 8001716:	4a25      	ldr	r2, [pc, #148]	; (80017ac <HAL_ADC_IRQHandler+0x3e8>)
 8001718:	6892      	ldr	r2, [r2, #8]
 800171a:	f002 021f 	and.w	r2, r2, #31
 800171e:	2a06      	cmp	r2, #6
 8001720:	f43f aef2 	beq.w	8001508 <HAL_ADC_IRQHandler+0x144>
 8001724:	4a21      	ldr	r2, [pc, #132]	; (80017ac <HAL_ADC_IRQHandler+0x3e8>)
 8001726:	6892      	ldr	r2, [r2, #8]
 8001728:	f002 021f 	and.w	r2, r2, #31
 800172c:	2a07      	cmp	r2, #7
 800172e:	f43f aeeb 	beq.w	8001508 <HAL_ADC_IRQHandler+0x144>
 8001732:	4a1f      	ldr	r2, [pc, #124]	; (80017b0 <HAL_ADC_IRQHandler+0x3ec>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d11a      	bne.n	800176e <HAL_ADC_IRQHandler+0x3aa>
 8001738:	e6e6      	b.n	8001508 <HAL_ADC_IRQHandler+0x144>
 800173a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800173e:	d002      	beq.n	8001746 <HAL_ADC_IRQHandler+0x382>
 8001740:	4a1c      	ldr	r2, [pc, #112]	; (80017b4 <HAL_ADC_IRQHandler+0x3f0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d1ee      	bne.n	8001724 <HAL_ADC_IRQHandler+0x360>
 8001746:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <HAL_ADC_IRQHandler+0x3f4>)
 8001748:	6892      	ldr	r2, [r2, #8]
 800174a:	f002 021f 	and.w	r2, r2, #31
 800174e:	2a07      	cmp	r2, #7
 8001750:	f43f aeda 	beq.w	8001508 <HAL_ADC_IRQHandler+0x144>
 8001754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001758:	f43f aed6 	beq.w	8001508 <HAL_ADC_IRQHandler+0x144>
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <HAL_ADC_IRQHandler+0x3ec>)
 800175e:	4293      	cmp	r3, r2
 8001760:	f43f aed2 	beq.w	8001508 <HAL_ADC_IRQHandler+0x144>
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001764:	4913      	ldr	r1, [pc, #76]	; (80017b4 <HAL_ADC_IRQHandler+0x3f0>)
 8001766:	428b      	cmp	r3, r1
 8001768:	bf08      	it	eq
 800176a:	f04f 42a0 	moveq.w	r2, #1342177280	; 0x50000000
 800176e:	68d2      	ldr	r2, [r2, #12]
 8001770:	e6cb      	b.n	800150a <HAL_ADC_IRQHandler+0x146>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001772:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001774:	f043 0310 	orr.w	r3, r3, #16
 8001778:	6463      	str	r3, [r4, #68]	; 0x44
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800177a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	64a3      	str	r3, [r4, #72]	; 0x48
 8001782:	e6d7      	b.n	8001534 <HAL_ADC_IRQHandler+0x170>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_ADC_IRQHandler+0x3f4>)
 8001786:	e725      	b.n	80015d4 <HAL_ADC_IRQHandler+0x210>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800178e:	e728      	b.n	80015e2 <HAL_ADC_IRQHandler+0x21e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001790:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001796:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001798:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800179a:	f043 0302 	orr.w	r3, r3, #2
 800179e:	64a3      	str	r3, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 80017a0:	4620      	mov	r0, r4
 80017a2:	f7ff fba8 	bl	8000ef6 <HAL_ADC_ErrorCallback>
 80017a6:	e71e      	b.n	80015e6 <HAL_ADC_IRQHandler+0x222>
 80017a8:	bd10      	pop	{r4, pc}
 80017aa:	bf00      	nop
 80017ac:	50000700 	.word	0x50000700
 80017b0:	50000400 	.word	0x50000400
 80017b4:	50000100 	.word	0x50000100
 80017b8:	50000300 	.word	0x50000300

080017bc <HAL_ADC_ConfigChannel>:
{
 80017bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017be:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 80017c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80017c8:	2b01      	cmp	r3, #1
{
 80017ca:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 80017cc:	f000 8163 	beq.w	8001a96 <HAL_ADC_ConfigChannel+0x2da>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017d0:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80017d2:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017d4:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 80017d6:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017d8:	0752      	lsls	r2, r2, #29
  __HAL_LOCK(hadc);
 80017da:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017de:	f100 8155 	bmi.w	8001a8c <HAL_ADC_ConfigChannel+0x2d0>
    if (sConfig->Rank < 5U)
 80017e2:	6848      	ldr	r0, [r1, #4]
 80017e4:	680c      	ldr	r4, [r1, #0]
 80017e6:	2804      	cmp	r0, #4
 80017e8:	f04f 0206 	mov.w	r2, #6
 80017ec:	d831      	bhi.n	8001852 <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 80017ee:	4342      	muls	r2, r0
 80017f0:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80017f2:	201f      	movs	r0, #31
 80017f4:	4090      	lsls	r0, r2
 80017f6:	ea27 0000 	bic.w	r0, r7, r0
 80017fa:	fa04 f202 	lsl.w	r2, r4, r2
 80017fe:	4302      	orrs	r2, r0
 8001800:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	f012 0f0c 	tst.w	r2, #12
 8001808:	d162      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800180a:	2c09      	cmp	r4, #9
 800180c:	ea4f 0244 	mov.w	r2, r4, lsl #1
 8001810:	688f      	ldr	r7, [r1, #8]
 8001812:	d946      	bls.n	80018a2 <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001814:	4422      	add	r2, r4
 8001816:	6998      	ldr	r0, [r3, #24]
 8001818:	3a1e      	subs	r2, #30
 800181a:	f04f 0e07 	mov.w	lr, #7
 800181e:	fa0e fe02 	lsl.w	lr, lr, r2
 8001822:	ea20 000e 	bic.w	r0, r0, lr
 8001826:	fa07 f202 	lsl.w	r2, r7, r2
 800182a:	4302      	orrs	r2, r0
 800182c:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 8001834:	694a      	ldr	r2, [r1, #20]
 8001836:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800183a:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 800183e:	690a      	ldr	r2, [r1, #16]
 8001840:	3a01      	subs	r2, #1
 8001842:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 8001846:	2a03      	cmp	r2, #3
 8001848:	d873      	bhi.n	8001932 <HAL_ADC_ConfigChannel+0x176>
 800184a:	e8df f002 	tbb	[pc, r2]
 800184e:	5137      	.short	0x5137
 8001850:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 8001852:	2809      	cmp	r0, #9
 8001854:	d80b      	bhi.n	800186e <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8001856:	4342      	muls	r2, r0
 8001858:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800185a:	3a1e      	subs	r2, #30
 800185c:	201f      	movs	r0, #31
 800185e:	4090      	lsls	r0, r2
 8001860:	ea27 0000 	bic.w	r0, r7, r0
 8001864:	fa04 f202 	lsl.w	r2, r4, r2
 8001868:	4302      	orrs	r2, r0
 800186a:	635a      	str	r2, [r3, #52]	; 0x34
 800186c:	e7c9      	b.n	8001802 <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 800186e:	280e      	cmp	r0, #14
 8001870:	d80b      	bhi.n	800188a <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001872:	4342      	muls	r2, r0
 8001874:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8001876:	3a3c      	subs	r2, #60	; 0x3c
 8001878:	201f      	movs	r0, #31
 800187a:	4090      	lsls	r0, r2
 800187c:	ea27 0000 	bic.w	r0, r7, r0
 8001880:	fa04 f202 	lsl.w	r2, r4, r2
 8001884:	4302      	orrs	r2, r0
 8001886:	639a      	str	r2, [r3, #56]	; 0x38
 8001888:	e7bb      	b.n	8001802 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800188a:	4342      	muls	r2, r0
 800188c:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800188e:	3a5a      	subs	r2, #90	; 0x5a
 8001890:	201f      	movs	r0, #31
 8001892:	4090      	lsls	r0, r2
 8001894:	ea27 0000 	bic.w	r0, r7, r0
 8001898:	fa04 f202 	lsl.w	r2, r4, r2
 800189c:	4302      	orrs	r2, r0
 800189e:	63da      	str	r2, [r3, #60]	; 0x3c
 80018a0:	e7af      	b.n	8001802 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018a2:	6958      	ldr	r0, [r3, #20]
 80018a4:	4422      	add	r2, r4
 80018a6:	f04f 0e07 	mov.w	lr, #7
 80018aa:	fa0e fe02 	lsl.w	lr, lr, r2
 80018ae:	ea20 000e 	bic.w	r0, r0, lr
 80018b2:	fa07 f202 	lsl.w	r2, r7, r2
 80018b6:	4302      	orrs	r2, r0
 80018b8:	615a      	str	r2, [r3, #20]
 80018ba:	e7b8      	b.n	800182e <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80018bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018be:	4f83      	ldr	r7, [pc, #524]	; (8001acc <HAL_ADC_ConfigChannel+0x310>)
 80018c0:	4017      	ands	r7, r2
 80018c2:	ea47 020c 	orr.w	r2, r7, ip
 80018c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018ca:	ea42 020e 	orr.w	r2, r2, lr
 80018ce:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	f002 0203 	and.w	r2, r2, #3
 80018d6:	2a01      	cmp	r2, #1
 80018d8:	f040 80df 	bne.w	8001a9a <HAL_ADC_ConfigChannel+0x2de>
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	07d7      	lsls	r7, r2, #31
 80018e0:	f140 80db 	bpl.w	8001a9a <HAL_ADC_ConfigChannel+0x2de>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e4:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80018e6:	2300      	movs	r3, #0
 80018e8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 80018ec:	b017      	add	sp, #92	; 0x5c
 80018ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 80018f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018f2:	4f76      	ldr	r7, [pc, #472]	; (8001acc <HAL_ADC_ConfigChannel+0x310>)
 80018f4:	4017      	ands	r7, r2
 80018f6:	ea47 020c 	orr.w	r2, r7, ip
 80018fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018fe:	ea42 020e 	orr.w	r2, r2, lr
 8001902:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8001904:	e7e4      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001906:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001908:	4870      	ldr	r0, [pc, #448]	; (8001acc <HAL_ADC_ConfigChannel+0x310>)
 800190a:	4010      	ands	r0, r2
 800190c:	ea40 020c 	orr.w	r2, r0, ip
 8001910:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001914:	ea42 020e 	orr.w	r2, r2, lr
 8001918:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800191a:	e7d9      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 800191c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800191e:	4a6b      	ldr	r2, [pc, #428]	; (8001acc <HAL_ADC_ConfigChannel+0x310>)
 8001920:	4002      	ands	r2, r0
 8001922:	ea42 020c 	orr.w	r2, r2, ip
 8001926:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800192a:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800192e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001930:	e7ce      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001932:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001934:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001938:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800193a:	bf02      	ittt	eq
 800193c:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 800193e:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001942:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001944:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001946:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800194a:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800194c:	bf02      	ittt	eq
 800194e:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 8001950:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001954:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001956:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001958:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800195c:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800195e:	bf02      	ittt	eq
 8001960:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 8001962:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001966:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001968:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800196a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800196e:	4594      	cmp	ip, r2
 8001970:	d1ae      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001972:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001974:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001978:	e7d9      	b.n	800192e <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800197a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800197e:	2101      	movs	r1, #1
 8001980:	40a1      	lsls	r1, r4
 8001982:	ea22 0201 	bic.w	r2, r2, r1
 8001986:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800198a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800198e:	d01e      	beq.n	80019ce <HAL_ADC_ConfigChannel+0x212>
 8001990:	494f      	ldr	r1, [pc, #316]	; (8001ad0 <HAL_ADC_ConfigChannel+0x314>)
 8001992:	4a50      	ldr	r2, [pc, #320]	; (8001ad4 <HAL_ADC_ConfigChannel+0x318>)
 8001994:	4850      	ldr	r0, [pc, #320]	; (8001ad8 <HAL_ADC_ConfigChannel+0x31c>)
 8001996:	4283      	cmp	r3, r0
 8001998:	bf08      	it	eq
 800199a:	460a      	moveq	r2, r1
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800199c:	2c10      	cmp	r4, #16
 800199e:	d118      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x216>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019a0:	6891      	ldr	r1, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019a2:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019a6:	d19d      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ac:	494a      	ldr	r1, [pc, #296]	; (8001ad8 <HAL_ADC_ConfigChannel+0x31c>)
 80019ae:	d11c      	bne.n	80019ea <HAL_ADC_ConfigChannel+0x22e>
 80019b0:	9101      	str	r1, [sp, #4]
 80019b2:	e024      	b.n	80019fe <HAL_ADC_ConfigChannel+0x242>
        MODIFY_REG(hadc->Instance->SMPR1,
 80019b4:	1c60      	adds	r0, r4, #1
 80019b6:	6959      	ldr	r1, [r3, #20]
 80019b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80019bc:	2207      	movs	r2, #7
 80019be:	4082      	lsls	r2, r0
 80019c0:	ea21 0102 	bic.w	r1, r1, r2
 80019c4:	fa06 f200 	lsl.w	r2, r6, r0
 80019c8:	430a      	orrs	r2, r1
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	e7dd      	b.n	800198a <HAL_ADC_ConfigChannel+0x1ce>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019ce:	4a40      	ldr	r2, [pc, #256]	; (8001ad0 <HAL_ADC_ConfigChannel+0x314>)
 80019d0:	e7e4      	b.n	800199c <HAL_ADC_ConfigChannel+0x1e0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019d2:	2c11      	cmp	r4, #17
 80019d4:	d103      	bne.n	80019de <HAL_ADC_ConfigChannel+0x222>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019d6:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019d8:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 80019dc:	e7e3      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x1ea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019de:	2c12      	cmp	r4, #18
 80019e0:	d180      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80019e2:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019e4:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 80019e8:	e7dd      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x1ea>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019ea:	428b      	cmp	r3, r1
 80019ec:	d102      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x238>
 80019ee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80019f2:	e7dd      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x1f4>
 80019f4:	4939      	ldr	r1, [pc, #228]	; (8001adc <HAL_ADC_ConfigChannel+0x320>)
 80019f6:	483a      	ldr	r0, [pc, #232]	; (8001ae0 <HAL_ADC_ConfigChannel+0x324>)
 80019f8:	428b      	cmp	r3, r1
 80019fa:	d12b      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x298>
 80019fc:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80019fe:	6899      	ldr	r1, [r3, #8]
 8001a00:	f001 0103 	and.w	r1, r1, #3
 8001a04:	2901      	cmp	r1, #1
 8001a06:	d102      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x252>
 8001a08:	6819      	ldr	r1, [r3, #0]
 8001a0a:	07c8      	lsls	r0, r1, #31
 8001a0c:	d438      	bmi.n	8001a80 <HAL_ADC_ConfigChannel+0x2c4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a0e:	9901      	ldr	r1, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a10:	b139      	cbz	r1, 8001a22 <HAL_ADC_ConfigChannel+0x266>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a12:	6888      	ldr	r0, [r1, #8]
 8001a14:	f000 0003 	and.w	r0, r0, #3
 8001a18:	2801      	cmp	r0, #1
 8001a1a:	d102      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x266>
 8001a1c:	6809      	ldr	r1, [r1, #0]
 8001a1e:	07c9      	lsls	r1, r1, #31
 8001a20:	d42e      	bmi.n	8001a80 <HAL_ADC_ConfigChannel+0x2c4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a22:	2c10      	cmp	r4, #16
 8001a24:	d11a      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x2a0>
 8001a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a2a:	f47f af5b 	bne.w	80018e4 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001a2e:	6893      	ldr	r3, [r2, #8]
 8001a30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a34:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a36:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <HAL_ADC_ConfigChannel+0x328>)
 8001a38:	4a2b      	ldr	r2, [pc, #172]	; (8001ae8 <HAL_ADC_ConfigChannel+0x32c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001a40:	230a      	movs	r3, #10
 8001a42:	4353      	muls	r3, r2
            wait_loop_index--;
 8001a44:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8001a46:	9b00      	ldr	r3, [sp, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f43f af4b 	beq.w	80018e4 <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 8001a4e:	9b00      	ldr	r3, [sp, #0]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	e7f7      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x288>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a54:	4283      	cmp	r3, r0
 8001a56:	bf18      	it	ne
 8001a58:	2100      	movne	r1, #0
 8001a5a:	e7a9      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x1f4>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001a5c:	2c11      	cmp	r4, #17
 8001a5e:	d108      	bne.n	8001a72 <HAL_ADC_ConfigChannel+0x2b6>
 8001a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a64:	f47f af3e 	bne.w	80018e4 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001a68:	6893      	ldr	r3, [r2, #8]
 8001a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001a6e:	6093      	str	r3, [r2, #8]
 8001a70:	e738      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a72:	2c12      	cmp	r4, #18
 8001a74:	f47f af36 	bne.w	80018e4 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001a78:	6893      	ldr	r3, [r2, #8]
 8001a7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a7e:	e7f6      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x2b2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a80:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001a82:	f043 0320 	orr.w	r3, r3, #32
 8001a86:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8001a88:	2001      	movs	r0, #1
 8001a8a:	e72c      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a8c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001a8e:	f043 0320 	orr.w	r3, r3, #32
 8001a92:	646b      	str	r3, [r5, #68]	; 0x44
 8001a94:	e727      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 8001a96:	2002      	movs	r0, #2
 8001a98:	e728      	b.n	80018ec <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a9a:	2e01      	cmp	r6, #1
 8001a9c:	f47f af6d 	bne.w	800197a <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001aa0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001aa4:	40a6      	lsls	r6, r4
 8001aa6:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001aa8:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001aaa:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 8001aae:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ab0:	d980      	bls.n	80019b4 <HAL_ADC_ConfigChannel+0x1f8>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001ab2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001ab6:	6999      	ldr	r1, [r3, #24]
 8001ab8:	3a1b      	subs	r2, #27
 8001aba:	2007      	movs	r0, #7
 8001abc:	4090      	lsls	r0, r2
 8001abe:	ea21 0100 	bic.w	r1, r1, r0
 8001ac2:	fa06 f202 	lsl.w	r2, r6, r2
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	619a      	str	r2, [r3, #24]
 8001aca:	e75e      	b.n	800198a <HAL_ADC_ConfigChannel+0x1ce>
 8001acc:	83fff000 	.word	0x83fff000
 8001ad0:	50000300 	.word	0x50000300
 8001ad4:	50000700 	.word	0x50000700
 8001ad8:	50000100 	.word	0x50000100
 8001adc:	50000400 	.word	0x50000400
 8001ae0:	50000500 	.word	0x50000500
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	000f4240 	.word	0x000f4240

08001aec <HAL_ADCEx_MultiModeConfigChannel>:
{
 8001aec:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001aee:	6802      	ldr	r2, [r0, #0]
 8001af0:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8001af2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
{
 8001af6:	b097      	sub	sp, #92	; 0x5c
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001af8:	d101      	bne.n	8001afe <HAL_ADCEx_MultiModeConfigChannel+0x12>
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	e009      	b.n	8001b12 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d102      	bne.n	8001b08 <HAL_ADCEx_MultiModeConfigChannel+0x1c>
 8001b02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b06:	e7f8      	b.n	8001afa <HAL_ADCEx_MultiModeConfigChannel+0xe>
 8001b08:	4b3c      	ldr	r3, [pc, #240]	; (8001bfc <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8001b0a:	4c3d      	ldr	r4, [pc, #244]	; (8001c00 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d130      	bne.n	8001b72 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8001b10:	9401      	str	r4, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001b12:	9c01      	ldr	r4, [sp, #4]
 8001b14:	2c00      	cmp	r4, #0
 8001b16:	d058      	beq.n	8001bca <HAL_ADCEx_MultiModeConfigChannel+0xde>
  __HAL_LOCK(hadc);
 8001b18:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d056      	beq.n	8001bce <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 8001b20:	2301      	movs	r3, #1
 8001b22:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001b26:	6893      	ldr	r3, [r2, #8]
 8001b28:	075b      	lsls	r3, r3, #29
 8001b2a:	d443      	bmi.n	8001bb4 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001b2c:	68a3      	ldr	r3, [r4, #8]
 8001b2e:	075f      	lsls	r7, r3, #29
 8001b30:	d440      	bmi.n	8001bb4 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b32:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001b36:	d020      	beq.n	8001b7a <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 8001b38:	4d32      	ldr	r5, [pc, #200]	; (8001c04 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8001b3a:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8001b3c:	4e2e      	ldr	r6, [pc, #184]	; (8001bf8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8001b3e:	42b2      	cmp	r2, r6
 8001b40:	bf08      	it	eq
 8001b42:	462b      	moveq	r3, r5
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b44:	680d      	ldr	r5, [r1, #0]
 8001b46:	b1d5      	cbz	r5, 8001b7e <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001b48:	684e      	ldr	r6, [r1, #4]
 8001b4a:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8001b4e:	4637      	mov	r7, r6
 8001b50:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001b52:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 8001b56:	f42e 4760 	bic.w	r7, lr, #57344	; 0xe000
 8001b5a:	433e      	orrs	r6, r7
 8001b5c:	609e      	str	r6, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b5e:	6896      	ldr	r6, [r2, #8]
 8001b60:	f006 0603 	and.w	r6, r6, #3
 8001b64:	2e01      	cmp	r6, #1
 8001b66:	d134      	bne.n	8001bd2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	07d6      	lsls	r6, r2, #31
 8001b6c:	d531      	bpl.n	8001bd2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e025      	b.n	8001bbe <HAL_ADCEx_MultiModeConfigChannel+0xd2>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b72:	42a2      	cmp	r2, r4
 8001b74:	bf18      	it	ne
 8001b76:	2300      	movne	r3, #0
 8001b78:	e7bf      	b.n	8001afa <HAL_ADCEx_MultiModeConfigChannel+0xe>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b7a:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8001b7c:	e7e2      	b.n	8001b44 <HAL_ADCEx_MultiModeConfigChannel+0x58>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001b7e:	6899      	ldr	r1, [r3, #8]
 8001b80:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8001b84:	6099      	str	r1, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b86:	6891      	ldr	r1, [r2, #8]
 8001b88:	f001 0103 	and.w	r1, r1, #3
 8001b8c:	2901      	cmp	r1, #1
 8001b8e:	d102      	bne.n	8001b96 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	07d1      	lsls	r1, r2, #31
 8001b94:	d4eb      	bmi.n	8001b6e <HAL_ADCEx_MultiModeConfigChannel+0x82>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001b96:	68a2      	ldr	r2, [r4, #8]
 8001b98:	f002 0203 	and.w	r2, r2, #3
 8001b9c:	2a01      	cmp	r2, #1
 8001b9e:	d102      	bne.n	8001ba6 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8001ba0:	6822      	ldr	r2, [r4, #0]
 8001ba2:	07d2      	lsls	r2, r2, #31
 8001ba4:	d4e3      	bmi.n	8001b6e <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001bac:	f022 020f 	bic.w	r2, r2, #15
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	e7dc      	b.n	8001b6e <HAL_ADCEx_MultiModeConfigChannel+0x82>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bb4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001bb6:	f043 0320 	orr.w	r3, r3, #32
 8001bba:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} 
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	b017      	add	sp, #92	; 0x5c
 8001bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e7fa      	b.n	8001bc4 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
  __HAL_LOCK(hadc);
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e7f8      	b.n	8001bc4 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001bd2:	68a2      	ldr	r2, [r4, #8]
 8001bd4:	f002 0203 	and.w	r2, r2, #3
 8001bd8:	2a01      	cmp	r2, #1
 8001bda:	d102      	bne.n	8001be2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001bdc:	6822      	ldr	r2, [r4, #0]
 8001bde:	07d4      	lsls	r4, r2, #31
 8001be0:	d4c5      	bmi.n	8001b6e <HAL_ADCEx_MultiModeConfigChannel+0x82>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	6889      	ldr	r1, [r1, #8]
 8001be6:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001bea:	430d      	orrs	r5, r1
 8001bec:	f022 020f 	bic.w	r2, r2, #15
 8001bf0:	4315      	orrs	r5, r2
 8001bf2:	609d      	str	r5, [r3, #8]
 8001bf4:	e7bb      	b.n	8001b6e <HAL_ADCEx_MultiModeConfigChannel+0x82>
 8001bf6:	bf00      	nop
 8001bf8:	50000100 	.word	0x50000100
 8001bfc:	50000400 	.word	0x50000400
 8001c00:	50000500 	.word	0x50000500
 8001c04:	50000300 	.word	0x50000300
 8001c08:	50000700 	.word	0x50000700

08001c0c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001c0e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c10:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c14:	041b      	lsls	r3, r3, #16
 8001c16:	0c1b      	lsrs	r3, r3, #16
 8001c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001c1c:	0200      	lsls	r0, r0, #8
 8001c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c22:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001c26:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001c28:	60d3      	str	r3, [r2, #12]
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c30:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c32:	b530      	push	{r4, r5, lr}
 8001c34:	68dc      	ldr	r4, [r3, #12]
 8001c36:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c3a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	bf28      	it	cs
 8001c44:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	f04f 0501 	mov.w	r5, #1
 8001c4c:	fa05 f303 	lsl.w	r3, r5, r3
 8001c50:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c54:	bf8c      	ite	hi
 8001c56:	3c03      	subhi	r4, #3
 8001c58:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5a:	4019      	ands	r1, r3
 8001c5c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c5e:	fa05 f404 	lsl.w	r4, r5, r4
 8001c62:	3c01      	subs	r4, #1
 8001c64:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001c66:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	ea42 0201 	orr.w	r2, r2, r1
 8001c6c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	bfaf      	iteee	ge
 8001c72:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c76:	f000 000f 	andlt.w	r0, r0, #15
 8001c7a:	4b06      	ldrlt	r3, [pc, #24]	; (8001c94 <HAL_NVIC_SetPriority+0x64>)
 8001c7c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7e:	bfa5      	ittet	ge
 8001c80:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001c84:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c88:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001c8c:	bd30      	pop	{r4, r5, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00
 8001c94:	e000ed14 	.word	0xe000ed14

08001c98 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001c98:	0942      	lsrs	r2, r0, #5
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	f000 001f 	and.w	r0, r0, #31
 8001ca0:	fa03 f000 	lsl.w	r0, r3, r0
 8001ca4:	4b01      	ldr	r3, [pc, #4]	; (8001cac <HAL_NVIC_EnableIRQ+0x14>)
 8001ca6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001caa:	4770      	bx	lr
 8001cac:	e000e100 	.word	0xe000e100

08001cb0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb0:	3801      	subs	r0, #1
 8001cb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001cb6:	d20a      	bcs.n	8001cce <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	4a07      	ldr	r2, [pc, #28]	; (8001cd8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cbc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbe:	21f0      	movs	r1, #240	; 0xf0
 8001cc0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001cce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000e010 	.word	0xe000e010
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001cde:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001ce0:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001ce2:	bf0c      	ite	eq
 8001ce4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001ce8:	f022 0204 	bicne.w	r2, r2, #4
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	4770      	bx	lr
 8001cf0:	e000e010 	.word	0xe000e010

08001cf4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_SYSTICK_IRQHandler>:
{
 8001cf6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001cf8:	f7ff fffc 	bl	8001cf4 <HAL_SYSTICK_Callback>
 8001cfc:	bd08      	pop	{r3, pc}
	...

08001d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001d04:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d08:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8001e9c <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d0c:	4a61      	ldr	r2, [pc, #388]	; (8001e94 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8001d0e:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001d10:	fa38 f403 	lsrs.w	r4, r8, r3
 8001d14:	d102      	bne.n	8001d1c <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8001d16:	b003      	add	sp, #12
 8001d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d1c:	f04f 0e01 	mov.w	lr, #1
 8001d20:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8001d24:	ea18 060e 	ands.w	r6, r8, lr
 8001d28:	f000 80a6 	beq.w	8001e78 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d2c:	684c      	ldr	r4, [r1, #4]
 8001d2e:	f024 0710 	bic.w	r7, r4, #16
 8001d32:	2f02      	cmp	r7, #2
 8001d34:	d116      	bne.n	8001d64 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8001d36:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001d3a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d3e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001d42:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d46:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001d4a:	f04f 0c0f 	mov.w	ip, #15
 8001d4e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001d52:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d56:	690d      	ldr	r5, [r1, #16]
 8001d58:	fa05 f50b 	lsl.w	r5, r5, fp
 8001d5c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8001d60:	f8ca 5020 	str.w	r5, [sl, #32]
 8001d64:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d68:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001d6a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d6e:	fa05 f50a 	lsl.w	r5, r5, sl
 8001d72:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d74:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d78:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d7c:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d80:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d82:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d86:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001d88:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d8c:	d811      	bhi.n	8001db2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8001d8e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d90:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d94:	68cf      	ldr	r7, [r1, #12]
 8001d96:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001d9a:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001d9e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001da0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001da6:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001daa:	409f      	lsls	r7, r3
 8001dac:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001db0:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001db2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001db4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db6:	688f      	ldr	r7, [r1, #8]
 8001db8:	fa07 f70a 	lsl.w	r7, r7, sl
 8001dbc:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001dbe:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dc0:	00e5      	lsls	r5, r4, #3
 8001dc2:	d559      	bpl.n	8001e78 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc4:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8001dc8:	f045 0501 	orr.w	r5, r5, #1
 8001dcc:	f8c9 5018 	str.w	r5, [r9, #24]
 8001dd0:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8001dd4:	f023 0703 	bic.w	r7, r3, #3
 8001dd8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001ddc:	f005 0501 	and.w	r5, r5, #1
 8001de0:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001de4:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001de6:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001dec:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001dee:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001df2:	f04f 0e0f 	mov.w	lr, #15
 8001df6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dfa:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001dfe:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e02:	d03b      	beq.n	8001e7c <HAL_GPIO_Init+0x17c>
 8001e04:	4d24      	ldr	r5, [pc, #144]	; (8001e98 <HAL_GPIO_Init+0x198>)
 8001e06:	42a8      	cmp	r0, r5
 8001e08:	d03a      	beq.n	8001e80 <HAL_GPIO_Init+0x180>
 8001e0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e0e:	42a8      	cmp	r0, r5
 8001e10:	d038      	beq.n	8001e84 <HAL_GPIO_Init+0x184>
 8001e12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e16:	42a8      	cmp	r0, r5
 8001e18:	d036      	beq.n	8001e88 <HAL_GPIO_Init+0x188>
 8001e1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e1e:	42a8      	cmp	r0, r5
 8001e20:	d034      	beq.n	8001e8c <HAL_GPIO_Init+0x18c>
 8001e22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e26:	42a8      	cmp	r0, r5
 8001e28:	d032      	beq.n	8001e90 <HAL_GPIO_Init+0x190>
 8001e2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e2e:	42a8      	cmp	r0, r5
 8001e30:	bf14      	ite	ne
 8001e32:	2507      	movne	r5, #7
 8001e34:	2506      	moveq	r5, #6
 8001e36:	fa05 f50c 	lsl.w	r5, r5, ip
 8001e3a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e3e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001e40:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001e42:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e44:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001e48:	bf0c      	ite	eq
 8001e4a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001e4c:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8001e4e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001e50:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e52:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001e56:	bf0c      	ite	eq
 8001e58:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001e5a:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8001e5c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001e5e:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e60:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001e64:	bf0c      	ite	eq
 8001e66:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001e68:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8001e6a:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001e6c:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e6e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001e70:	bf54      	ite	pl
 8001e72:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001e74:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8001e76:	60d5      	str	r5, [r2, #12]
    position++;
 8001e78:	3301      	adds	r3, #1
 8001e7a:	e749      	b.n	8001d10 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e7c:	2500      	movs	r5, #0
 8001e7e:	e7da      	b.n	8001e36 <HAL_GPIO_Init+0x136>
 8001e80:	2501      	movs	r5, #1
 8001e82:	e7d8      	b.n	8001e36 <HAL_GPIO_Init+0x136>
 8001e84:	2502      	movs	r5, #2
 8001e86:	e7d6      	b.n	8001e36 <HAL_GPIO_Init+0x136>
 8001e88:	2503      	movs	r5, #3
 8001e8a:	e7d4      	b.n	8001e36 <HAL_GPIO_Init+0x136>
 8001e8c:	2504      	movs	r5, #4
 8001e8e:	e7d2      	b.n	8001e36 <HAL_GPIO_Init+0x136>
 8001e90:	2505      	movs	r5, #5
 8001e92:	e7d0      	b.n	8001e36 <HAL_GPIO_Init+0x136>
 8001e94:	40010400 	.word	0x40010400
 8001e98:	48000400 	.word	0x48000400
 8001e9c:	40021000 	.word	0x40021000

08001ea0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea0:	b10a      	cbz	r2, 8001ea6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ea2:	6181      	str	r1, [r0, #24]
 8001ea4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ea6:	6281      	str	r1, [r0, #40]	; 0x28
 8001ea8:	4770      	bx	lr
	...

08001eac <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eac:	6803      	ldr	r3, [r0, #0]
{
 8001eae:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb2:	07df      	lsls	r7, r3, #31
{
 8001eb4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb6:	d411      	bmi.n	8001edc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb8:	682b      	ldr	r3, [r5, #0]
 8001eba:	079e      	lsls	r6, r3, #30
 8001ebc:	f100 808b 	bmi.w	8001fd6 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec0:	682b      	ldr	r3, [r5, #0]
 8001ec2:	071c      	lsls	r4, r3, #28
 8001ec4:	f100 80fe 	bmi.w	80020c4 <HAL_RCC_OscConfig+0x218>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec8:	682b      	ldr	r3, [r5, #0]
 8001eca:	0758      	lsls	r0, r3, #29
 8001ecc:	f100 8147 	bmi.w	800215e <HAL_RCC_OscConfig+0x2b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed0:	69aa      	ldr	r2, [r5, #24]
 8001ed2:	2a00      	cmp	r2, #0
 8001ed4:	f040 81dd 	bne.w	8002292 <HAL_RCC_OscConfig+0x3e6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001ed8:	2000      	movs	r0, #0
 8001eda:	e024      	b.n	8001f26 <HAL_RCC_OscConfig+0x7a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001edc:	4cbd      	ldr	r4, [pc, #756]	; (80021d4 <HAL_RCC_OscConfig+0x328>)
 8001ede:	6863      	ldr	r3, [r4, #4]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d00a      	beq.n	8001efe <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ee8:	6863      	ldr	r3, [r4, #4]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d11c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x80>
 8001ef2:	6863      	ldr	r3, [r4, #4]
 8001ef4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efc:	d116      	bne.n	8001f2c <HAL_RCC_OscConfig+0x80>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f02:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f06:	6821      	ldr	r1, [r4, #0]
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	fab3 f383 	clz	r3, r3
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	2201      	movs	r2, #1
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	420b      	tst	r3, r1
 8001f1c:	d0cc      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xc>
 8001f1e:	686b      	ldr	r3, [r5, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1c9      	bne.n	8001eb8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001f24:	2001      	movs	r0, #1
}
 8001f26:	b002      	add	sp, #8
 8001f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2c:	686b      	ldr	r3, [r5, #4]
 8001f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f32:	d11e      	bne.n	8001f72 <HAL_RCC_OscConfig+0xc6>
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f3c:	f7fe ffd4 	bl	8000ee8 <HAL_GetTick>
 8001f40:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001f44:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	2701      	movs	r7, #1
 8001f48:	fa96 f3a6 	rbit	r3, r6
 8001f4c:	6822      	ldr	r2, [r4, #0]
 8001f4e:	fa96 f3a6 	rbit	r3, r6
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	fa07 f303 	lsl.w	r3, r7, r3
 8001f5e:	4213      	tst	r3, r2
 8001f60:	d1aa      	bne.n	8001eb8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f62:	f7fe ffc1 	bl	8000ee8 <HAL_GetTick>
 8001f66:	eba0 0008 	sub.w	r0, r0, r8
 8001f6a:	2864      	cmp	r0, #100	; 0x64
 8001f6c:	d9ec      	bls.n	8001f48 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 8001f6e:	2003      	movs	r0, #3
 8001f70:	e7d9      	b.n	8001f26 <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f72:	bb0b      	cbnz	r3, 8001fb8 <HAL_RCC_OscConfig+0x10c>
 8001f74:	6823      	ldr	r3, [r4, #0]
 8001f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7a:	6023      	str	r3, [r4, #0]
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f82:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f84:	f7fe ffb0 	bl	8000ee8 <HAL_GetTick>
 8001f88:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001f8c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	2701      	movs	r7, #1
 8001f90:	fa96 f3a6 	rbit	r3, r6
 8001f94:	6822      	ldr	r2, [r4, #0]
 8001f96:	fa96 f3a6 	rbit	r3, r6
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	fa07 f303 	lsl.w	r3, r7, r3
 8001fa6:	4213      	tst	r3, r2
 8001fa8:	d086      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001faa:	f7fe ff9d 	bl	8000ee8 <HAL_GetTick>
 8001fae:	eba0 0008 	sub.w	r0, r0, r8
 8001fb2:	2864      	cmp	r0, #100	; 0x64
 8001fb4:	d9ec      	bls.n	8001f90 <HAL_RCC_OscConfig+0xe4>
 8001fb6:	e7da      	b.n	8001f6e <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	d103      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x11c>
 8001fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc4:	6023      	str	r3, [r4, #0]
 8001fc6:	e7b5      	b.n	8001f34 <HAL_RCC_OscConfig+0x88>
 8001fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fcc:	6023      	str	r3, [r4, #0]
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd4:	e7b1      	b.n	8001f3a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fd6:	4c7f      	ldr	r4, [pc, #508]	; (80021d4 <HAL_RCC_OscConfig+0x328>)
 8001fd8:	6863      	ldr	r3, [r4, #4]
 8001fda:	f013 0f0c 	tst.w	r3, #12
 8001fde:	d00a      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x14a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fe0:	6863      	ldr	r3, [r4, #4]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d124      	bne.n	8002034 <HAL_RCC_OscConfig+0x188>
 8001fea:	6863      	ldr	r3, [r4, #4]
 8001fec:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ff4:	d11e      	bne.n	8002034 <HAL_RCC_OscConfig+0x188>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffc:	6821      	ldr	r1, [r4, #0]
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	2201      	movs	r2, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	420b      	tst	r3, r1
 8002012:	d002      	beq.n	800201a <HAL_RCC_OscConfig+0x16e>
 8002014:	68eb      	ldr	r3, [r5, #12]
 8002016:	4293      	cmp	r3, r2
 8002018:	d184      	bne.n	8001f24 <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201a:	6821      	ldr	r1, [r4, #0]
 800201c:	23f8      	movs	r3, #248	; 0xf8
 800201e:	fa93 f3a3 	rbit	r3, r3
 8002022:	fab3 f283 	clz	r2, r3
 8002026:	692b      	ldr	r3, [r5, #16]
 8002028:	4093      	lsls	r3, r2
 800202a:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800202e:	4313      	orrs	r3, r2
 8002030:	6023      	str	r3, [r4, #0]
 8002032:	e745      	b.n	8001ec0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002034:	68ea      	ldr	r2, [r5, #12]
 8002036:	2601      	movs	r6, #1
 8002038:	b30a      	cbz	r2, 800207e <HAL_RCC_OscConfig+0x1d2>
 800203a:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002046:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	2702      	movs	r7, #2
 800204e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8002050:	f7fe ff4a 	bl	8000ee8 <HAL_GetTick>
 8002054:	4680      	mov	r8, r0
 8002056:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205a:	6822      	ldr	r2, [r4, #0]
 800205c:	fa97 f3a7 	rbit	r3, r7
 8002060:	fab3 f383 	clz	r3, r3
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	fa06 f303 	lsl.w	r3, r6, r3
 800206c:	4213      	tst	r3, r2
 800206e:	d1d4      	bne.n	800201a <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002070:	f7fe ff3a 	bl	8000ee8 <HAL_GetTick>
 8002074:	eba0 0008 	sub.w	r0, r0, r8
 8002078:	2802      	cmp	r0, #2
 800207a:	d9ec      	bls.n	8002056 <HAL_RCC_OscConfig+0x1aa>
 800207c:	e777      	b.n	8001f6e <HAL_RCC_OscConfig+0xc2>
 800207e:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800208a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	2702      	movs	r7, #2
 8002092:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002094:	f7fe ff28 	bl	8000ee8 <HAL_GetTick>
 8002098:	4680      	mov	r8, r0
 800209a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209e:	6822      	ldr	r2, [r4, #0]
 80020a0:	fa97 f3a7 	rbit	r3, r7
 80020a4:	fab3 f383 	clz	r3, r3
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	fa06 f303 	lsl.w	r3, r6, r3
 80020b0:	4213      	tst	r3, r2
 80020b2:	f43f af05 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b6:	f7fe ff17 	bl	8000ee8 <HAL_GetTick>
 80020ba:	eba0 0008 	sub.w	r0, r0, r8
 80020be:	2802      	cmp	r0, #2
 80020c0:	d9eb      	bls.n	800209a <HAL_RCC_OscConfig+0x1ee>
 80020c2:	e754      	b.n	8001f6e <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c4:	696a      	ldr	r2, [r5, #20]
 80020c6:	4e43      	ldr	r6, [pc, #268]	; (80021d4 <HAL_RCC_OscConfig+0x328>)
 80020c8:	4943      	ldr	r1, [pc, #268]	; (80021d8 <HAL_RCC_OscConfig+0x32c>)
 80020ca:	2401      	movs	r4, #1
 80020cc:	b31a      	cbz	r2, 8002116 <HAL_RCC_OscConfig+0x26a>
 80020ce:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	440b      	add	r3, r1
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	2702      	movs	r7, #2
 80020dc:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80020de:	f7fe ff03 	bl	8000ee8 <HAL_GetTick>
 80020e2:	4680      	mov	r8, r0
 80020e4:	fa97 f3a7 	rbit	r3, r7
 80020e8:	fa97 f3a7 	rbit	r3, r7
 80020ec:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80020f2:	fa97 f3a7 	rbit	r3, r7
 80020f6:	fab3 f383 	clz	r3, r3
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	fa04 f303 	lsl.w	r3, r4, r3
 8002102:	4213      	tst	r3, r2
 8002104:	f47f aee0 	bne.w	8001ec8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002108:	f7fe feee 	bl	8000ee8 <HAL_GetTick>
 800210c:	eba0 0008 	sub.w	r0, r0, r8
 8002110:	2802      	cmp	r0, #2
 8002112:	d9e7      	bls.n	80020e4 <HAL_RCC_OscConfig+0x238>
 8002114:	e72b      	b.n	8001f6e <HAL_RCC_OscConfig+0xc2>
 8002116:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	440b      	add	r3, r1
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	2702      	movs	r7, #2
 8002124:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002126:	f7fe fedf 	bl	8000ee8 <HAL_GetTick>
 800212a:	4680      	mov	r8, r0
 800212c:	fa97 f3a7 	rbit	r3, r7
 8002130:	fa97 f3a7 	rbit	r3, r7
 8002134:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002138:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800213a:	fa97 f3a7 	rbit	r3, r7
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	fa04 f303 	lsl.w	r3, r4, r3
 800214a:	4213      	tst	r3, r2
 800214c:	f43f aebc 	beq.w	8001ec8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002150:	f7fe feca 	bl	8000ee8 <HAL_GetTick>
 8002154:	eba0 0008 	sub.w	r0, r0, r8
 8002158:	2802      	cmp	r0, #2
 800215a:	d9e7      	bls.n	800212c <HAL_RCC_OscConfig+0x280>
 800215c:	e707      	b.n	8001f6e <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215e:	4c1d      	ldr	r4, [pc, #116]	; (80021d4 <HAL_RCC_OscConfig+0x328>)
 8002160:	69e3      	ldr	r3, [r4, #28]
 8002162:	00d9      	lsls	r1, r3, #3
 8002164:	d434      	bmi.n	80021d0 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	69e3      	ldr	r3, [r4, #28]
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216c:	61e3      	str	r3, [r4, #28]
 800216e:	69e3      	ldr	r3, [r4, #28]
 8002170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002178:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217a:	4f18      	ldr	r7, [pc, #96]	; (80021dc <HAL_RCC_OscConfig+0x330>)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	05da      	lsls	r2, r3, #23
 8002180:	d52e      	bpl.n	80021e0 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002182:	68ab      	ldr	r3, [r5, #8]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d13c      	bne.n	8002202 <HAL_RCC_OscConfig+0x356>
 8002188:	6a23      	ldr	r3, [r4, #32]
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002190:	f7fe feaa 	bl	8000ee8 <HAL_GetTick>
 8002194:	2702      	movs	r7, #2
 8002196:	4682      	mov	sl, r0
 8002198:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219a:	f04f 0801 	mov.w	r8, #1
 800219e:	fa97 f3a7 	rbit	r3, r7
 80021a2:	fa97 f3a7 	rbit	r3, r7
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d06b      	beq.n	8002282 <HAL_RCC_OscConfig+0x3d6>
 80021aa:	6a22      	ldr	r2, [r4, #32]
 80021ac:	fa99 f3a9 	rbit	r3, r9
 80021b0:	fab3 f383 	clz	r3, r3
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	fa08 f303 	lsl.w	r3, r8, r3
 80021bc:	4213      	tst	r3, r2
 80021be:	d057      	beq.n	8002270 <HAL_RCC_OscConfig+0x3c4>
    if(pwrclkchanged == SET)
 80021c0:	2e00      	cmp	r6, #0
 80021c2:	f43f ae85 	beq.w	8001ed0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c6:	69e3      	ldr	r3, [r4, #28]
 80021c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021cc:	61e3      	str	r3, [r4, #28]
 80021ce:	e67f      	b.n	8001ed0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80021d0:	2600      	movs	r6, #0
 80021d2:	e7d2      	b.n	800217a <HAL_RCC_OscConfig+0x2ce>
 80021d4:	40021000 	.word	0x40021000
 80021d8:	10908120 	.word	0x10908120
 80021dc:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80021e8:	f7fe fe7e 	bl	8000ee8 <HAL_GetTick>
 80021ec:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	05db      	lsls	r3, r3, #23
 80021f2:	d4c6      	bmi.n	8002182 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f4:	f7fe fe78 	bl	8000ee8 <HAL_GetTick>
 80021f8:	eba0 0008 	sub.w	r0, r0, r8
 80021fc:	2864      	cmp	r0, #100	; 0x64
 80021fe:	d9f6      	bls.n	80021ee <HAL_RCC_OscConfig+0x342>
 8002200:	e6b5      	b.n	8001f6e <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002202:	bb3b      	cbnz	r3, 8002254 <HAL_RCC_OscConfig+0x3a8>
 8002204:	6a23      	ldr	r3, [r4, #32]
 8002206:	f023 0301 	bic.w	r3, r3, #1
 800220a:	6223      	str	r3, [r4, #32]
 800220c:	6a23      	ldr	r3, [r4, #32]
 800220e:	f023 0304 	bic.w	r3, r3, #4
 8002212:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002214:	f7fe fe68 	bl	8000ee8 <HAL_GetTick>
 8002218:	2702      	movs	r7, #2
 800221a:	4682      	mov	sl, r0
 800221c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221e:	f04f 0801 	mov.w	r8, #1
 8002222:	fa97 f3a7 	rbit	r3, r7
 8002226:	fa97 f3a7 	rbit	r3, r7
 800222a:	b373      	cbz	r3, 800228a <HAL_RCC_OscConfig+0x3de>
 800222c:	6a22      	ldr	r2, [r4, #32]
 800222e:	fa99 f3a9 	rbit	r3, r9
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	fa08 f303 	lsl.w	r3, r8, r3
 800223e:	4213      	tst	r3, r2
 8002240:	d0be      	beq.n	80021c0 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002242:	f7fe fe51 	bl	8000ee8 <HAL_GetTick>
 8002246:	f241 3388 	movw	r3, #5000	; 0x1388
 800224a:	eba0 000a 	sub.w	r0, r0, sl
 800224e:	4298      	cmp	r0, r3
 8002250:	d9e7      	bls.n	8002222 <HAL_RCC_OscConfig+0x376>
 8002252:	e68c      	b.n	8001f6e <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002254:	2b05      	cmp	r3, #5
 8002256:	6a23      	ldr	r3, [r4, #32]
 8002258:	d103      	bne.n	8002262 <HAL_RCC_OscConfig+0x3b6>
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	6223      	str	r3, [r4, #32]
 8002260:	e792      	b.n	8002188 <HAL_RCC_OscConfig+0x2dc>
 8002262:	f023 0301 	bic.w	r3, r3, #1
 8002266:	6223      	str	r3, [r4, #32]
 8002268:	6a23      	ldr	r3, [r4, #32]
 800226a:	f023 0304 	bic.w	r3, r3, #4
 800226e:	e78e      	b.n	800218e <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7fe fe3a 	bl	8000ee8 <HAL_GetTick>
 8002274:	f241 3388 	movw	r3, #5000	; 0x1388
 8002278:	eba0 000a 	sub.w	r0, r0, sl
 800227c:	4298      	cmp	r0, r3
 800227e:	d98e      	bls.n	800219e <HAL_RCC_OscConfig+0x2f2>
 8002280:	e675      	b.n	8001f6e <HAL_RCC_OscConfig+0xc2>
 8002282:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002286:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002288:	e790      	b.n	80021ac <HAL_RCC_OscConfig+0x300>
 800228a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002290:	e7cd      	b.n	800222e <HAL_RCC_OscConfig+0x382>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002292:	4c44      	ldr	r4, [pc, #272]	; (80023a4 <HAL_RCC_OscConfig+0x4f8>)
 8002294:	6863      	ldr	r3, [r4, #4]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b08      	cmp	r3, #8
 800229c:	f43f ae42 	beq.w	8001f24 <HAL_RCC_OscConfig+0x78>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a0:	2a02      	cmp	r2, #2
 80022a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022a6:	d158      	bne.n	800235a <HAL_RCC_OscConfig+0x4ae>
 80022a8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022be:	f7fe fe13 	bl	8000ee8 <HAL_GetTick>
 80022c2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80022c6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c8:	2601      	movs	r6, #1
 80022ca:	fa97 f3a7 	rbit	r3, r7
 80022ce:	6822      	ldr	r2, [r4, #0]
 80022d0:	fa97 f3a7 	rbit	r3, r7
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	fa06 f303 	lsl.w	r3, r6, r3
 80022e0:	4213      	tst	r3, r2
 80022e2:	d133      	bne.n	800234c <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80022e6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80022e8:	f023 030f 	bic.w	r3, r3, #15
 80022ec:	4313      	orrs	r3, r2
 80022ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80022f0:	6862      	ldr	r2, [r4, #4]
 80022f2:	6a2b      	ldr	r3, [r5, #32]
 80022f4:	69e9      	ldr	r1, [r5, #28]
 80022f6:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 80022fa:	430b      	orrs	r3, r1
 80022fc:	4313      	orrs	r3, r2
 80022fe:	6063      	str	r3, [r4, #4]
 8002300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002304:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002310:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800231a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800231c:	f7fe fde4 	bl	8000ee8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002320:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8002322:	4607      	mov	r7, r0
 8002324:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002328:	6822      	ldr	r2, [r4, #0]
 800232a:	fa95 f3a5 	rbit	r3, r5
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	fa06 f303 	lsl.w	r3, r6, r3
 800233a:	4213      	tst	r3, r2
 800233c:	f47f adcc 	bne.w	8001ed8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002340:	f7fe fdd2 	bl	8000ee8 <HAL_GetTick>
 8002344:	1bc0      	subs	r0, r0, r7
 8002346:	2802      	cmp	r0, #2
 8002348:	d9ec      	bls.n	8002324 <HAL_RCC_OscConfig+0x478>
 800234a:	e610      	b.n	8001f6e <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe fdcc 	bl	8000ee8 <HAL_GetTick>
 8002350:	eba0 0008 	sub.w	r0, r0, r8
 8002354:	2802      	cmp	r0, #2
 8002356:	d9b8      	bls.n	80022ca <HAL_RCC_OscConfig+0x41e>
 8002358:	e609      	b.n	8001f6e <HAL_RCC_OscConfig+0xc2>
 800235a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002366:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002370:	f7fe fdba 	bl	8000ee8 <HAL_GetTick>
 8002374:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8002378:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237a:	2601      	movs	r6, #1
 800237c:	fa95 f3a5 	rbit	r3, r5
 8002380:	6822      	ldr	r2, [r4, #0]
 8002382:	fa95 f3a5 	rbit	r3, r5
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	fa06 f303 	lsl.w	r3, r6, r3
 8002392:	4213      	tst	r3, r2
 8002394:	f43f ada0 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002398:	f7fe fda6 	bl	8000ee8 <HAL_GetTick>
 800239c:	1bc0      	subs	r0, r0, r7
 800239e:	2802      	cmp	r0, #2
 80023a0:	d9ec      	bls.n	800237c <HAL_RCC_OscConfig+0x4d0>
 80023a2:	e5e4      	b.n	8001f6e <HAL_RCC_OscConfig+0xc2>
 80023a4:	40021000 	.word	0x40021000

080023a8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80023a8:	4911      	ldr	r1, [pc, #68]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x48>)
 80023aa:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023ac:	f003 020c 	and.w	r2, r3, #12
 80023b0:	2a08      	cmp	r2, #8
 80023b2:	d11a      	bne.n	80023ea <HAL_RCC_GetSysClockFreq+0x42>
 80023b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023b8:	fa92 f2a2 	rbit	r2, r2
 80023bc:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023be:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80023c2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80023c4:	fa90 f0a0 	rbit	r0, r0
 80023c8:	fab0 f080 	clz	r0, r0
 80023cc:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023d4:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80023d6:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023d8:	4a06      	ldr	r2, [pc, #24]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80023da:	4807      	ldr	r0, [pc, #28]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x50>)
 80023dc:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80023de:	4807      	ldr	r0, [pc, #28]	; (80023fc <HAL_RCC_GetSysClockFreq+0x54>)
 80023e0:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023e4:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80023e6:	4348      	muls	r0, r1
 80023e8:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80023ea:	4804      	ldr	r0, [pc, #16]	; (80023fc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	08002cd4 	.word	0x08002cd4
 80023f8:	08002ce4 	.word	0x08002ce4
 80023fc:	007a1200 	.word	0x007a1200

08002400 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002400:	4a5c      	ldr	r2, [pc, #368]	; (8002574 <HAL_RCC_ClockConfig+0x174>)
 8002402:	6813      	ldr	r3, [r2, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	428b      	cmp	r3, r1
{
 800240a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800240e:	4606      	mov	r6, r0
 8002410:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002412:	d330      	bcc.n	8002476 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	6832      	ldr	r2, [r6, #0]
 8002416:	0791      	lsls	r1, r2, #30
 8002418:	d43a      	bmi.n	8002490 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241a:	07d2      	lsls	r2, r2, #31
 800241c:	d440      	bmi.n	80024a0 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800241e:	4a55      	ldr	r2, [pc, #340]	; (8002574 <HAL_RCC_ClockConfig+0x174>)
 8002420:	6813      	ldr	r3, [r2, #0]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	429d      	cmp	r5, r3
 8002428:	f0c0 8092 	bcc.w	8002550 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242c:	6832      	ldr	r2, [r6, #0]
 800242e:	4c52      	ldr	r4, [pc, #328]	; (8002578 <HAL_RCC_ClockConfig+0x178>)
 8002430:	f012 0f04 	tst.w	r2, #4
 8002434:	f040 8097 	bne.w	8002566 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002438:	0713      	lsls	r3, r2, #28
 800243a:	d506      	bpl.n	800244a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800243c:	6863      	ldr	r3, [r4, #4]
 800243e:	6932      	ldr	r2, [r6, #16]
 8002440:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002444:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002448:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800244a:	f7ff ffad 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 800244e:	6863      	ldr	r3, [r4, #4]
 8002450:	22f0      	movs	r2, #240	; 0xf0
 8002452:	fa92 f2a2 	rbit	r2, r2
 8002456:	fab2 f282 	clz	r2, r2
 800245a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800245e:	40d3      	lsrs	r3, r2
 8002460:	4a46      	ldr	r2, [pc, #280]	; (800257c <HAL_RCC_ClockConfig+0x17c>)
 8002462:	5cd3      	ldrb	r3, [r2, r3]
 8002464:	40d8      	lsrs	r0, r3
 8002466:	4b46      	ldr	r3, [pc, #280]	; (8002580 <HAL_RCC_ClockConfig+0x180>)
 8002468:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800246a:	2000      	movs	r0, #0
 800246c:	f7fe fd0e 	bl	8000e8c <HAL_InitTick>
  return HAL_OK;
 8002470:	2000      	movs	r0, #0
}
 8002472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	6813      	ldr	r3, [r2, #0]
 8002478:	f023 0307 	bic.w	r3, r3, #7
 800247c:	430b      	orrs	r3, r1
 800247e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002480:	6813      	ldr	r3, [r2, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	4299      	cmp	r1, r3
 8002488:	d0c4      	beq.n	8002414 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800248a:	2001      	movs	r0, #1
 800248c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002490:	4939      	ldr	r1, [pc, #228]	; (8002578 <HAL_RCC_ClockConfig+0x178>)
 8002492:	68b0      	ldr	r0, [r6, #8]
 8002494:	684b      	ldr	r3, [r1, #4]
 8002496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800249a:	4303      	orrs	r3, r0
 800249c:	604b      	str	r3, [r1, #4]
 800249e:	e7bc      	b.n	800241a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a0:	6872      	ldr	r2, [r6, #4]
 80024a2:	4c35      	ldr	r4, [pc, #212]	; (8002578 <HAL_RCC_ClockConfig+0x178>)
 80024a4:	2a01      	cmp	r2, #1
 80024a6:	d128      	bne.n	80024fa <HAL_RCC_ClockConfig+0xfa>
 80024a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ac:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b0:	6821      	ldr	r1, [r4, #0]
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c4:	d0e1      	beq.n	800248a <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c6:	6863      	ldr	r3, [r4, #4]
 80024c8:	f023 0303 	bic.w	r3, r3, #3
 80024cc:	431a      	orrs	r2, r3
 80024ce:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 80024d0:	f7fe fd0a 	bl	8000ee8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d4:	6873      	ldr	r3, [r6, #4]
 80024d6:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80024d8:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024da:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024de:	d11f      	bne.n	8002520 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024e0:	6863      	ldr	r3, [r4, #4]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d099      	beq.n	800241e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ea:	f7fe fcfd 	bl	8000ee8 <HAL_GetTick>
 80024ee:	1bc0      	subs	r0, r0, r7
 80024f0:	4540      	cmp	r0, r8
 80024f2:	d9f5      	bls.n	80024e0 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 80024f4:	2003      	movs	r0, #3
 80024f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024fa:	2a02      	cmp	r2, #2
 80024fc:	bf0c      	ite	eq
 80024fe:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8002502:	2302      	movne	r3, #2
 8002504:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002508:	6820      	ldr	r0, [r4, #0]
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	2101      	movs	r1, #1
 8002518:	fa01 f303 	lsl.w	r3, r1, r3
 800251c:	4203      	tst	r3, r0
 800251e:	e7d1      	b.n	80024c4 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002520:	2b02      	cmp	r3, #2
 8002522:	d110      	bne.n	8002546 <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002524:	6863      	ldr	r3, [r4, #4]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b08      	cmp	r3, #8
 800252c:	f43f af77 	beq.w	800241e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002530:	f7fe fcda 	bl	8000ee8 <HAL_GetTick>
 8002534:	1bc0      	subs	r0, r0, r7
 8002536:	4540      	cmp	r0, r8
 8002538:	d9f4      	bls.n	8002524 <HAL_RCC_ClockConfig+0x124>
 800253a:	e7db      	b.n	80024f4 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253c:	f7fe fcd4 	bl	8000ee8 <HAL_GetTick>
 8002540:	1bc0      	subs	r0, r0, r7
 8002542:	4540      	cmp	r0, r8
 8002544:	d8d6      	bhi.n	80024f4 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002546:	6863      	ldr	r3, [r4, #4]
 8002548:	f013 0f0c 	tst.w	r3, #12
 800254c:	d1f6      	bne.n	800253c <HAL_RCC_ClockConfig+0x13c>
 800254e:	e766      	b.n	800241e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002550:	6813      	ldr	r3, [r2, #0]
 8002552:	f023 0307 	bic.w	r3, r3, #7
 8002556:	432b      	orrs	r3, r5
 8002558:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800255a:	6813      	ldr	r3, [r2, #0]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	429d      	cmp	r5, r3
 8002562:	d192      	bne.n	800248a <HAL_RCC_ClockConfig+0x8a>
 8002564:	e762      	b.n	800242c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002566:	6863      	ldr	r3, [r4, #4]
 8002568:	68f1      	ldr	r1, [r6, #12]
 800256a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800256e:	430b      	orrs	r3, r1
 8002570:	6063      	str	r3, [r4, #4]
 8002572:	e761      	b.n	8002438 <HAL_RCC_ClockConfig+0x38>
 8002574:	40022000 	.word	0x40022000
 8002578:	40021000 	.word	0x40021000
 800257c:	08002cbc 	.word	0x08002cbc
 8002580:	20000000 	.word	0x20000000

08002584 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002584:	4b01      	ldr	r3, [pc, #4]	; (800258c <HAL_RCC_GetHCLKFreq+0x8>)
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	20000000 	.word	0x20000000

08002590 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002592:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	fa92 f2a2 	rbit	r2, r2
 800259c:	fab2 f282 	clz	r2, r2
 80025a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025a4:	40d3      	lsrs	r3, r2
 80025a6:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025a8:	5cd3      	ldrb	r3, [r2, r3]
 80025aa:	4a04      	ldr	r2, [pc, #16]	; (80025bc <HAL_RCC_GetPCLK1Freq+0x2c>)
 80025ac:	6810      	ldr	r0, [r2, #0]
}    
 80025ae:	40d8      	lsrs	r0, r3
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	08002ccc 	.word	0x08002ccc
 80025bc:	20000000 	.word	0x20000000

080025c0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80025c0:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025c2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	fa92 f2a2 	rbit	r2, r2
 80025cc:	fab2 f282 	clz	r2, r2
 80025d0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80025d4:	40d3      	lsrs	r3, r2
 80025d6:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025d8:	5cd3      	ldrb	r3, [r2, r3]
 80025da:	4a04      	ldr	r2, [pc, #16]	; (80025ec <HAL_RCC_GetPCLK2Freq+0x2c>)
 80025dc:	6810      	ldr	r0, [r2, #0]
} 
 80025de:	40d8      	lsrs	r0, r3
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
 80025e8:	08002ccc 	.word	0x08002ccc
 80025ec:	20000000 	.word	0x20000000

080025f0 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025f0:	6803      	ldr	r3, [r0, #0]
{
 80025f2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025f6:	03df      	lsls	r7, r3, #15
{
 80025f8:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025fa:	d523      	bpl.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fc:	4d9b      	ldr	r5, [pc, #620]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80025fe:	69eb      	ldr	r3, [r5, #28]
 8002600:	00de      	lsls	r6, r3, #3
 8002602:	f100 80d7 	bmi.w	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	69eb      	ldr	r3, [r5, #28]
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260c:	61eb      	str	r3, [r5, #28]
 800260e:	69eb      	ldr	r3, [r5, #28]
 8002610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002618:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261a:	4f95      	ldr	r7, [pc, #596]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	05d8      	lsls	r0, r3, #23
 8002620:	f140 80ca 	bpl.w	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002624:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002626:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800262a:	f040 80da 	bne.w	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800262e:	6a2b      	ldr	r3, [r5, #32]
 8002630:	6862      	ldr	r2, [r4, #4]
 8002632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002636:	4313      	orrs	r3, r2
 8002638:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800263a:	b11e      	cbz	r6, 8002644 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263c:	69eb      	ldr	r3, [r5, #28]
 800263e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002642:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002644:	6820      	ldr	r0, [r4, #0]
 8002646:	07c3      	lsls	r3, r0, #31
 8002648:	d506      	bpl.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800264a:	4a88      	ldr	r2, [pc, #544]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800264c:	68a1      	ldr	r1, [r4, #8]
 800264e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002650:	f023 0303 	bic.w	r3, r3, #3
 8002654:	430b      	orrs	r3, r1
 8002656:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002658:	0787      	lsls	r7, r0, #30
 800265a:	d506      	bpl.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800265c:	4a83      	ldr	r2, [pc, #524]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800265e:	68e1      	ldr	r1, [r4, #12]
 8002660:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002662:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002666:	430b      	orrs	r3, r1
 8002668:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800266a:	0746      	lsls	r6, r0, #29
 800266c:	d506      	bpl.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800266e:	4a7f      	ldr	r2, [pc, #508]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002670:	6921      	ldr	r1, [r4, #16]
 8002672:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002674:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002678:	430b      	orrs	r3, r1
 800267a:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800267c:	0685      	lsls	r5, r0, #26
 800267e:	d506      	bpl.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002680:	4a7a      	ldr	r2, [pc, #488]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002682:	69e1      	ldr	r1, [r4, #28]
 8002684:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002686:	f023 0310 	bic.w	r3, r3, #16
 800268a:	430b      	orrs	r3, r1
 800268c:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800268e:	0381      	lsls	r1, r0, #14
 8002690:	d506      	bpl.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002692:	4a76      	ldr	r2, [pc, #472]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002694:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002696:	6853      	ldr	r3, [r2, #4]
 8002698:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800269c:	430b      	orrs	r3, r1
 800269e:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026a0:	0642      	lsls	r2, r0, #25
 80026a2:	d506      	bpl.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026a4:	4a71      	ldr	r2, [pc, #452]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80026a6:	6a21      	ldr	r1, [r4, #32]
 80026a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80026aa:	f023 0320 	bic.w	r3, r3, #32
 80026ae:	430b      	orrs	r3, r1
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026b2:	0343      	lsls	r3, r0, #13
 80026b4:	d506      	bpl.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026b6:	4a6d      	ldr	r2, [pc, #436]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80026b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80026ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80026bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026c0:	430b      	orrs	r3, r1
 80026c2:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026c4:	0707      	lsls	r7, r0, #28
 80026c6:	d506      	bpl.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026c8:	4a68      	ldr	r2, [pc, #416]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80026ca:	6961      	ldr	r1, [r4, #20]
 80026cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80026ce:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80026d2:	430b      	orrs	r3, r1
 80026d4:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026d6:	06c6      	lsls	r6, r0, #27
 80026d8:	d506      	bpl.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026da:	4a64      	ldr	r2, [pc, #400]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80026dc:	69a1      	ldr	r1, [r4, #24]
 80026de:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80026e0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026e8:	0585      	lsls	r5, r0, #22
 80026ea:	d506      	bpl.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026ec:	4a5f      	ldr	r2, [pc, #380]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80026ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80026f0:	6853      	ldr	r3, [r2, #4]
 80026f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026f6:	430b      	orrs	r3, r1
 80026f8:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026fa:	0601      	lsls	r1, r0, #24
 80026fc:	d506      	bpl.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026fe:	4a5b      	ldr	r2, [pc, #364]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002700:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002702:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002704:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002708:	430b      	orrs	r3, r1
 800270a:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800270c:	05c2      	lsls	r2, r0, #23
 800270e:	d506      	bpl.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002710:	4a56      	ldr	r2, [pc, #344]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002712:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002714:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002716:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 800271a:	430b      	orrs	r3, r1
 800271c:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800271e:	04c3      	lsls	r3, r0, #19
 8002720:	d506      	bpl.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002722:	4a52      	ldr	r2, [pc, #328]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002726:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800272c:	430b      	orrs	r3, r1
 800272e:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002730:	0487      	lsls	r7, r0, #18
 8002732:	d506      	bpl.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002734:	4a4d      	ldr	r2, [pc, #308]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002736:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002738:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800273a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800273e:	430b      	orrs	r3, r1
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002742:	02c6      	lsls	r6, r0, #11
 8002744:	d506      	bpl.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002746:	4a49      	ldr	r2, [pc, #292]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002748:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800274a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800274c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002750:	430b      	orrs	r3, r1
 8002752:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002754:	0285      	lsls	r5, r0, #10
 8002756:	d506      	bpl.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002758:	4a44      	ldr	r2, [pc, #272]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800275a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800275c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800275e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002762:	430b      	orrs	r3, r1
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002766:	0241      	lsls	r1, r0, #9
 8002768:	d506      	bpl.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800276a:	4a40      	ldr	r2, [pc, #256]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800276c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800276e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002770:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002774:	430b      	orrs	r3, r1
 8002776:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002778:	0202      	lsls	r2, r0, #8
 800277a:	d506      	bpl.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800277c:	4a3b      	ldr	r2, [pc, #236]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800277e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002780:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002782:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002786:	430b      	orrs	r3, r1
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800278a:	01c3      	lsls	r3, r0, #7
 800278c:	d506      	bpl.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800278e:	4a37      	ldr	r2, [pc, #220]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002790:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002792:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002794:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002798:	430b      	orrs	r3, r1
 800279a:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800279c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80027a0:	d01c      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80027a2:	4a32      	ldr	r2, [pc, #200]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80027a4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80027a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80027a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80027ac:	430b      	orrs	r3, r1
 80027ae:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027b0:	2000      	movs	r0, #0
 80027b2:	e013      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 80027b4:	2600      	movs	r6, #0
 80027b6:	e730      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027be:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80027c0:	f7fe fb92 	bl	8000ee8 <HAL_GetTick>
 80027c4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	05d9      	lsls	r1, r3, #23
 80027ca:	f53f af2b 	bmi.w	8002624 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ce:	f7fe fb8b 	bl	8000ee8 <HAL_GetTick>
 80027d2:	eba0 0008 	sub.w	r0, r0, r8
 80027d6:	2864      	cmp	r0, #100	; 0x64
 80027d8:	d9f5      	bls.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 80027da:	2003      	movs	r0, #3
}
 80027dc:	b002      	add	sp, #8
 80027de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027e2:	6862      	ldr	r2, [r4, #4]
 80027e4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80027e8:	4293      	cmp	r3, r2
 80027ea:	f43f af20 	beq.w	800262e <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027ee:	6a29      	ldr	r1, [r5, #32]
 80027f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027f4:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80027f8:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80027fc:	f8df e074 	ldr.w	lr, [pc, #116]	; 8002874 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8002800:	fab2 f282 	clz	r2, r2
 8002804:	4472      	add	r2, lr
 8002806:	0092      	lsls	r2, r2, #2
 8002808:	2701      	movs	r7, #1
 800280a:	6017      	str	r7, [r2, #0]
 800280c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	4473      	add	r3, lr
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800281c:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 800281e:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002820:	f57f af05 	bpl.w	800262e <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8002824:	f7fe fb60 	bl	8000ee8 <HAL_GetTick>
 8002828:	f04f 0802 	mov.w	r8, #2
 800282c:	4682      	mov	sl, r0
 800282e:	46c1      	mov	r9, r8
 8002830:	fa98 f3a8 	rbit	r3, r8
 8002834:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002838:	b1a3      	cbz	r3, 8002864 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800283a:	6a2a      	ldr	r2, [r5, #32]
 800283c:	fa99 f3a9 	rbit	r3, r9
 8002840:	fab3 f383 	clz	r3, r3
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	fa07 f303 	lsl.w	r3, r7, r3
 800284c:	4213      	tst	r3, r2
 800284e:	f47f aeee 	bne.w	800262e <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7fe fb49 	bl	8000ee8 <HAL_GetTick>
 8002856:	f241 3388 	movw	r3, #5000	; 0x1388
 800285a:	eba0 000a 	sub.w	r0, r0, sl
 800285e:	4298      	cmp	r0, r3
 8002860:	d9e6      	bls.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002862:	e7ba      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002864:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002868:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800286a:	e7e7      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800286c:	40021000 	.word	0x40021000
 8002870:	40007000 	.word	0x40007000
 8002874:	10908100 	.word	0x10908100

08002878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002878:	b538      	push	{r3, r4, r5, lr}
 800287a:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800287c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800287e:	6921      	ldr	r1, [r4, #16]
 8002880:	68a2      	ldr	r2, [r4, #8]
 8002882:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002884:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002886:	430a      	orrs	r2, r1
 8002888:	6961      	ldr	r1, [r4, #20]
 800288a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800288c:	4977      	ldr	r1, [pc, #476]	; (8002a6c <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800288e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002890:	4001      	ands	r1, r0
 8002892:	430a      	orrs	r2, r1
 8002894:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002896:	686a      	ldr	r2, [r5, #4]
 8002898:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800289a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800289c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80028a0:	430a      	orrs	r2, r1
 80028a2:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80028a4:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80028a6:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80028a8:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80028ac:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80028ae:	430a      	orrs	r2, r1
 80028b0:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028b2:	4a6f      	ldr	r2, [pc, #444]	; (8002a70 <UART_SetConfig+0x1f8>)
 80028b4:	4295      	cmp	r5, r2
 80028b6:	d112      	bne.n	80028de <UART_SetConfig+0x66>
 80028b8:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80028bc:	496d      	ldr	r1, [pc, #436]	; (8002a74 <UART_SetConfig+0x1fc>)
 80028be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028c0:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028c8:	5c8a      	ldrb	r2, [r1, r2]
 80028ca:	d066      	beq.n	800299a <UART_SetConfig+0x122>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 80028cc:	2a08      	cmp	r2, #8
 80028ce:	d819      	bhi.n	8002904 <UART_SetConfig+0x8c>
 80028d0:	e8df f002 	tbb	[pc, r2]
 80028d4:	189e92c2 	.word	0x189e92c2
 80028d8:	181818a9 	.word	0x181818a9
 80028dc:	ac          	.byte	0xac
 80028dd:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028de:	4a66      	ldr	r2, [pc, #408]	; (8002a78 <UART_SetConfig+0x200>)
 80028e0:	4295      	cmp	r5, r2
 80028e2:	d124      	bne.n	800292e <UART_SetConfig+0xb6>
 80028e4:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80028e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028ea:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80028ee:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80028f2:	f000 80a0 	beq.w	8002a36 <UART_SetConfig+0x1be>
 80028f6:	d807      	bhi.n	8002908 <UART_SetConfig+0x90>
 80028f8:	2a00      	cmp	r2, #0
 80028fa:	f000 80aa 	beq.w	8002a52 <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002902:	d076      	beq.n	80029f2 <UART_SetConfig+0x17a>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002904:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8002906:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002908:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800290c:	f000 8099 	beq.w	8002a42 <UART_SetConfig+0x1ca>
 8002910:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8002914:	d1f3      	bne.n	80028fe <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800291a:	d179      	bne.n	8002a10 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800291c:	6860      	ldr	r0, [r4, #4]
 800291e:	0843      	lsrs	r3, r0, #1
 8002920:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002924:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002928:	fbb3 f3f0 	udiv	r3, r3, r0
 800292c:	e054      	b.n	80029d8 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800292e:	4a53      	ldr	r2, [pc, #332]	; (8002a7c <UART_SetConfig+0x204>)
 8002930:	4295      	cmp	r5, r2
 8002932:	d10e      	bne.n	8002952 <UART_SetConfig+0xda>
 8002934:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8002938:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800293a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800293e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002942:	d078      	beq.n	8002a36 <UART_SetConfig+0x1be>
 8002944:	d9d8      	bls.n	80028f8 <UART_SetConfig+0x80>
 8002946:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 800294a:	d07a      	beq.n	8002a42 <UART_SetConfig+0x1ca>
 800294c:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8002950:	e7e0      	b.n	8002914 <UART_SetConfig+0x9c>
 8002952:	4a4b      	ldr	r2, [pc, #300]	; (8002a80 <UART_SetConfig+0x208>)
 8002954:	4295      	cmp	r5, r2
 8002956:	d10e      	bne.n	8002976 <UART_SetConfig+0xfe>
 8002958:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 800295c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800295e:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8002962:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002966:	d066      	beq.n	8002a36 <UART_SetConfig+0x1be>
 8002968:	d9c6      	bls.n	80028f8 <UART_SetConfig+0x80>
 800296a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800296e:	d068      	beq.n	8002a42 <UART_SetConfig+0x1ca>
 8002970:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002974:	e7ce      	b.n	8002914 <UART_SetConfig+0x9c>
 8002976:	4a43      	ldr	r2, [pc, #268]	; (8002a84 <UART_SetConfig+0x20c>)
 8002978:	4295      	cmp	r5, r2
 800297a:	d1c0      	bne.n	80028fe <UART_SetConfig+0x86>
 800297c:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002980:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002982:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8002986:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800298a:	d054      	beq.n	8002a36 <UART_SetConfig+0x1be>
 800298c:	d9b4      	bls.n	80028f8 <UART_SetConfig+0x80>
 800298e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8002992:	d056      	beq.n	8002a42 <UART_SetConfig+0x1ca>
 8002994:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8002998:	e7bc      	b.n	8002914 <UART_SetConfig+0x9c>
    switch (clocksource)
 800299a:	2a08      	cmp	r2, #8
 800299c:	d829      	bhi.n	80029f2 <UART_SetConfig+0x17a>
 800299e:	a301      	add	r3, pc, #4	; (adr r3, 80029a4 <UART_SetConfig+0x12c>)
 80029a0:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80029a4:	080029c9 	.word	0x080029c9
 80029a8:	080029ed 	.word	0x080029ed
 80029ac:	0800291d 	.word	0x0800291d
 80029b0:	080029f3 	.word	0x080029f3
 80029b4:	08002a3d 	.word	0x08002a3d
 80029b8:	080029f3 	.word	0x080029f3
 80029bc:	080029f3 	.word	0x080029f3
 80029c0:	080029f3 	.word	0x080029f3
 80029c4:	08002a49 	.word	0x08002a49
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80029c8:	f7ff fde2 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029cc:	6861      	ldr	r1, [r4, #4]
 80029ce:	084a      	lsrs	r2, r1, #1
 80029d0:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80029d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80029d8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80029da:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80029dc:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 80029e0:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029e2:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60cb      	str	r3, [r1, #12]
 80029ea:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029ec:	f7ff fde8 	bl	80025c0 <HAL_RCC_GetPCLK2Freq>
 80029f0:	e7ec      	b.n	80029cc <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 80029f2:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e7f1      	b.n	80029dc <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029f8:	f7ff fde2 	bl	80025c0 <HAL_RCC_GetPCLK2Freq>
 80029fc:	6863      	ldr	r3, [r4, #4]
 80029fe:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002a02:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a06:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <UART_SetConfig+0x1f8>)
 8002a08:	b280      	uxth	r0, r0
 8002a0a:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a0c:	2000      	movs	r0, #0
        break;
 8002a0e:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a10:	6862      	ldr	r2, [r4, #4]
 8002a12:	0853      	lsrs	r3, r2, #1
 8002a14:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002a18:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	60eb      	str	r3, [r5, #12]
 8002a24:	e7f2      	b.n	8002a0c <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a26:	f7ff fcbf 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8002a2a:	e017      	b.n	8002a5c <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a2c:	6862      	ldr	r2, [r4, #4]
 8002a2e:	0853      	lsrs	r3, r2, #1
 8002a30:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a34:	e7f2      	b.n	8002a1c <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a3a:	d1f4      	bne.n	8002a26 <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a3c:	f7ff fcb4 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8002a40:	e7c4      	b.n	80029cc <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a46:	d1f1      	bne.n	8002a2c <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002a48:	6860      	ldr	r0, [r4, #4]
 8002a4a:	0843      	lsrs	r3, r0, #1
 8002a4c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002a50:	e76a      	b.n	8002928 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a56:	d0b7      	beq.n	80029c8 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a58:	f7ff fd9a 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a5c:	6863      	ldr	r3, [r4, #4]
 8002a5e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002a62:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a66:	b280      	uxth	r0, r0
 8002a68:	60e8      	str	r0, [r5, #12]
 8002a6a:	e7cf      	b.n	8002a0c <UART_SetConfig+0x194>
 8002a6c:	efff69f3 	.word	0xefff69f3
 8002a70:	40013800 	.word	0x40013800
 8002a74:	08002cf4 	.word	0x08002cf4
 8002a78:	40004400 	.word	0x40004400
 8002a7c:	40004800 	.word	0x40004800
 8002a80:	40004c00 	.word	0x40004c00
 8002a84:	40005000 	.word	0x40005000

08002a88 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a8a:	07da      	lsls	r2, r3, #31
{
 8002a8c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a8e:	d506      	bpl.n	8002a9e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a90:	6801      	ldr	r1, [r0, #0]
 8002a92:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002a94:	684a      	ldr	r2, [r1, #4]
 8002a96:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002a9a:	4322      	orrs	r2, r4
 8002a9c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a9e:	079c      	lsls	r4, r3, #30
 8002aa0:	d506      	bpl.n	8002ab0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002aa2:	6801      	ldr	r1, [r0, #0]
 8002aa4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002aa6:	684a      	ldr	r2, [r1, #4]
 8002aa8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002aac:	4322      	orrs	r2, r4
 8002aae:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ab0:	0759      	lsls	r1, r3, #29
 8002ab2:	d506      	bpl.n	8002ac2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ab4:	6801      	ldr	r1, [r0, #0]
 8002ab6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002ab8:	684a      	ldr	r2, [r1, #4]
 8002aba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002abe:	4322      	orrs	r2, r4
 8002ac0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ac2:	071a      	lsls	r2, r3, #28
 8002ac4:	d506      	bpl.n	8002ad4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ac6:	6801      	ldr	r1, [r0, #0]
 8002ac8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002aca:	684a      	ldr	r2, [r1, #4]
 8002acc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ad0:	4322      	orrs	r2, r4
 8002ad2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ad4:	06dc      	lsls	r4, r3, #27
 8002ad6:	d506      	bpl.n	8002ae6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ad8:	6801      	ldr	r1, [r0, #0]
 8002ada:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002adc:	688a      	ldr	r2, [r1, #8]
 8002ade:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ae2:	4322      	orrs	r2, r4
 8002ae4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ae6:	0699      	lsls	r1, r3, #26
 8002ae8:	d506      	bpl.n	8002af8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002aea:	6801      	ldr	r1, [r0, #0]
 8002aec:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002aee:	688a      	ldr	r2, [r1, #8]
 8002af0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002af4:	4322      	orrs	r2, r4
 8002af6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002af8:	065a      	lsls	r2, r3, #25
 8002afa:	d50f      	bpl.n	8002b1c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002afc:	6801      	ldr	r1, [r0, #0]
 8002afe:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002b00:	684a      	ldr	r2, [r1, #4]
 8002b02:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002b06:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b08:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b0c:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b0e:	d105      	bne.n	8002b1c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b10:	684a      	ldr	r2, [r1, #4]
 8002b12:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002b14:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002b18:	4322      	orrs	r2, r4
 8002b1a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b1c:	061b      	lsls	r3, r3, #24
 8002b1e:	d506      	bpl.n	8002b2e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b20:	6802      	ldr	r2, [r0, #0]
 8002b22:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002b24:	6853      	ldr	r3, [r2, #4]
 8002b26:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	6053      	str	r3, [r2, #4]
 8002b2e:	bd10      	pop	{r4, pc}

08002b30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b34:	9d06      	ldr	r5, [sp, #24]
 8002b36:	4604      	mov	r4, r0
 8002b38:	460f      	mov	r7, r1
 8002b3a:	4616      	mov	r6, r2
 8002b3c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b3e:	6821      	ldr	r1, [r4, #0]
 8002b40:	69ca      	ldr	r2, [r1, #28]
 8002b42:	ea37 0302 	bics.w	r3, r7, r2
 8002b46:	bf0c      	ite	eq
 8002b48:	2201      	moveq	r2, #1
 8002b4a:	2200      	movne	r2, #0
 8002b4c:	42b2      	cmp	r2, r6
 8002b4e:	d002      	beq.n	8002b56 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002b50:	2000      	movs	r0, #0
}
 8002b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002b56:	1c6b      	adds	r3, r5, #1
 8002b58:	d0f2      	beq.n	8002b40 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002b5a:	b99d      	cbnz	r5, 8002b84 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b64:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002b6e:	2320      	movs	r3, #32
 8002b70:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002b74:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002b7e:	2003      	movs	r0, #3
 8002b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002b84:	f7fe f9b0 	bl	8000ee8 <HAL_GetTick>
 8002b88:	eba0 0008 	sub.w	r0, r0, r8
 8002b8c:	4285      	cmp	r5, r0
 8002b8e:	d2d6      	bcs.n	8002b3e <UART_WaitOnFlagUntilTimeout+0xe>
 8002b90:	e7e4      	b.n	8002b5c <UART_WaitOnFlagUntilTimeout+0x2c>

08002b92 <UART_CheckIdleState>:
{
 8002b92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b94:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b96:	2600      	movs	r6, #0
 8002b98:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002b9a:	f7fe f9a5 	bl	8000ee8 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002ba4:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ba6:	d417      	bmi.n	8002bd8 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	075b      	lsls	r3, r3, #29
 8002bae:	d50a      	bpl.n	8002bc6 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	462b      	mov	r3, r5
 8002bba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	f7ff ffb6 	bl	8002b30 <UART_WaitOnFlagUntilTimeout>
 8002bc4:	b9a0      	cbnz	r0, 8002bf0 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8002bc6:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002bc8:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002bca:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002bce:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002bd2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8002bd6:	e00c      	b.n	8002bf2 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	4632      	mov	r2, r6
 8002be0:	4603      	mov	r3, r0
 8002be2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002be6:	4620      	mov	r0, r4
 8002be8:	f7ff ffa2 	bl	8002b30 <UART_WaitOnFlagUntilTimeout>
 8002bec:	2800      	cmp	r0, #0
 8002bee:	d0db      	beq.n	8002ba8 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002bf0:	2003      	movs	r0, #3
}
 8002bf2:	b002      	add	sp, #8
 8002bf4:	bd70      	pop	{r4, r5, r6, pc}

08002bf6 <HAL_UART_Init>:
{
 8002bf6:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002bf8:	4604      	mov	r4, r0
 8002bfa:	b360      	cbz	r0, 8002c56 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002bfc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002c00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c04:	b91b      	cbnz	r3, 8002c0e <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002c06:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002c0a:	f7fe f8d9 	bl	8000dc0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002c0e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c10:	2324      	movs	r3, #36	; 0x24
 8002c12:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002c16:	6813      	ldr	r3, [r2, #0]
 8002c18:	f023 0301 	bic.w	r3, r3, #1
 8002c1c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f7ff fe2a 	bl	8002878 <UART_SetConfig>
 8002c24:	2801      	cmp	r0, #1
 8002c26:	d016      	beq.n	8002c56 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c2a:	b113      	cbz	r3, 8002c32 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7ff ff2b 	bl	8002a88 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c42:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002c4a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002c4c:	601a      	str	r2, [r3, #0]
}
 8002c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002c52:	f7ff bf9e 	b.w	8002b92 <UART_CheckIdleState>
}
 8002c56:	2001      	movs	r0, #1
 8002c58:	bd10      	pop	{r4, pc}
	...

08002c5c <__libc_init_array>:
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	4e0d      	ldr	r6, [pc, #52]	; (8002c94 <__libc_init_array+0x38>)
 8002c60:	4c0d      	ldr	r4, [pc, #52]	; (8002c98 <__libc_init_array+0x3c>)
 8002c62:	1ba4      	subs	r4, r4, r6
 8002c64:	10a4      	asrs	r4, r4, #2
 8002c66:	2500      	movs	r5, #0
 8002c68:	42a5      	cmp	r5, r4
 8002c6a:	d109      	bne.n	8002c80 <__libc_init_array+0x24>
 8002c6c:	4e0b      	ldr	r6, [pc, #44]	; (8002c9c <__libc_init_array+0x40>)
 8002c6e:	4c0c      	ldr	r4, [pc, #48]	; (8002ca0 <__libc_init_array+0x44>)
 8002c70:	f000 f818 	bl	8002ca4 <_init>
 8002c74:	1ba4      	subs	r4, r4, r6
 8002c76:	10a4      	asrs	r4, r4, #2
 8002c78:	2500      	movs	r5, #0
 8002c7a:	42a5      	cmp	r5, r4
 8002c7c:	d105      	bne.n	8002c8a <__libc_init_array+0x2e>
 8002c7e:	bd70      	pop	{r4, r5, r6, pc}
 8002c80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c84:	4798      	blx	r3
 8002c86:	3501      	adds	r5, #1
 8002c88:	e7ee      	b.n	8002c68 <__libc_init_array+0xc>
 8002c8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c8e:	4798      	blx	r3
 8002c90:	3501      	adds	r5, #1
 8002c92:	e7f2      	b.n	8002c7a <__libc_init_array+0x1e>
 8002c94:	08002cf8 	.word	0x08002cf8
 8002c98:	08002cf8 	.word	0x08002cf8
 8002c9c:	08002cf8 	.word	0x08002cf8
 8002ca0:	08002cfc 	.word	0x08002cfc

08002ca4 <_init>:
 8002ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca6:	bf00      	nop
 8002ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002caa:	bc08      	pop	{r3}
 8002cac:	469e      	mov	lr, r3
 8002cae:	4770      	bx	lr

08002cb0 <_fini>:
 8002cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb2:	bf00      	nop
 8002cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb6:	bc08      	pop	{r3}
 8002cb8:	469e      	mov	lr, r3
 8002cba:	4770      	bx	lr
