
robocik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016b4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001848  08001848  00011848  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001884  08001884  00011884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001888  08001888  00011888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800188c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          000000f8  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000fc  200000fc  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_line   00004421  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000f49e  00000000  00000000  00024455  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001eeb  00000000  00000000  000338f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006c0  00000000  00000000  000357e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000009f0  00000000  00000000  00035ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004806  00000000  00000000  00036890  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002cb6  00000000  00000000  0003b096  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003dd4c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000012c8  00000000  00000000  0003ddc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001830 	.word	0x08001830

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08001830 	.word	0x08001830

080001d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800020c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001da:	e003      	b.n	80001e4 <LoopCopyDataInit>

080001dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001dc:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001e2:	3104      	adds	r1, #4

080001e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001e4:	480b      	ldr	r0, [pc, #44]	; (8000214 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001e6:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <LoopForever+0xe>)
	adds	r2, r0, r1
 80001e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001ec:	d3f6      	bcc.n	80001dc <CopyDataInit>
	ldr	r2, =_sbss
 80001ee:	4a0b      	ldr	r2, [pc, #44]	; (800021c <LoopForever+0x12>)
	b	LoopFillZerobss
 80001f0:	e002      	b.n	80001f8 <LoopFillZerobss>

080001f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001f4:	f842 3b04 	str.w	r3, [r2], #4

080001f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <LoopForever+0x16>)
	cmp	r2, r3
 80001fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001fc:	d3f9      	bcc.n	80001f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001fe:	f000 f9c1 	bl	8000584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000202:	f001 faf1 	bl	80017e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000206:	f000 f877 	bl	80002f8 <main>

0800020a <LoopForever>:

LoopForever:
    b LoopForever
 800020a:	e7fe      	b.n	800020a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800020c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000210:	0800188c 	.word	0x0800188c
	ldr	r0, =_sdata
 8000214:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000218:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 800021c:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000220:	200000fc 	.word	0x200000fc

08000224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000224:	e7fe      	b.n	8000224 <ADC1_2_IRQHandler>

08000226 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	b0a7      	sub	sp, #156	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022a:	2301      	movs	r3, #1
 800022c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800022e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000232:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000234:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000238:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800023a:	2510      	movs	r5, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800023c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000240:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000242:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000244:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000248:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024a:	f000 fb47 	bl	80008dc <HAL_RCC_OscConfig>
 800024e:	b100      	cbz	r0, 8000252 <SystemClock_Config+0x2c>
 8000250:	e7fe      	b.n	8000250 <SystemClock_Config+0x2a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000256:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000258:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025c:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025e:	4621      	mov	r1, r4
 8000260:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000262:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000264:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000266:	f000 fde3 	bl	8000e30 <HAL_RCC_ClockConfig>
 800026a:	b100      	cbz	r0, 800026e <SystemClock_Config+0x48>
 800026c:	e7fe      	b.n	800026c <SystemClock_Config+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800026e:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000270:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000272:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000274:	f000 fed4 	bl	8001020 <HAL_RCCEx_PeriphCLKConfig>
 8000278:	4604      	mov	r4, r0
 800027a:	b100      	cbz	r0, 800027e <SystemClock_Config+0x58>
 800027c:	e7fe      	b.n	800027c <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800027e:	f000 fe99 	bl	8000fb4 <HAL_RCC_GetHCLKFreq>
 8000282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000286:	fbb0 f0f3 	udiv	r0, r0, r3
 800028a:	f000 fa29 	bl	80006e0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800028e:	2004      	movs	r0, #4
 8000290:	f000 fa3c 	bl	800070c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000294:	4622      	mov	r2, r4
 8000296:	4621      	mov	r1, r4
 8000298:	f04f 30ff 	mov.w	r0, #4294967295
 800029c:	f000 f9ec 	bl	8000678 <HAL_NVIC_SetPriority>
}
 80002a0:	b027      	add	sp, #156	; 0x9c
 80002a2:	bd30      	pop	{r4, r5, pc}

080002a4 <turnonLED>:
	sent[9] = 0x00;
	sent[10] = 0x50;
	sent[11] = 0x01;
	return &sent;
}
void turnonLED(){
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	check = 1;
 80002a6:	4a12      	ldr	r2, [pc, #72]	; (80002f0 <turnonLED+0x4c>)
		sent[4] = 0x03; //Instruction?
		sent[5] = 0x18;//Value1?->Adress
		sent[6] = 0x01;//Value2?
		sent[7] = 0x01;
		sent[8] = ~(sent[2] + sent[3] + sent[4] + sent[5]+sent[6]+sent[7]); // checksum
		HAL_UART_Transmit(&huart5,&sent,9,100);
 80002a8:	4812      	ldr	r0, [pc, #72]	; (80002f4 <turnonLED+0x50>)
	check = 1;
 80002aa:	2301      	movs	r3, #1
 80002ac:	7013      	strb	r3, [r2, #0]
		sent[0] = 0xFF;
 80002ae:	22ff      	movs	r2, #255	; 0xff
 80002b0:	f88d 2004 	strb.w	r2, [sp, #4]
		sent[1] = 0xFF;
 80002b4:	f88d 2005 	strb.w	r2, [sp, #5]
		sent[2] = 0xFE; //ID
 80002b8:	22fe      	movs	r2, #254	; 0xfe
 80002ba:	f88d 2006 	strb.w	r2, [sp, #6]
		sent[3] = 0x05; // Length
 80002be:	2205      	movs	r2, #5
 80002c0:	f88d 2007 	strb.w	r2, [sp, #7]
		sent[4] = 0x03; //Instruction?
 80002c4:	2203      	movs	r2, #3
 80002c6:	f88d 2008 	strb.w	r2, [sp, #8]
		sent[6] = 0x01;//Value2?
 80002ca:	f88d 300a 	strb.w	r3, [sp, #10]
		sent[7] = 0x01;
 80002ce:	f88d 300b 	strb.w	r3, [sp, #11]
		sent[5] = 0x18;//Value1?->Adress
 80002d2:	2218      	movs	r2, #24
		sent[8] = ~(sent[2] + sent[3] + sent[4] + sent[5]+sent[6]+sent[7]); // checksum
 80002d4:	23df      	movs	r3, #223	; 0xdf
		sent[5] = 0x18;//Value1?->Adress
 80002d6:	f88d 2009 	strb.w	r2, [sp, #9]
		sent[8] = ~(sent[2] + sent[3] + sent[4] + sent[5]+sent[6]+sent[7]); // checksum
 80002da:	f88d 300c 	strb.w	r3, [sp, #12]
		HAL_UART_Transmit(&huart5,&sent,9,100);
 80002de:	2209      	movs	r2, #9
 80002e0:	2364      	movs	r3, #100	; 0x64
 80002e2:	a901      	add	r1, sp, #4
 80002e4:	f001 f9c3 	bl	800166e <HAL_UART_Transmit>
}
 80002e8:	b005      	add	sp, #20
 80002ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80002ee:	bf00      	nop
 80002f0:	20000020 	.word	0x20000020
 80002f4:	20000088 	.word	0x20000088

080002f8 <main>:
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 80002fc:	f000 f98a 	bl	8000614 <HAL_Init>
  SystemClock_Config();
 8000300:	f7ff ff91 	bl	8000226 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000304:	4b48      	ldr	r3, [pc, #288]	; (8000428 <main+0x130>)
 8000306:	695a      	ldr	r2, [r3, #20]
 8000308:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800030c:	615a      	str	r2, [r3, #20]
 800030e:	695a      	ldr	r2, [r3, #20]
 8000310:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000314:	9200      	str	r2, [sp, #0]
 8000316:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000318:	695a      	ldr	r2, [r3, #20]
 800031a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800031e:	615a      	str	r2, [r3, #20]
 8000320:	695a      	ldr	r2, [r3, #20]
 8000322:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000326:	9201      	str	r2, [sp, #4]
 8000328:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032a:	695a      	ldr	r2, [r3, #20]
 800032c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000330:	615a      	str	r2, [r3, #20]
 8000332:	695a      	ldr	r2, [r3, #20]
 8000334:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000338:	9202      	str	r2, [sp, #8]
 800033a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800033c:	695a      	ldr	r2, [r3, #20]
 800033e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000342:	615a      	str	r2, [r3, #20]
 8000344:	695a      	ldr	r2, [r3, #20]
 8000346:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800034a:	9203      	str	r2, [sp, #12]
 800034c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800034e:	695a      	ldr	r2, [r3, #20]
 8000350:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000354:	615a      	str	r2, [r3, #20]
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800035e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8000360:	f248 0120 	movw	r1, #32800	; 0x8020
 8000364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000368:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 800036a:	f000 fab1 	bl	80008d0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800036e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000372:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8000374:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000376:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000378:	4b2c      	ldr	r3, [pc, #176]	; (800042c <main+0x134>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800037a:	482d      	ldr	r0, [pc, #180]	; (8000430 <main+0x138>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800037c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800037e:	2707      	movs	r7, #7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000380:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000382:	260c      	movs	r6, #12
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000384:	f000 f9d4 	bl	8000730 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000388:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038a:	a905      	add	r1, sp, #20
 800038c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000390:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000392:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000396:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000398:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039a:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039c:	f000 f9c8 	bl	8000730 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_15;
 80003a0:	f248 0320 	movw	r3, #32800	; 0x8020
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_15;
 80003aa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ac:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b2:	f000 f9bd 	bl	8000730 <HAL_GPIO_Init>
  hspi2.Instance = SPI2;
 80003b6:	481f      	ldr	r0, [pc, #124]	; (8000434 <main+0x13c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003b8:	4b1f      	ldr	r3, [pc, #124]	; (8000438 <main+0x140>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003ba:	6084      	str	r4, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003bc:	f44f 7e82 	mov.w	lr, #260	; 0x104
 80003c0:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80003c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80003c8:	60c3      	str	r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80003ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003ce:	6183      	str	r3, [r0, #24]
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003d0:	2308      	movs	r3, #8
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003d2:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003d4:	6144      	str	r4, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003d6:	61c4      	str	r4, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003d8:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003da:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003dc:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80003de:	62c7      	str	r7, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003e0:	6304      	str	r4, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003e2:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003e4:	f000 ff60 	bl	80012a8 <HAL_SPI_Init>
 80003e8:	b100      	cbz	r0, 80003ec <main+0xf4>
 80003ea:	e7fe      	b.n	80003ea <main+0xf2>
  huart5.Instance = UART5;
 80003ec:	4b13      	ldr	r3, [pc, #76]	; (800043c <main+0x144>)
  huart5.Init.BaudRate = 115200;
 80003ee:	4914      	ldr	r1, [pc, #80]	; (8000440 <main+0x148>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80003f0:	6098      	str	r0, [r3, #8]
  huart5.Init.BaudRate = 115200;
 80003f2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart5.Init.StopBits = UART_STOPBITS_1;
 80003f6:	60d8      	str	r0, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80003f8:	6118      	str	r0, [r3, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003fa:	6198      	str	r0, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80003fc:	61d8      	str	r0, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003fe:	6218      	str	r0, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000400:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000402:	4618      	mov	r0, r3
  huart5.Init.BaudRate = 115200;
 8000404:	e883 0006 	stmia.w	r3, {r1, r2}
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000408:	615e      	str	r6, [r3, #20]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800040a:	f001 f9bb 	bl	8001784 <HAL_UART_Init>
 800040e:	b100      	cbz	r0, 8000412 <main+0x11a>
 8000410:	e7fe      	b.n	8000410 <main+0x118>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000412:	462a      	mov	r2, r5
 8000414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041c:	f000 fa58 	bl	80008d0 <HAL_GPIO_WritePin>
  turnonLED();
 8000420:	f7ff ff40 	bl	80002a4 <turnonLED>
 8000424:	e7fe      	b.n	8000424 <main+0x12c>
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000
 800042c:	10210000 	.word	0x10210000
 8000430:	48000800 	.word	0x48000800
 8000434:	20000024 	.word	0x20000024
 8000438:	40003800 	.word	0x40003800
 800043c:	20000088 	.word	0x20000088
 8000440:	40005000 	.word	0x40005000

08000444 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000444:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <HAL_MspInit+0x78>)
{
 8000446:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000448:	699a      	ldr	r2, [r3, #24]
 800044a:	f042 0201 	orr.w	r2, r2, #1
 800044e:	619a      	str	r2, [r3, #24]
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000458:	2007      	movs	r0, #7
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800045c:	f000 f8fa 	bl	8000654 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000460:	2200      	movs	r2, #0
 8000462:	4611      	mov	r1, r2
 8000464:	f06f 000b 	mvn.w	r0, #11
 8000468:	f000 f906 	bl	8000678 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800046c:	2200      	movs	r2, #0
 800046e:	4611      	mov	r1, r2
 8000470:	f06f 000a 	mvn.w	r0, #10
 8000474:	f000 f900 	bl	8000678 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000478:	2200      	movs	r2, #0
 800047a:	4611      	mov	r1, r2
 800047c:	f06f 0009 	mvn.w	r0, #9
 8000480:	f000 f8fa 	bl	8000678 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000484:	2200      	movs	r2, #0
 8000486:	4611      	mov	r1, r2
 8000488:	f06f 0004 	mvn.w	r0, #4
 800048c:	f000 f8f4 	bl	8000678 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000490:	2200      	movs	r2, #0
 8000492:	4611      	mov	r1, r2
 8000494:	f06f 0003 	mvn.w	r0, #3
 8000498:	f000 f8ee 	bl	8000678 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800049c:	2200      	movs	r2, #0
 800049e:	4611      	mov	r1, r2
 80004a0:	f06f 0001 	mvn.w	r0, #1
 80004a4:	f000 f8e8 	bl	8000678 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	4611      	mov	r1, r2
 80004ac:	f04f 30ff 	mov.w	r0, #4294967295
 80004b0:	f000 f8e2 	bl	8000678 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b4:	b003      	add	sp, #12
 80004b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000

080004c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 80004c2:	6802      	ldr	r2, [r0, #0]
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <HAL_SPI_MspInit+0x44>)
 80004c6:	429a      	cmp	r2, r3
 80004c8:	d119      	bne.n	80004fe <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004ca:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ce:	a901      	add	r1, sp, #4
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004d0:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d2:	480d      	ldr	r0, [pc, #52]	; (8000508 <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80004d8:	61da      	str	r2, [r3, #28]
 80004da:	69db      	ldr	r3, [r3, #28]
 80004dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80004e4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80004e8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ea:	2302      	movs	r3, #2
 80004ec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	2300      	movs	r3, #0
 80004f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f2:	2303      	movs	r3, #3
 80004f4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80004f6:	2305      	movs	r3, #5
 80004f8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fa:	f000 f919 	bl	8000730 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80004fe:	b007      	add	sp, #28
 8000500:	f85d fb04 	ldr.w	pc, [sp], #4
 8000504:	40003800 	.word	0x40003800
 8000508:	48000400 	.word	0x48000400

0800050c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800050c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART5)
 800050e:	6802      	ldr	r2, [r0, #0]
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <HAL_UART_MspInit+0x5c>)
 8000512:	429a      	cmp	r2, r3
{
 8000514:	b087      	sub	sp, #28
  if(huart->Instance==UART5)
 8000516:	d124      	bne.n	8000562 <HAL_UART_MspInit+0x56>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000518:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051c:	2702      	movs	r7, #2
    __HAL_RCC_UART5_CLK_ENABLE();
 800051e:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000520:	4812      	ldr	r0, [pc, #72]	; (800056c <HAL_UART_MspInit+0x60>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8000522:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000526:	61da      	str	r2, [r3, #28]
 8000528:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052a:	9702      	str	r7, [sp, #8]
    __HAL_RCC_UART5_CLK_ENABLE();
 800052c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000534:	2601      	movs	r6, #1
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800053a:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800053c:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000540:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000542:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000544:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000546:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000548:	f000 f8f2 	bl	8000730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800054c:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800054e:	eb0d 0103 	add.w	r1, sp, r3
 8000552:	4807      	ldr	r0, [pc, #28]	; (8000570 <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000554:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000556:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000558:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800055c:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800055e:	f000 f8e7 	bl	8000730 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000562:	b007      	add	sp, #28
 8000564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000566:	bf00      	nop
 8000568:	40005000 	.word	0x40005000
 800056c:	48000800 	.word	0x48000800
 8000570:	48000c00 	.word	0x48000c00

08000574 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000574:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000576:	f000 f85f 	bl	8000638 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800057e:	f000 b8d2 	b.w	8000726 <HAL_SYSTICK_IRQHandler>
	...

08000584 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000584:	4915      	ldr	r1, [pc, #84]	; (80005dc <SystemInit+0x58>)
 8000586:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800058a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800058e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <SystemInit+0x5c>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f042 0201 	orr.w	r2, r2, #1
 800059a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800059c:	6858      	ldr	r0, [r3, #4]
 800059e:	4a11      	ldr	r2, [pc, #68]	; (80005e4 <SystemInit+0x60>)
 80005a0:	4002      	ands	r2, r0
 80005a2:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80005aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005ae:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005b6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005b8:	685a      	ldr	r2, [r3, #4]
 80005ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80005be:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80005c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005c2:	f022 020f 	bic.w	r2, r2, #15
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80005c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <SystemInit+0x64>)
 80005cc:	4002      	ands	r2, r0
 80005ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80005d8:	608b      	str	r3, [r1, #8]
 80005da:	4770      	bx	lr
 80005dc:	e000ed00 	.word	0xe000ed00
 80005e0:	40021000 	.word	0x40021000
 80005e4:	f87fc00c 	.word	0xf87fc00c
 80005e8:	ff00fccc 	.word	0xff00fccc

080005ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ec:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <HAL_InitTick+0x24>)
{
 80005f0:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80005f2:	6818      	ldr	r0, [r3, #0]
 80005f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80005fc:	f000 f870 	bl	80006e0 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000600:	2200      	movs	r2, #0
 8000602:	4621      	mov	r1, r4
 8000604:	f04f 30ff 	mov.w	r0, #4294967295
 8000608:	f000 f836 	bl	8000678 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800060c:	2000      	movs	r0, #0
 800060e:	bd10      	pop	{r4, pc}
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000614:	4a07      	ldr	r2, [pc, #28]	; (8000634 <HAL_Init+0x20>)
{
 8000616:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000618:	6813      	ldr	r3, [r2, #0]
 800061a:	f043 0310 	orr.w	r3, r3, #16
 800061e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000620:	2003      	movs	r0, #3
 8000622:	f000 f817 	bl	8000654 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff ffe0 	bl	80005ec <HAL_InitTick>
  HAL_MspInit();
 800062c:	f7ff ff0a 	bl	8000444 <HAL_MspInit>
}
 8000630:	2000      	movs	r0, #0
 8000632:	bd08      	pop	{r3, pc}
 8000634:	40022000 	.word	0x40022000

08000638 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000638:	4a02      	ldr	r2, [pc, #8]	; (8000644 <HAL_IncTick+0xc>)
 800063a:	6813      	ldr	r3, [r2, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	200000f8 	.word	0x200000f8

08000648 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <HAL_GetTick+0x8>)
 800064a:	6818      	ldr	r0, [r3, #0]
}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	200000f8 	.word	0x200000f8

08000654 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000654:	4a07      	ldr	r2, [pc, #28]	; (8000674 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000656:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000658:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800065c:	041b      	lsls	r3, r3, #16
 800065e:	0c1b      	lsrs	r3, r3, #16
 8000660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000664:	0200      	lsls	r0, r0, #8
 8000666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800066e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000670:	60d3      	str	r3, [r2, #12]
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	68dc      	ldr	r4, [r3, #12]
 800067e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000682:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000686:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000688:	2b04      	cmp	r3, #4
 800068a:	bf28      	it	cs
 800068c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000690:	f04f 0501 	mov.w	r5, #1
 8000694:	fa05 f303 	lsl.w	r3, r5, r3
 8000698:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069c:	bf8c      	ite	hi
 800069e:	3c03      	subhi	r4, #3
 80006a0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a2:	4019      	ands	r1, r3
 80006a4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a6:	fa05 f404 	lsl.w	r4, r5, r4
 80006aa:	3c01      	subs	r4, #1
 80006ac:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006ae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	ea42 0201 	orr.w	r2, r2, r1
 80006b4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	bfaf      	iteee	ge
 80006ba:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	f000 000f 	andlt.w	r0, r0, #15
 80006c2:	4b06      	ldrlt	r3, [pc, #24]	; (80006dc <HAL_NVIC_SetPriority+0x64>)
 80006c4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c6:	bfa5      	ittet	ge
 80006c8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80006cc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ce:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	bf00      	nop
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	e000ed14 	.word	0xe000ed14

080006e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e0:	3801      	subs	r0, #1
 80006e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006e6:	d20a      	bcs.n	80006fe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ea:	4a07      	ldr	r2, [pc, #28]	; (8000708 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ec:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ee:	21f0      	movs	r1, #240	; 0xf0
 80006f0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006f6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006fe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000e010 	.word	0xe000e010
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800070e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000710:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000712:	bf0c      	ite	eq
 8000714:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000718:	f022 0204 	bicne.w	r2, r2, #4
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	4770      	bx	lr
 8000720:	e000e010 	.word	0xe000e010

08000724 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000724:	4770      	bx	lr

08000726 <HAL_SYSTICK_IRQHandler>:
{
 8000726:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000728:	f7ff fffc 	bl	8000724 <HAL_SYSTICK_Callback>
 800072c:	bd08      	pop	{r3, pc}
	...

08000730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000734:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000738:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80008cc <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800073c:	4a61      	ldr	r2, [pc, #388]	; (80008c4 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 800073e:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000740:	fa38 f403 	lsrs.w	r4, r8, r3
 8000744:	d102      	bne.n	800074c <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000746:	b003      	add	sp, #12
 8000748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800074c:	f04f 0e01 	mov.w	lr, #1
 8000750:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000754:	ea18 060e 	ands.w	r6, r8, lr
 8000758:	f000 80a6 	beq.w	80008a8 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800075c:	684c      	ldr	r4, [r1, #4]
 800075e:	f024 0710 	bic.w	r7, r4, #16
 8000762:	2f02      	cmp	r7, #2
 8000764:	d116      	bne.n	8000794 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000766:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800076a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800076e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000772:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000776:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800077a:	f04f 0c0f 	mov.w	ip, #15
 800077e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000782:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000786:	690d      	ldr	r5, [r1, #16]
 8000788:	fa05 f50b 	lsl.w	r5, r5, fp
 800078c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000790:	f8ca 5020 	str.w	r5, [sl, #32]
 8000794:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000798:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800079a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800079e:	fa05 f50a 	lsl.w	r5, r5, sl
 80007a2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007a4:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007a8:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ac:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007b0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007b2:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007b6:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80007b8:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007bc:	d811      	bhi.n	80007e2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80007be:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007c0:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007c4:	68cf      	ldr	r7, [r1, #12]
 80007c6:	fa07 fc0a 	lsl.w	ip, r7, sl
 80007ca:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80007ce:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007d0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007d2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007d6:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80007da:	409f      	lsls	r7, r3
 80007dc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80007e0:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007e2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007e4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007e6:	688f      	ldr	r7, [r1, #8]
 80007e8:	fa07 f70a 	lsl.w	r7, r7, sl
 80007ec:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007ee:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007f0:	00e5      	lsls	r5, r4, #3
 80007f2:	d559      	bpl.n	80008a8 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f4:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80007f8:	f045 0501 	orr.w	r5, r5, #1
 80007fc:	f8c9 5018 	str.w	r5, [r9, #24]
 8000800:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000804:	f023 0703 	bic.w	r7, r3, #3
 8000808:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800080c:	f005 0501 	and.w	r5, r5, #1
 8000810:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000814:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000816:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800081c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800081e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000822:	f04f 0e0f 	mov.w	lr, #15
 8000826:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800082a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800082e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000832:	d03b      	beq.n	80008ac <HAL_GPIO_Init+0x17c>
 8000834:	4d24      	ldr	r5, [pc, #144]	; (80008c8 <HAL_GPIO_Init+0x198>)
 8000836:	42a8      	cmp	r0, r5
 8000838:	d03a      	beq.n	80008b0 <HAL_GPIO_Init+0x180>
 800083a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800083e:	42a8      	cmp	r0, r5
 8000840:	d038      	beq.n	80008b4 <HAL_GPIO_Init+0x184>
 8000842:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000846:	42a8      	cmp	r0, r5
 8000848:	d036      	beq.n	80008b8 <HAL_GPIO_Init+0x188>
 800084a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800084e:	42a8      	cmp	r0, r5
 8000850:	d034      	beq.n	80008bc <HAL_GPIO_Init+0x18c>
 8000852:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000856:	42a8      	cmp	r0, r5
 8000858:	d032      	beq.n	80008c0 <HAL_GPIO_Init+0x190>
 800085a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800085e:	42a8      	cmp	r0, r5
 8000860:	bf14      	ite	ne
 8000862:	2507      	movne	r5, #7
 8000864:	2506      	moveq	r5, #6
 8000866:	fa05 f50c 	lsl.w	r5, r5, ip
 800086a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800086e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000870:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000872:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000874:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000878:	bf0c      	ite	eq
 800087a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800087c:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 800087e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000880:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000882:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000886:	bf0c      	ite	eq
 8000888:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800088a:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 800088c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800088e:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000890:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000894:	bf0c      	ite	eq
 8000896:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000898:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 800089a:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800089c:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800089e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008a0:	bf54      	ite	pl
 80008a2:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80008a4:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80008a6:	60d5      	str	r5, [r2, #12]
    position++;
 80008a8:	3301      	adds	r3, #1
 80008aa:	e749      	b.n	8000740 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80008ac:	2500      	movs	r5, #0
 80008ae:	e7da      	b.n	8000866 <HAL_GPIO_Init+0x136>
 80008b0:	2501      	movs	r5, #1
 80008b2:	e7d8      	b.n	8000866 <HAL_GPIO_Init+0x136>
 80008b4:	2502      	movs	r5, #2
 80008b6:	e7d6      	b.n	8000866 <HAL_GPIO_Init+0x136>
 80008b8:	2503      	movs	r5, #3
 80008ba:	e7d4      	b.n	8000866 <HAL_GPIO_Init+0x136>
 80008bc:	2504      	movs	r5, #4
 80008be:	e7d2      	b.n	8000866 <HAL_GPIO_Init+0x136>
 80008c0:	2505      	movs	r5, #5
 80008c2:	e7d0      	b.n	8000866 <HAL_GPIO_Init+0x136>
 80008c4:	40010400 	.word	0x40010400
 80008c8:	48000400 	.word	0x48000400
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008d0:	b10a      	cbz	r2, 80008d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80008d2:	6181      	str	r1, [r0, #24]
 80008d4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80008d6:	6281      	str	r1, [r0, #40]	; 0x28
 80008d8:	4770      	bx	lr
	...

080008dc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008dc:	6803      	ldr	r3, [r0, #0]
{
 80008de:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008e2:	07df      	lsls	r7, r3, #31
{
 80008e4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008e6:	d411      	bmi.n	800090c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008e8:	682b      	ldr	r3, [r5, #0]
 80008ea:	079e      	lsls	r6, r3, #30
 80008ec:	f100 808b 	bmi.w	8000a06 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008f0:	682b      	ldr	r3, [r5, #0]
 80008f2:	071c      	lsls	r4, r3, #28
 80008f4:	f100 80fe 	bmi.w	8000af4 <HAL_RCC_OscConfig+0x218>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008f8:	682b      	ldr	r3, [r5, #0]
 80008fa:	0758      	lsls	r0, r3, #29
 80008fc:	f100 8147 	bmi.w	8000b8e <HAL_RCC_OscConfig+0x2b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000900:	69aa      	ldr	r2, [r5, #24]
 8000902:	2a00      	cmp	r2, #0
 8000904:	f040 81dd 	bne.w	8000cc2 <HAL_RCC_OscConfig+0x3e6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000908:	2000      	movs	r0, #0
 800090a:	e024      	b.n	8000956 <HAL_RCC_OscConfig+0x7a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800090c:	4cbd      	ldr	r4, [pc, #756]	; (8000c04 <HAL_RCC_OscConfig+0x328>)
 800090e:	6863      	ldr	r3, [r4, #4]
 8000910:	f003 030c 	and.w	r3, r3, #12
 8000914:	2b04      	cmp	r3, #4
 8000916:	d00a      	beq.n	800092e <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000918:	6863      	ldr	r3, [r4, #4]
 800091a:	f003 030c 	and.w	r3, r3, #12
 800091e:	2b08      	cmp	r3, #8
 8000920:	d11c      	bne.n	800095c <HAL_RCC_OscConfig+0x80>
 8000922:	6863      	ldr	r3, [r4, #4]
 8000924:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800092c:	d116      	bne.n	800095c <HAL_RCC_OscConfig+0x80>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800092e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000932:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000936:	6821      	ldr	r1, [r4, #0]
 8000938:	fa93 f3a3 	rbit	r3, r3
 800093c:	fab3 f383 	clz	r3, r3
 8000940:	f003 031f 	and.w	r3, r3, #31
 8000944:	2201      	movs	r2, #1
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	420b      	tst	r3, r1
 800094c:	d0cc      	beq.n	80008e8 <HAL_RCC_OscConfig+0xc>
 800094e:	686b      	ldr	r3, [r5, #4]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d1c9      	bne.n	80008e8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000954:	2001      	movs	r0, #1
}
 8000956:	b002      	add	sp, #8
 8000958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800095c:	686b      	ldr	r3, [r5, #4]
 800095e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000962:	d11e      	bne.n	80009a2 <HAL_RCC_OscConfig+0xc6>
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800096a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800096c:	f7ff fe6c 	bl	8000648 <HAL_GetTick>
 8000970:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000974:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000976:	2701      	movs	r7, #1
 8000978:	fa96 f3a6 	rbit	r3, r6
 800097c:	6822      	ldr	r2, [r4, #0]
 800097e:	fa96 f3a6 	rbit	r3, r6
 8000982:	fab3 f383 	clz	r3, r3
 8000986:	f003 031f 	and.w	r3, r3, #31
 800098a:	fa07 f303 	lsl.w	r3, r7, r3
 800098e:	4213      	tst	r3, r2
 8000990:	d1aa      	bne.n	80008e8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000992:	f7ff fe59 	bl	8000648 <HAL_GetTick>
 8000996:	eba0 0008 	sub.w	r0, r0, r8
 800099a:	2864      	cmp	r0, #100	; 0x64
 800099c:	d9ec      	bls.n	8000978 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 800099e:	2003      	movs	r0, #3
 80009a0:	e7d9      	b.n	8000956 <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009a2:	bb0b      	cbnz	r3, 80009e8 <HAL_RCC_OscConfig+0x10c>
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009aa:	6023      	str	r3, [r4, #0]
 80009ac:	6823      	ldr	r3, [r4, #0]
 80009ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009b2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009b4:	f7ff fe48 	bl	8000648 <HAL_GetTick>
 80009b8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80009bc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009be:	2701      	movs	r7, #1
 80009c0:	fa96 f3a6 	rbit	r3, r6
 80009c4:	6822      	ldr	r2, [r4, #0]
 80009c6:	fa96 f3a6 	rbit	r3, r6
 80009ca:	fab3 f383 	clz	r3, r3
 80009ce:	f003 031f 	and.w	r3, r3, #31
 80009d2:	fa07 f303 	lsl.w	r3, r7, r3
 80009d6:	4213      	tst	r3, r2
 80009d8:	d086      	beq.n	80008e8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009da:	f7ff fe35 	bl	8000648 <HAL_GetTick>
 80009de:	eba0 0008 	sub.w	r0, r0, r8
 80009e2:	2864      	cmp	r0, #100	; 0x64
 80009e4:	d9ec      	bls.n	80009c0 <HAL_RCC_OscConfig+0xe4>
 80009e6:	e7da      	b.n	800099e <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009ec:	6823      	ldr	r3, [r4, #0]
 80009ee:	d103      	bne.n	80009f8 <HAL_RCC_OscConfig+0x11c>
 80009f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f4:	6023      	str	r3, [r4, #0]
 80009f6:	e7b5      	b.n	8000964 <HAL_RCC_OscConfig+0x88>
 80009f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009fc:	6023      	str	r3, [r4, #0]
 80009fe:	6823      	ldr	r3, [r4, #0]
 8000a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a04:	e7b1      	b.n	800096a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a06:	4c7f      	ldr	r4, [pc, #508]	; (8000c04 <HAL_RCC_OscConfig+0x328>)
 8000a08:	6863      	ldr	r3, [r4, #4]
 8000a0a:	f013 0f0c 	tst.w	r3, #12
 8000a0e:	d00a      	beq.n	8000a26 <HAL_RCC_OscConfig+0x14a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a10:	6863      	ldr	r3, [r4, #4]
 8000a12:	f003 030c 	and.w	r3, r3, #12
 8000a16:	2b08      	cmp	r3, #8
 8000a18:	d124      	bne.n	8000a64 <HAL_RCC_OscConfig+0x188>
 8000a1a:	6863      	ldr	r3, [r4, #4]
 8000a1c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a24:	d11e      	bne.n	8000a64 <HAL_RCC_OscConfig+0x188>
 8000a26:	2302      	movs	r3, #2
 8000a28:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a2c:	6821      	ldr	r1, [r4, #0]
 8000a2e:	fa93 f3a3 	rbit	r3, r3
 8000a32:	fab3 f383 	clz	r3, r3
 8000a36:	f003 031f 	and.w	r3, r3, #31
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	420b      	tst	r3, r1
 8000a42:	d002      	beq.n	8000a4a <HAL_RCC_OscConfig+0x16e>
 8000a44:	68eb      	ldr	r3, [r5, #12]
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d184      	bne.n	8000954 <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a4a:	6821      	ldr	r1, [r4, #0]
 8000a4c:	23f8      	movs	r3, #248	; 0xf8
 8000a4e:	fa93 f3a3 	rbit	r3, r3
 8000a52:	fab3 f283 	clz	r2, r3
 8000a56:	692b      	ldr	r3, [r5, #16]
 8000a58:	4093      	lsls	r3, r2
 8000a5a:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	6023      	str	r3, [r4, #0]
 8000a62:	e745      	b.n	80008f0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a64:	68ea      	ldr	r2, [r5, #12]
 8000a66:	2601      	movs	r6, #1
 8000a68:	b30a      	cbz	r2, 8000aae <HAL_RCC_OscConfig+0x1d2>
 8000a6a:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000a6e:	fab3 f383 	clz	r3, r3
 8000a72:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a76:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	2702      	movs	r7, #2
 8000a7e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000a80:	f7ff fde2 	bl	8000648 <HAL_GetTick>
 8000a84:	4680      	mov	r8, r0
 8000a86:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a8a:	6822      	ldr	r2, [r4, #0]
 8000a8c:	fa97 f3a7 	rbit	r3, r7
 8000a90:	fab3 f383 	clz	r3, r3
 8000a94:	f003 031f 	and.w	r3, r3, #31
 8000a98:	fa06 f303 	lsl.w	r3, r6, r3
 8000a9c:	4213      	tst	r3, r2
 8000a9e:	d1d4      	bne.n	8000a4a <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aa0:	f7ff fdd2 	bl	8000648 <HAL_GetTick>
 8000aa4:	eba0 0008 	sub.w	r0, r0, r8
 8000aa8:	2802      	cmp	r0, #2
 8000aaa:	d9ec      	bls.n	8000a86 <HAL_RCC_OscConfig+0x1aa>
 8000aac:	e777      	b.n	800099e <HAL_RCC_OscConfig+0xc2>
 8000aae:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000ab2:	fab3 f383 	clz	r3, r3
 8000ab6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000aba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	2702      	movs	r7, #2
 8000ac2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ac4:	f7ff fdc0 	bl	8000648 <HAL_GetTick>
 8000ac8:	4680      	mov	r8, r0
 8000aca:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ace:	6822      	ldr	r2, [r4, #0]
 8000ad0:	fa97 f3a7 	rbit	r3, r7
 8000ad4:	fab3 f383 	clz	r3, r3
 8000ad8:	f003 031f 	and.w	r3, r3, #31
 8000adc:	fa06 f303 	lsl.w	r3, r6, r3
 8000ae0:	4213      	tst	r3, r2
 8000ae2:	f43f af05 	beq.w	80008f0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ae6:	f7ff fdaf 	bl	8000648 <HAL_GetTick>
 8000aea:	eba0 0008 	sub.w	r0, r0, r8
 8000aee:	2802      	cmp	r0, #2
 8000af0:	d9eb      	bls.n	8000aca <HAL_RCC_OscConfig+0x1ee>
 8000af2:	e754      	b.n	800099e <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000af4:	696a      	ldr	r2, [r5, #20]
 8000af6:	4e43      	ldr	r6, [pc, #268]	; (8000c04 <HAL_RCC_OscConfig+0x328>)
 8000af8:	4943      	ldr	r1, [pc, #268]	; (8000c08 <HAL_RCC_OscConfig+0x32c>)
 8000afa:	2401      	movs	r4, #1
 8000afc:	b31a      	cbz	r2, 8000b46 <HAL_RCC_OscConfig+0x26a>
 8000afe:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000b02:	fab3 f383 	clz	r3, r3
 8000b06:	440b      	add	r3, r1
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	2702      	movs	r7, #2
 8000b0c:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000b0e:	f7ff fd9b 	bl	8000648 <HAL_GetTick>
 8000b12:	4680      	mov	r8, r0
 8000b14:	fa97 f3a7 	rbit	r3, r7
 8000b18:	fa97 f3a7 	rbit	r3, r7
 8000b1c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b20:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000b22:	fa97 f3a7 	rbit	r3, r7
 8000b26:	fab3 f383 	clz	r3, r3
 8000b2a:	f003 031f 	and.w	r3, r3, #31
 8000b2e:	fa04 f303 	lsl.w	r3, r4, r3
 8000b32:	4213      	tst	r3, r2
 8000b34:	f47f aee0 	bne.w	80008f8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b38:	f7ff fd86 	bl	8000648 <HAL_GetTick>
 8000b3c:	eba0 0008 	sub.w	r0, r0, r8
 8000b40:	2802      	cmp	r0, #2
 8000b42:	d9e7      	bls.n	8000b14 <HAL_RCC_OscConfig+0x238>
 8000b44:	e72b      	b.n	800099e <HAL_RCC_OscConfig+0xc2>
 8000b46:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000b4a:	fab3 f383 	clz	r3, r3
 8000b4e:	440b      	add	r3, r1
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	2702      	movs	r7, #2
 8000b54:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b56:	f7ff fd77 	bl	8000648 <HAL_GetTick>
 8000b5a:	4680      	mov	r8, r0
 8000b5c:	fa97 f3a7 	rbit	r3, r7
 8000b60:	fa97 f3a7 	rbit	r3, r7
 8000b64:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b68:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000b6a:	fa97 f3a7 	rbit	r3, r7
 8000b6e:	fab3 f383 	clz	r3, r3
 8000b72:	f003 031f 	and.w	r3, r3, #31
 8000b76:	fa04 f303 	lsl.w	r3, r4, r3
 8000b7a:	4213      	tst	r3, r2
 8000b7c:	f43f aebc 	beq.w	80008f8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b80:	f7ff fd62 	bl	8000648 <HAL_GetTick>
 8000b84:	eba0 0008 	sub.w	r0, r0, r8
 8000b88:	2802      	cmp	r0, #2
 8000b8a:	d9e7      	bls.n	8000b5c <HAL_RCC_OscConfig+0x280>
 8000b8c:	e707      	b.n	800099e <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b8e:	4c1d      	ldr	r4, [pc, #116]	; (8000c04 <HAL_RCC_OscConfig+0x328>)
 8000b90:	69e3      	ldr	r3, [r4, #28]
 8000b92:	00d9      	lsls	r1, r3, #3
 8000b94:	d434      	bmi.n	8000c00 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	69e3      	ldr	r3, [r4, #28]
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	61e3      	str	r3, [r4, #28]
 8000b9e:	69e3      	ldr	r3, [r4, #28]
 8000ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	9301      	str	r3, [sp, #4]
 8000ba6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ba8:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000baa:	4f18      	ldr	r7, [pc, #96]	; (8000c0c <HAL_RCC_OscConfig+0x330>)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	05da      	lsls	r2, r3, #23
 8000bb0:	d52e      	bpl.n	8000c10 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bb2:	68ab      	ldr	r3, [r5, #8]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d13c      	bne.n	8000c32 <HAL_RCC_OscConfig+0x356>
 8000bb8:	6a23      	ldr	r3, [r4, #32]
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000bc0:	f7ff fd42 	bl	8000648 <HAL_GetTick>
 8000bc4:	2702      	movs	r7, #2
 8000bc6:	4682      	mov	sl, r0
 8000bc8:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bca:	f04f 0801 	mov.w	r8, #1
 8000bce:	fa97 f3a7 	rbit	r3, r7
 8000bd2:	fa97 f3a7 	rbit	r3, r7
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d06b      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x3d6>
 8000bda:	6a22      	ldr	r2, [r4, #32]
 8000bdc:	fa99 f3a9 	rbit	r3, r9
 8000be0:	fab3 f383 	clz	r3, r3
 8000be4:	f003 031f 	and.w	r3, r3, #31
 8000be8:	fa08 f303 	lsl.w	r3, r8, r3
 8000bec:	4213      	tst	r3, r2
 8000bee:	d057      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x3c4>
    if(pwrclkchanged == SET)
 8000bf0:	2e00      	cmp	r6, #0
 8000bf2:	f43f ae85 	beq.w	8000900 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bf6:	69e3      	ldr	r3, [r4, #28]
 8000bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	61e3      	str	r3, [r4, #28]
 8000bfe:	e67f      	b.n	8000900 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000c00:	2600      	movs	r6, #0
 8000c02:	e7d2      	b.n	8000baa <HAL_RCC_OscConfig+0x2ce>
 8000c04:	40021000 	.word	0x40021000
 8000c08:	10908120 	.word	0x10908120
 8000c0c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c16:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000c18:	f7ff fd16 	bl	8000648 <HAL_GetTick>
 8000c1c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	05db      	lsls	r3, r3, #23
 8000c22:	d4c6      	bmi.n	8000bb2 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c24:	f7ff fd10 	bl	8000648 <HAL_GetTick>
 8000c28:	eba0 0008 	sub.w	r0, r0, r8
 8000c2c:	2864      	cmp	r0, #100	; 0x64
 8000c2e:	d9f6      	bls.n	8000c1e <HAL_RCC_OscConfig+0x342>
 8000c30:	e6b5      	b.n	800099e <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c32:	bb3b      	cbnz	r3, 8000c84 <HAL_RCC_OscConfig+0x3a8>
 8000c34:	6a23      	ldr	r3, [r4, #32]
 8000c36:	f023 0301 	bic.w	r3, r3, #1
 8000c3a:	6223      	str	r3, [r4, #32]
 8000c3c:	6a23      	ldr	r3, [r4, #32]
 8000c3e:	f023 0304 	bic.w	r3, r3, #4
 8000c42:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c44:	f7ff fd00 	bl	8000648 <HAL_GetTick>
 8000c48:	2702      	movs	r7, #2
 8000c4a:	4682      	mov	sl, r0
 8000c4c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c4e:	f04f 0801 	mov.w	r8, #1
 8000c52:	fa97 f3a7 	rbit	r3, r7
 8000c56:	fa97 f3a7 	rbit	r3, r7
 8000c5a:	b373      	cbz	r3, 8000cba <HAL_RCC_OscConfig+0x3de>
 8000c5c:	6a22      	ldr	r2, [r4, #32]
 8000c5e:	fa99 f3a9 	rbit	r3, r9
 8000c62:	fab3 f383 	clz	r3, r3
 8000c66:	f003 031f 	and.w	r3, r3, #31
 8000c6a:	fa08 f303 	lsl.w	r3, r8, r3
 8000c6e:	4213      	tst	r3, r2
 8000c70:	d0be      	beq.n	8000bf0 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c72:	f7ff fce9 	bl	8000648 <HAL_GetTick>
 8000c76:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c7a:	eba0 000a 	sub.w	r0, r0, sl
 8000c7e:	4298      	cmp	r0, r3
 8000c80:	d9e7      	bls.n	8000c52 <HAL_RCC_OscConfig+0x376>
 8000c82:	e68c      	b.n	800099e <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c84:	2b05      	cmp	r3, #5
 8000c86:	6a23      	ldr	r3, [r4, #32]
 8000c88:	d103      	bne.n	8000c92 <HAL_RCC_OscConfig+0x3b6>
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	6223      	str	r3, [r4, #32]
 8000c90:	e792      	b.n	8000bb8 <HAL_RCC_OscConfig+0x2dc>
 8000c92:	f023 0301 	bic.w	r3, r3, #1
 8000c96:	6223      	str	r3, [r4, #32]
 8000c98:	6a23      	ldr	r3, [r4, #32]
 8000c9a:	f023 0304 	bic.w	r3, r3, #4
 8000c9e:	e78e      	b.n	8000bbe <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ca0:	f7ff fcd2 	bl	8000648 <HAL_GetTick>
 8000ca4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ca8:	eba0 000a 	sub.w	r0, r0, sl
 8000cac:	4298      	cmp	r0, r3
 8000cae:	d98e      	bls.n	8000bce <HAL_RCC_OscConfig+0x2f2>
 8000cb0:	e675      	b.n	800099e <HAL_RCC_OscConfig+0xc2>
 8000cb2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cb8:	e790      	b.n	8000bdc <HAL_RCC_OscConfig+0x300>
 8000cba:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cbe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cc0:	e7cd      	b.n	8000c5e <HAL_RCC_OscConfig+0x382>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cc2:	4c44      	ldr	r4, [pc, #272]	; (8000dd4 <HAL_RCC_OscConfig+0x4f8>)
 8000cc4:	6863      	ldr	r3, [r4, #4]
 8000cc6:	f003 030c 	and.w	r3, r3, #12
 8000cca:	2b08      	cmp	r3, #8
 8000ccc:	f43f ae42 	beq.w	8000954 <HAL_RCC_OscConfig+0x78>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cd0:	2a02      	cmp	r2, #2
 8000cd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cd6:	d158      	bne.n	8000d8a <HAL_RCC_OscConfig+0x4ae>
 8000cd8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000cdc:	fab3 f383 	clz	r3, r3
 8000ce0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ce4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cee:	f7ff fcab 	bl	8000648 <HAL_GetTick>
 8000cf2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000cf6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cf8:	2601      	movs	r6, #1
 8000cfa:	fa97 f3a7 	rbit	r3, r7
 8000cfe:	6822      	ldr	r2, [r4, #0]
 8000d00:	fa97 f3a7 	rbit	r3, r7
 8000d04:	fab3 f383 	clz	r3, r3
 8000d08:	f003 031f 	and.w	r3, r3, #31
 8000d0c:	fa06 f303 	lsl.w	r3, r6, r3
 8000d10:	4213      	tst	r3, r2
 8000d12:	d133      	bne.n	8000d7c <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d16:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000d18:	f023 030f 	bic.w	r3, r3, #15
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d20:	6862      	ldr	r2, [r4, #4]
 8000d22:	6a2b      	ldr	r3, [r5, #32]
 8000d24:	69e9      	ldr	r1, [r5, #28]
 8000d26:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8000d2a:	430b      	orrs	r3, r1
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	6063      	str	r3, [r4, #4]
 8000d30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d34:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000d38:	fab3 f383 	clz	r3, r3
 8000d3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000d4a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000d4c:	f7ff fc7c 	bl	8000648 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d50:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000d52:	4607      	mov	r7, r0
 8000d54:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d58:	6822      	ldr	r2, [r4, #0]
 8000d5a:	fa95 f3a5 	rbit	r3, r5
 8000d5e:	fab3 f383 	clz	r3, r3
 8000d62:	f003 031f 	and.w	r3, r3, #31
 8000d66:	fa06 f303 	lsl.w	r3, r6, r3
 8000d6a:	4213      	tst	r3, r2
 8000d6c:	f47f adcc 	bne.w	8000908 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d70:	f7ff fc6a 	bl	8000648 <HAL_GetTick>
 8000d74:	1bc0      	subs	r0, r0, r7
 8000d76:	2802      	cmp	r0, #2
 8000d78:	d9ec      	bls.n	8000d54 <HAL_RCC_OscConfig+0x478>
 8000d7a:	e610      	b.n	800099e <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d7c:	f7ff fc64 	bl	8000648 <HAL_GetTick>
 8000d80:	eba0 0008 	sub.w	r0, r0, r8
 8000d84:	2802      	cmp	r0, #2
 8000d86:	d9b8      	bls.n	8000cfa <HAL_RCC_OscConfig+0x41e>
 8000d88:	e609      	b.n	800099e <HAL_RCC_OscConfig+0xc2>
 8000d8a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000d8e:	fab3 f383 	clz	r3, r3
 8000d92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000da0:	f7ff fc52 	bl	8000648 <HAL_GetTick>
 8000da4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000da8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000daa:	2601      	movs	r6, #1
 8000dac:	fa95 f3a5 	rbit	r3, r5
 8000db0:	6822      	ldr	r2, [r4, #0]
 8000db2:	fa95 f3a5 	rbit	r3, r5
 8000db6:	fab3 f383 	clz	r3, r3
 8000dba:	f003 031f 	and.w	r3, r3, #31
 8000dbe:	fa06 f303 	lsl.w	r3, r6, r3
 8000dc2:	4213      	tst	r3, r2
 8000dc4:	f43f ada0 	beq.w	8000908 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dc8:	f7ff fc3e 	bl	8000648 <HAL_GetTick>
 8000dcc:	1bc0      	subs	r0, r0, r7
 8000dce:	2802      	cmp	r0, #2
 8000dd0:	d9ec      	bls.n	8000dac <HAL_RCC_OscConfig+0x4d0>
 8000dd2:	e5e4      	b.n	800099e <HAL_RCC_OscConfig+0xc2>
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000dd8:	4911      	ldr	r1, [pc, #68]	; (8000e20 <HAL_RCC_GetSysClockFreq+0x48>)
 8000dda:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ddc:	f003 020c 	and.w	r2, r3, #12
 8000de0:	2a08      	cmp	r2, #8
 8000de2:	d11a      	bne.n	8000e1a <HAL_RCC_GetSysClockFreq+0x42>
 8000de4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000de8:	fa92 f2a2 	rbit	r2, r2
 8000dec:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000dee:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000df2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000df4:	fa90 f0a0 	rbit	r0, r0
 8000df8:	fab0 f080 	clz	r0, r0
 8000dfc:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000e00:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000e04:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000e06:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000e0a:	4807      	ldr	r0, [pc, #28]	; (8000e28 <HAL_RCC_GetSysClockFreq+0x50>)
 8000e0c:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000e0e:	4807      	ldr	r0, [pc, #28]	; (8000e2c <HAL_RCC_GetSysClockFreq+0x54>)
 8000e10:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000e14:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000e16:	4348      	muls	r0, r1
 8000e18:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000e1a:	4804      	ldr	r0, [pc, #16]	; (8000e2c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000
 8000e24:	08001860 	.word	0x08001860
 8000e28:	08001870 	.word	0x08001870
 8000e2c:	007a1200 	.word	0x007a1200

08000e30 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e30:	4a5c      	ldr	r2, [pc, #368]	; (8000fa4 <HAL_RCC_ClockConfig+0x174>)
 8000e32:	6813      	ldr	r3, [r2, #0]
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	428b      	cmp	r3, r1
{
 8000e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e3e:	4606      	mov	r6, r0
 8000e40:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e42:	d330      	bcc.n	8000ea6 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e44:	6832      	ldr	r2, [r6, #0]
 8000e46:	0791      	lsls	r1, r2, #30
 8000e48:	d43a      	bmi.n	8000ec0 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e4a:	07d2      	lsls	r2, r2, #31
 8000e4c:	d440      	bmi.n	8000ed0 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e4e:	4a55      	ldr	r2, [pc, #340]	; (8000fa4 <HAL_RCC_ClockConfig+0x174>)
 8000e50:	6813      	ldr	r3, [r2, #0]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	429d      	cmp	r5, r3
 8000e58:	f0c0 8092 	bcc.w	8000f80 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e5c:	6832      	ldr	r2, [r6, #0]
 8000e5e:	4c52      	ldr	r4, [pc, #328]	; (8000fa8 <HAL_RCC_ClockConfig+0x178>)
 8000e60:	f012 0f04 	tst.w	r2, #4
 8000e64:	f040 8097 	bne.w	8000f96 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e68:	0713      	lsls	r3, r2, #28
 8000e6a:	d506      	bpl.n	8000e7a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e6c:	6863      	ldr	r3, [r4, #4]
 8000e6e:	6932      	ldr	r2, [r6, #16]
 8000e70:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000e74:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e78:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000e7a:	f7ff ffad 	bl	8000dd8 <HAL_RCC_GetSysClockFreq>
 8000e7e:	6863      	ldr	r3, [r4, #4]
 8000e80:	22f0      	movs	r2, #240	; 0xf0
 8000e82:	fa92 f2a2 	rbit	r2, r2
 8000e86:	fab2 f282 	clz	r2, r2
 8000e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e8e:	40d3      	lsrs	r3, r2
 8000e90:	4a46      	ldr	r2, [pc, #280]	; (8000fac <HAL_RCC_ClockConfig+0x17c>)
 8000e92:	5cd3      	ldrb	r3, [r2, r3]
 8000e94:	40d8      	lsrs	r0, r3
 8000e96:	4b46      	ldr	r3, [pc, #280]	; (8000fb0 <HAL_RCC_ClockConfig+0x180>)
 8000e98:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f7ff fba6 	bl	80005ec <HAL_InitTick>
  return HAL_OK;
 8000ea0:	2000      	movs	r0, #0
}
 8000ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ea6:	6813      	ldr	r3, [r2, #0]
 8000ea8:	f023 0307 	bic.w	r3, r3, #7
 8000eac:	430b      	orrs	r3, r1
 8000eae:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000eb0:	6813      	ldr	r3, [r2, #0]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	d0c4      	beq.n	8000e44 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000eba:	2001      	movs	r0, #1
 8000ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ec0:	4939      	ldr	r1, [pc, #228]	; (8000fa8 <HAL_RCC_ClockConfig+0x178>)
 8000ec2:	68b0      	ldr	r0, [r6, #8]
 8000ec4:	684b      	ldr	r3, [r1, #4]
 8000ec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000eca:	4303      	orrs	r3, r0
 8000ecc:	604b      	str	r3, [r1, #4]
 8000ece:	e7bc      	b.n	8000e4a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ed0:	6872      	ldr	r2, [r6, #4]
 8000ed2:	4c35      	ldr	r4, [pc, #212]	; (8000fa8 <HAL_RCC_ClockConfig+0x178>)
 8000ed4:	2a01      	cmp	r2, #1
 8000ed6:	d128      	bne.n	8000f2a <HAL_RCC_ClockConfig+0xfa>
 8000ed8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000edc:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee0:	6821      	ldr	r1, [r4, #0]
 8000ee2:	fa93 f3a3 	rbit	r3, r3
 8000ee6:	fab3 f383 	clz	r3, r3
 8000eea:	f003 031f 	and.w	r3, r3, #31
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef4:	d0e1      	beq.n	8000eba <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ef6:	6863      	ldr	r3, [r4, #4]
 8000ef8:	f023 0303 	bic.w	r3, r3, #3
 8000efc:	431a      	orrs	r2, r3
 8000efe:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000f00:	f7ff fba2 	bl	8000648 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f04:	6873      	ldr	r3, [r6, #4]
 8000f06:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000f08:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f0a:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f0e:	d11f      	bne.n	8000f50 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f10:	6863      	ldr	r3, [r4, #4]
 8000f12:	f003 030c 	and.w	r3, r3, #12
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d099      	beq.n	8000e4e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f1a:	f7ff fb95 	bl	8000648 <HAL_GetTick>
 8000f1e:	1bc0      	subs	r0, r0, r7
 8000f20:	4540      	cmp	r0, r8
 8000f22:	d9f5      	bls.n	8000f10 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000f24:	2003      	movs	r0, #3
 8000f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f2a:	2a02      	cmp	r2, #2
 8000f2c:	bf0c      	ite	eq
 8000f2e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000f32:	2302      	movne	r3, #2
 8000f34:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f38:	6820      	ldr	r0, [r4, #0]
 8000f3a:	fa93 f3a3 	rbit	r3, r3
 8000f3e:	fab3 f383 	clz	r3, r3
 8000f42:	f003 031f 	and.w	r3, r3, #31
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	4203      	tst	r3, r0
 8000f4e:	e7d1      	b.n	8000ef4 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d110      	bne.n	8000f76 <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f54:	6863      	ldr	r3, [r4, #4]
 8000f56:	f003 030c 	and.w	r3, r3, #12
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	f43f af77 	beq.w	8000e4e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f60:	f7ff fb72 	bl	8000648 <HAL_GetTick>
 8000f64:	1bc0      	subs	r0, r0, r7
 8000f66:	4540      	cmp	r0, r8
 8000f68:	d9f4      	bls.n	8000f54 <HAL_RCC_ClockConfig+0x124>
 8000f6a:	e7db      	b.n	8000f24 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f6c:	f7ff fb6c 	bl	8000648 <HAL_GetTick>
 8000f70:	1bc0      	subs	r0, r0, r7
 8000f72:	4540      	cmp	r0, r8
 8000f74:	d8d6      	bhi.n	8000f24 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f76:	6863      	ldr	r3, [r4, #4]
 8000f78:	f013 0f0c 	tst.w	r3, #12
 8000f7c:	d1f6      	bne.n	8000f6c <HAL_RCC_ClockConfig+0x13c>
 8000f7e:	e766      	b.n	8000e4e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f80:	6813      	ldr	r3, [r2, #0]
 8000f82:	f023 0307 	bic.w	r3, r3, #7
 8000f86:	432b      	orrs	r3, r5
 8000f88:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f8a:	6813      	ldr	r3, [r2, #0]
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	429d      	cmp	r5, r3
 8000f92:	d192      	bne.n	8000eba <HAL_RCC_ClockConfig+0x8a>
 8000f94:	e762      	b.n	8000e5c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f96:	6863      	ldr	r3, [r4, #4]
 8000f98:	68f1      	ldr	r1, [r6, #12]
 8000f9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f9e:	430b      	orrs	r3, r1
 8000fa0:	6063      	str	r3, [r4, #4]
 8000fa2:	e761      	b.n	8000e68 <HAL_RCC_ClockConfig+0x38>
 8000fa4:	40022000 	.word	0x40022000
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	08001848 	.word	0x08001848
 8000fb0:	20000000 	.word	0x20000000

08000fb4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000fb4:	4b01      	ldr	r3, [pc, #4]	; (8000fbc <HAL_RCC_GetHCLKFreq+0x8>)
 8000fb6:	6818      	ldr	r0, [r3, #0]
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000000 	.word	0x20000000

08000fc0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fc2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	fa92 f2a2 	rbit	r2, r2
 8000fcc:	fab2 f282 	clz	r2, r2
 8000fd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000fd4:	40d3      	lsrs	r3, r2
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000fd8:	5cd3      	ldrb	r3, [r2, r3]
 8000fda:	4a04      	ldr	r2, [pc, #16]	; (8000fec <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000fdc:	6810      	ldr	r0, [r2, #0]
}    
 8000fde:	40d8      	lsrs	r0, r3
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	08001858 	.word	0x08001858
 8000fec:	20000000 	.word	0x20000000

08000ff0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000ff2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	fa92 f2a2 	rbit	r2, r2
 8000ffc:	fab2 f282 	clz	r2, r2
 8001000:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001004:	40d3      	lsrs	r3, r2
 8001006:	4a04      	ldr	r2, [pc, #16]	; (8001018 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001008:	5cd3      	ldrb	r3, [r2, r3]
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800100c:	6810      	ldr	r0, [r2, #0]
} 
 800100e:	40d8      	lsrs	r0, r3
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
 8001018:	08001858 	.word	0x08001858
 800101c:	20000000 	.word	0x20000000

08001020 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001020:	6803      	ldr	r3, [r0, #0]
{
 8001022:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001026:	03df      	lsls	r7, r3, #15
{
 8001028:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800102a:	d523      	bpl.n	8001074 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800102c:	4d9b      	ldr	r5, [pc, #620]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800102e:	69eb      	ldr	r3, [r5, #28]
 8001030:	00de      	lsls	r6, r3, #3
 8001032:	f100 80d7 	bmi.w	80011e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	69eb      	ldr	r3, [r5, #28]
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	61eb      	str	r3, [r5, #28]
 800103e:	69eb      	ldr	r3, [r5, #28]
 8001040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001048:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800104a:	4f95      	ldr	r7, [pc, #596]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	05d8      	lsls	r0, r3, #23
 8001050:	f140 80ca 	bpl.w	80011e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001054:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001056:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800105a:	f040 80da 	bne.w	8001212 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800105e:	6a2b      	ldr	r3, [r5, #32]
 8001060:	6862      	ldr	r2, [r4, #4]
 8001062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001066:	4313      	orrs	r3, r2
 8001068:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800106a:	b11e      	cbz	r6, 8001074 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800106c:	69eb      	ldr	r3, [r5, #28]
 800106e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001072:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001074:	6820      	ldr	r0, [r4, #0]
 8001076:	07c3      	lsls	r3, r0, #31
 8001078:	d506      	bpl.n	8001088 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800107a:	4a88      	ldr	r2, [pc, #544]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800107c:	68a1      	ldr	r1, [r4, #8]
 800107e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001080:	f023 0303 	bic.w	r3, r3, #3
 8001084:	430b      	orrs	r3, r1
 8001086:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001088:	0787      	lsls	r7, r0, #30
 800108a:	d506      	bpl.n	800109a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800108c:	4a83      	ldr	r2, [pc, #524]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800108e:	68e1      	ldr	r1, [r4, #12]
 8001090:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001092:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001096:	430b      	orrs	r3, r1
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800109a:	0746      	lsls	r6, r0, #29
 800109c:	d506      	bpl.n	80010ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800109e:	4a7f      	ldr	r2, [pc, #508]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80010a0:	6921      	ldr	r1, [r4, #16]
 80010a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010a4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80010a8:	430b      	orrs	r3, r1
 80010aa:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80010ac:	0685      	lsls	r5, r0, #26
 80010ae:	d506      	bpl.n	80010be <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80010b0:	4a7a      	ldr	r2, [pc, #488]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80010b2:	69e1      	ldr	r1, [r4, #28]
 80010b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010b6:	f023 0310 	bic.w	r3, r3, #16
 80010ba:	430b      	orrs	r3, r1
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80010be:	0381      	lsls	r1, r0, #14
 80010c0:	d506      	bpl.n	80010d0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80010c2:	4a76      	ldr	r2, [pc, #472]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80010c4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80010c6:	6853      	ldr	r3, [r2, #4]
 80010c8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80010cc:	430b      	orrs	r3, r1
 80010ce:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80010d0:	0642      	lsls	r2, r0, #25
 80010d2:	d506      	bpl.n	80010e2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80010d4:	4a71      	ldr	r2, [pc, #452]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80010d6:	6a21      	ldr	r1, [r4, #32]
 80010d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010da:	f023 0320 	bic.w	r3, r3, #32
 80010de:	430b      	orrs	r3, r1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80010e2:	0343      	lsls	r3, r0, #13
 80010e4:	d506      	bpl.n	80010f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80010e6:	4a6d      	ldr	r2, [pc, #436]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80010e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80010ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010f0:	430b      	orrs	r3, r1
 80010f2:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80010f4:	0707      	lsls	r7, r0, #28
 80010f6:	d506      	bpl.n	8001106 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80010f8:	4a68      	ldr	r2, [pc, #416]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80010fa:	6961      	ldr	r1, [r4, #20]
 80010fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010fe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001102:	430b      	orrs	r3, r1
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001106:	06c6      	lsls	r6, r0, #27
 8001108:	d506      	bpl.n	8001118 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800110a:	4a64      	ldr	r2, [pc, #400]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800110c:	69a1      	ldr	r1, [r4, #24]
 800110e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001110:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001114:	430b      	orrs	r3, r1
 8001116:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001118:	0585      	lsls	r5, r0, #22
 800111a:	d506      	bpl.n	800112a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800111c:	4a5f      	ldr	r2, [pc, #380]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800111e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001120:	6853      	ldr	r3, [r2, #4]
 8001122:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001126:	430b      	orrs	r3, r1
 8001128:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800112a:	0601      	lsls	r1, r0, #24
 800112c:	d506      	bpl.n	800113c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800112e:	4a5b      	ldr	r2, [pc, #364]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001130:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001132:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001134:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001138:	430b      	orrs	r3, r1
 800113a:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800113c:	05c2      	lsls	r2, r0, #23
 800113e:	d506      	bpl.n	800114e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001140:	4a56      	ldr	r2, [pc, #344]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001142:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001144:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001146:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 800114a:	430b      	orrs	r3, r1
 800114c:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800114e:	04c3      	lsls	r3, r0, #19
 8001150:	d506      	bpl.n	8001160 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001152:	4a52      	ldr	r2, [pc, #328]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001156:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800115c:	430b      	orrs	r3, r1
 800115e:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001160:	0487      	lsls	r7, r0, #18
 8001162:	d506      	bpl.n	8001172 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001164:	4a4d      	ldr	r2, [pc, #308]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001166:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001168:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800116a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800116e:	430b      	orrs	r3, r1
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001172:	02c6      	lsls	r6, r0, #11
 8001174:	d506      	bpl.n	8001184 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001176:	4a49      	ldr	r2, [pc, #292]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001178:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800117a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800117c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001180:	430b      	orrs	r3, r1
 8001182:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001184:	0285      	lsls	r5, r0, #10
 8001186:	d506      	bpl.n	8001196 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001188:	4a44      	ldr	r2, [pc, #272]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800118a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800118c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800118e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001192:	430b      	orrs	r3, r1
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001196:	0241      	lsls	r1, r0, #9
 8001198:	d506      	bpl.n	80011a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800119a:	4a40      	ldr	r2, [pc, #256]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800119c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800119e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011a4:	430b      	orrs	r3, r1
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80011a8:	0202      	lsls	r2, r0, #8
 80011aa:	d506      	bpl.n	80011ba <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80011ac:	4a3b      	ldr	r2, [pc, #236]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80011ae:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80011b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011b6:	430b      	orrs	r3, r1
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80011ba:	01c3      	lsls	r3, r0, #7
 80011bc:	d506      	bpl.n	80011cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80011be:	4a37      	ldr	r2, [pc, #220]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80011c0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80011c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011c8:	430b      	orrs	r3, r1
 80011ca:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80011cc:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80011d0:	d01c      	beq.n	800120c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80011d2:	4a32      	ldr	r2, [pc, #200]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80011d4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80011d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80011dc:	430b      	orrs	r3, r1
 80011de:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80011e0:	2000      	movs	r0, #0
 80011e2:	e013      	b.n	800120c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 80011e4:	2600      	movs	r6, #0
 80011e6:	e730      	b.n	800104a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ee:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80011f0:	f7ff fa2a 	bl	8000648 <HAL_GetTick>
 80011f4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	05d9      	lsls	r1, r3, #23
 80011fa:	f53f af2b 	bmi.w	8001054 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011fe:	f7ff fa23 	bl	8000648 <HAL_GetTick>
 8001202:	eba0 0008 	sub.w	r0, r0, r8
 8001206:	2864      	cmp	r0, #100	; 0x64
 8001208:	d9f5      	bls.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 800120a:	2003      	movs	r0, #3
}
 800120c:	b002      	add	sp, #8
 800120e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001212:	6862      	ldr	r2, [r4, #4]
 8001214:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001218:	4293      	cmp	r3, r2
 800121a:	f43f af20 	beq.w	800105e <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800121e:	6a29      	ldr	r1, [r5, #32]
 8001220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001224:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001228:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800122c:	f8df e074 	ldr.w	lr, [pc, #116]	; 80012a4 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8001230:	fab2 f282 	clz	r2, r2
 8001234:	4472      	add	r2, lr
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	2701      	movs	r7, #1
 800123a:	6017      	str	r7, [r2, #0]
 800123c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001240:	fab3 f383 	clz	r3, r3
 8001244:	4473      	add	r3, lr
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800124c:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 800124e:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001250:	f57f af05 	bpl.w	800105e <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001254:	f7ff f9f8 	bl	8000648 <HAL_GetTick>
 8001258:	f04f 0802 	mov.w	r8, #2
 800125c:	4682      	mov	sl, r0
 800125e:	46c1      	mov	r9, r8
 8001260:	fa98 f3a8 	rbit	r3, r8
 8001264:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001268:	b1a3      	cbz	r3, 8001294 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800126a:	6a2a      	ldr	r2, [r5, #32]
 800126c:	fa99 f3a9 	rbit	r3, r9
 8001270:	fab3 f383 	clz	r3, r3
 8001274:	f003 031f 	and.w	r3, r3, #31
 8001278:	fa07 f303 	lsl.w	r3, r7, r3
 800127c:	4213      	tst	r3, r2
 800127e:	f47f aeee 	bne.w	800105e <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001282:	f7ff f9e1 	bl	8000648 <HAL_GetTick>
 8001286:	f241 3388 	movw	r3, #5000	; 0x1388
 800128a:	eba0 000a 	sub.w	r0, r0, sl
 800128e:	4298      	cmp	r0, r3
 8001290:	d9e6      	bls.n	8001260 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8001292:	e7ba      	b.n	800120a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8001294:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001298:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800129a:	e7e7      	b.n	800126c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800129c:	40021000 	.word	0x40021000
 80012a0:	40007000 	.word	0x40007000
 80012a4:	10908100 	.word	0x10908100

080012a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80012a8:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80012aa:	4604      	mov	r4, r0
 80012ac:	2800      	cmp	r0, #0
 80012ae:	d04e      	beq.n	800134e <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80012b4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80012b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012bc:	b91b      	cbnz	r3, 80012c6 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80012be:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80012c2:	f7ff f8fd 	bl	80004c0 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80012c6:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80012c8:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80012ca:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80012ce:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80012d0:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80012d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80012d6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80012da:	600b      	str	r3, [r1, #0]
 80012dc:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80012e0:	d932      	bls.n	8001348 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80012e2:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80012e4:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e8:	bf18      	it	ne
 80012ea:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80012ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012ee:	b92b      	cbnz	r3, 80012fc <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80012f0:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80012f4:	bf8c      	ite	hi
 80012f6:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80012f8:	2301      	movls	r3, #1
 80012fa:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80012fc:	68a6      	ldr	r6, [r4, #8]
 80012fe:	6863      	ldr	r3, [r4, #4]
 8001300:	69a5      	ldr	r5, [r4, #24]
 8001302:	4333      	orrs	r3, r6
 8001304:	6926      	ldr	r6, [r4, #16]
 8001306:	4333      	orrs	r3, r6
 8001308:	6966      	ldr	r6, [r4, #20]
 800130a:	4333      	orrs	r3, r6
 800130c:	69e6      	ldr	r6, [r4, #28]
 800130e:	4333      	orrs	r3, r6
 8001310:	6a26      	ldr	r6, [r4, #32]
 8001312:	4333      	orrs	r3, r6
 8001314:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001316:	4333      	orrs	r3, r6
 8001318:	f405 7600 	and.w	r6, r5, #512	; 0x200
 800131c:	4333      	orrs	r3, r6
 800131e:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001322:	431a      	orrs	r2, r3
 8001324:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001326:	0c2d      	lsrs	r5, r5, #16
 8001328:	431a      	orrs	r2, r3
 800132a:	f005 0504 	and.w	r5, r5, #4
 800132e:	432a      	orrs	r2, r5
 8001330:	4302      	orrs	r2, r0
 8001332:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001334:	69cb      	ldr	r3, [r1, #28]
 8001336:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800133a:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800133c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800133e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001340:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001342:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8001346:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001348:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800134c:	e7cc      	b.n	80012e8 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 800134e:	2001      	movs	r0, #1
}
 8001350:	bd70      	pop	{r4, r5, r6, pc}
	...

08001354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001354:	b538      	push	{r3, r4, r5, lr}
 8001356:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001358:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800135a:	6921      	ldr	r1, [r4, #16]
 800135c:	68a2      	ldr	r2, [r4, #8]
 800135e:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001360:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001362:	430a      	orrs	r2, r1
 8001364:	6961      	ldr	r1, [r4, #20]
 8001366:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001368:	4977      	ldr	r1, [pc, #476]	; (8001548 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800136a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800136c:	4001      	ands	r1, r0
 800136e:	430a      	orrs	r2, r1
 8001370:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001372:	686a      	ldr	r2, [r5, #4]
 8001374:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001376:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001378:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800137c:	430a      	orrs	r2, r1
 800137e:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001380:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001382:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001384:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001388:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800138a:	430a      	orrs	r2, r1
 800138c:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800138e:	4a6f      	ldr	r2, [pc, #444]	; (800154c <UART_SetConfig+0x1f8>)
 8001390:	4295      	cmp	r5, r2
 8001392:	d112      	bne.n	80013ba <UART_SetConfig+0x66>
 8001394:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8001398:	496d      	ldr	r1, [pc, #436]	; (8001550 <UART_SetConfig+0x1fc>)
 800139a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800139c:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013a4:	5c8a      	ldrb	r2, [r1, r2]
 80013a6:	d066      	beq.n	8001476 <UART_SetConfig+0x122>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 80013a8:	2a08      	cmp	r2, #8
 80013aa:	d819      	bhi.n	80013e0 <UART_SetConfig+0x8c>
 80013ac:	e8df f002 	tbb	[pc, r2]
 80013b0:	189e92c2 	.word	0x189e92c2
 80013b4:	181818a9 	.word	0x181818a9
 80013b8:	ac          	.byte	0xac
 80013b9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013ba:	4a66      	ldr	r2, [pc, #408]	; (8001554 <UART_SetConfig+0x200>)
 80013bc:	4295      	cmp	r5, r2
 80013be:	d124      	bne.n	800140a <UART_SetConfig+0xb6>
 80013c0:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80013c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013c6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80013ca:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80013ce:	f000 80a0 	beq.w	8001512 <UART_SetConfig+0x1be>
 80013d2:	d807      	bhi.n	80013e4 <UART_SetConfig+0x90>
 80013d4:	2a00      	cmp	r2, #0
 80013d6:	f000 80aa 	beq.w	800152e <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013de:	d076      	beq.n	80014ce <UART_SetConfig+0x17a>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80013e0:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 80013e2:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013e4:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80013e8:	f000 8099 	beq.w	800151e <UART_SetConfig+0x1ca>
 80013ec:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80013f0:	d1f3      	bne.n	80013da <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013f6:	d179      	bne.n	80014ec <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80013f8:	6860      	ldr	r0, [r4, #4]
 80013fa:	0843      	lsrs	r3, r0, #1
 80013fc:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001400:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001404:	fbb3 f3f0 	udiv	r3, r3, r0
 8001408:	e054      	b.n	80014b4 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800140a:	4a53      	ldr	r2, [pc, #332]	; (8001558 <UART_SetConfig+0x204>)
 800140c:	4295      	cmp	r5, r2
 800140e:	d10e      	bne.n	800142e <UART_SetConfig+0xda>
 8001410:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8001414:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001416:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800141a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800141e:	d078      	beq.n	8001512 <UART_SetConfig+0x1be>
 8001420:	d9d8      	bls.n	80013d4 <UART_SetConfig+0x80>
 8001422:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8001426:	d07a      	beq.n	800151e <UART_SetConfig+0x1ca>
 8001428:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 800142c:	e7e0      	b.n	80013f0 <UART_SetConfig+0x9c>
 800142e:	4a4b      	ldr	r2, [pc, #300]	; (800155c <UART_SetConfig+0x208>)
 8001430:	4295      	cmp	r5, r2
 8001432:	d10e      	bne.n	8001452 <UART_SetConfig+0xfe>
 8001434:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8001438:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800143a:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800143e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001442:	d066      	beq.n	8001512 <UART_SetConfig+0x1be>
 8001444:	d9c6      	bls.n	80013d4 <UART_SetConfig+0x80>
 8001446:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800144a:	d068      	beq.n	800151e <UART_SetConfig+0x1ca>
 800144c:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8001450:	e7ce      	b.n	80013f0 <UART_SetConfig+0x9c>
 8001452:	4a43      	ldr	r2, [pc, #268]	; (8001560 <UART_SetConfig+0x20c>)
 8001454:	4295      	cmp	r5, r2
 8001456:	d1c0      	bne.n	80013da <UART_SetConfig+0x86>
 8001458:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800145c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800145e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8001462:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001466:	d054      	beq.n	8001512 <UART_SetConfig+0x1be>
 8001468:	d9b4      	bls.n	80013d4 <UART_SetConfig+0x80>
 800146a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800146e:	d056      	beq.n	800151e <UART_SetConfig+0x1ca>
 8001470:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8001474:	e7bc      	b.n	80013f0 <UART_SetConfig+0x9c>
    switch (clocksource)
 8001476:	2a08      	cmp	r2, #8
 8001478:	d829      	bhi.n	80014ce <UART_SetConfig+0x17a>
 800147a:	a301      	add	r3, pc, #4	; (adr r3, 8001480 <UART_SetConfig+0x12c>)
 800147c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001480:	080014a5 	.word	0x080014a5
 8001484:	080014c9 	.word	0x080014c9
 8001488:	080013f9 	.word	0x080013f9
 800148c:	080014cf 	.word	0x080014cf
 8001490:	08001519 	.word	0x08001519
 8001494:	080014cf 	.word	0x080014cf
 8001498:	080014cf 	.word	0x080014cf
 800149c:	080014cf 	.word	0x080014cf
 80014a0:	08001525 	.word	0x08001525
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80014a4:	f7ff fd8c 	bl	8000fc0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80014a8:	6861      	ldr	r1, [r4, #4]
 80014aa:	084a      	lsrs	r2, r1, #1
 80014ac:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80014b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80014b6:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80014b8:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 80014bc:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80014be:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60cb      	str	r3, [r1, #12]
 80014c6:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80014c8:	f7ff fd92 	bl	8000ff0 <HAL_RCC_GetPCLK2Freq>
 80014cc:	e7ec      	b.n	80014a8 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 80014ce:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e7f1      	b.n	80014b8 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80014d4:	f7ff fd8c 	bl	8000ff0 <HAL_RCC_GetPCLK2Freq>
 80014d8:	6863      	ldr	r3, [r4, #4]
 80014da:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80014de:	fbb0 f0f3 	udiv	r0, r0, r3
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <UART_SetConfig+0x1f8>)
 80014e4:	b280      	uxth	r0, r0
 80014e6:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80014e8:	2000      	movs	r0, #0
        break;
 80014ea:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80014ec:	6862      	ldr	r2, [r4, #4]
 80014ee:	0853      	lsrs	r3, r2, #1
 80014f0:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80014f4:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80014f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	60eb      	str	r3, [r5, #12]
 8001500:	e7f2      	b.n	80014e8 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001502:	f7ff fc69 	bl	8000dd8 <HAL_RCC_GetSysClockFreq>
 8001506:	e017      	b.n	8001538 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001508:	6862      	ldr	r2, [r4, #4]
 800150a:	0853      	lsrs	r3, r2, #1
 800150c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001510:	e7f2      	b.n	80014f8 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001516:	d1f4      	bne.n	8001502 <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001518:	f7ff fc5e 	bl	8000dd8 <HAL_RCC_GetSysClockFreq>
 800151c:	e7c4      	b.n	80014a8 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800151e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001522:	d1f1      	bne.n	8001508 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001524:	6860      	ldr	r0, [r4, #4]
 8001526:	0843      	lsrs	r3, r0, #1
 8001528:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800152c:	e76a      	b.n	8001404 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800152e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001532:	d0b7      	beq.n	80014a4 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001534:	f7ff fd44 	bl	8000fc0 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001538:	6863      	ldr	r3, [r4, #4]
 800153a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800153e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001542:	b280      	uxth	r0, r0
 8001544:	60e8      	str	r0, [r5, #12]
 8001546:	e7cf      	b.n	80014e8 <UART_SetConfig+0x194>
 8001548:	efff69f3 	.word	0xefff69f3
 800154c:	40013800 	.word	0x40013800
 8001550:	08001880 	.word	0x08001880
 8001554:	40004400 	.word	0x40004400
 8001558:	40004800 	.word	0x40004800
 800155c:	40004c00 	.word	0x40004c00
 8001560:	40005000 	.word	0x40005000

08001564 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001564:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001566:	07da      	lsls	r2, r3, #31
{
 8001568:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800156a:	d506      	bpl.n	800157a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800156c:	6801      	ldr	r1, [r0, #0]
 800156e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001570:	684a      	ldr	r2, [r1, #4]
 8001572:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001576:	4322      	orrs	r2, r4
 8001578:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800157a:	079c      	lsls	r4, r3, #30
 800157c:	d506      	bpl.n	800158c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800157e:	6801      	ldr	r1, [r0, #0]
 8001580:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001582:	684a      	ldr	r2, [r1, #4]
 8001584:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001588:	4322      	orrs	r2, r4
 800158a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800158c:	0759      	lsls	r1, r3, #29
 800158e:	d506      	bpl.n	800159e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001590:	6801      	ldr	r1, [r0, #0]
 8001592:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001594:	684a      	ldr	r2, [r1, #4]
 8001596:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800159a:	4322      	orrs	r2, r4
 800159c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800159e:	071a      	lsls	r2, r3, #28
 80015a0:	d506      	bpl.n	80015b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80015a2:	6801      	ldr	r1, [r0, #0]
 80015a4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80015a6:	684a      	ldr	r2, [r1, #4]
 80015a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015ac:	4322      	orrs	r2, r4
 80015ae:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80015b0:	06dc      	lsls	r4, r3, #27
 80015b2:	d506      	bpl.n	80015c2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80015b4:	6801      	ldr	r1, [r0, #0]
 80015b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80015b8:	688a      	ldr	r2, [r1, #8]
 80015ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015be:	4322      	orrs	r2, r4
 80015c0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80015c2:	0699      	lsls	r1, r3, #26
 80015c4:	d506      	bpl.n	80015d4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80015c6:	6801      	ldr	r1, [r0, #0]
 80015c8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80015ca:	688a      	ldr	r2, [r1, #8]
 80015cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015d0:	4322      	orrs	r2, r4
 80015d2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80015d4:	065a      	lsls	r2, r3, #25
 80015d6:	d50f      	bpl.n	80015f8 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80015d8:	6801      	ldr	r1, [r0, #0]
 80015da:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80015dc:	684a      	ldr	r2, [r1, #4]
 80015de:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80015e2:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80015e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80015e8:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80015ea:	d105      	bne.n	80015f8 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80015ec:	684a      	ldr	r2, [r1, #4]
 80015ee:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80015f0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80015f4:	4322      	orrs	r2, r4
 80015f6:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80015f8:	061b      	lsls	r3, r3, #24
 80015fa:	d506      	bpl.n	800160a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80015fc:	6802      	ldr	r2, [r0, #0]
 80015fe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001600:	6853      	ldr	r3, [r2, #4]
 8001602:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001606:	430b      	orrs	r3, r1
 8001608:	6053      	str	r3, [r2, #4]
 800160a:	bd10      	pop	{r4, pc}

0800160c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800160c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001610:	9d06      	ldr	r5, [sp, #24]
 8001612:	4604      	mov	r4, r0
 8001614:	460f      	mov	r7, r1
 8001616:	4616      	mov	r6, r2
 8001618:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800161a:	6821      	ldr	r1, [r4, #0]
 800161c:	69ca      	ldr	r2, [r1, #28]
 800161e:	ea37 0302 	bics.w	r3, r7, r2
 8001622:	bf0c      	ite	eq
 8001624:	2201      	moveq	r2, #1
 8001626:	2200      	movne	r2, #0
 8001628:	42b2      	cmp	r2, r6
 800162a:	d002      	beq.n	8001632 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800162c:	2000      	movs	r0, #0
}
 800162e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001632:	1c6b      	adds	r3, r5, #1
 8001634:	d0f2      	beq.n	800161c <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001636:	b99d      	cbnz	r5, 8001660 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001640:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	f022 0201 	bic.w	r2, r2, #1
 8001648:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800164a:	2320      	movs	r3, #32
 800164c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001650:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001654:	2300      	movs	r3, #0
 8001656:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800165a:	2003      	movs	r0, #3
 800165c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001660:	f7fe fff2 	bl	8000648 <HAL_GetTick>
 8001664:	eba0 0008 	sub.w	r0, r0, r8
 8001668:	4285      	cmp	r5, r0
 800166a:	d2d6      	bcs.n	800161a <UART_WaitOnFlagUntilTimeout+0xe>
 800166c:	e7e4      	b.n	8001638 <UART_WaitOnFlagUntilTimeout+0x2c>

0800166e <HAL_UART_Transmit>:
{
 800166e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001672:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001674:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001678:	2b20      	cmp	r3, #32
{
 800167a:	4604      	mov	r4, r0
 800167c:	460d      	mov	r5, r1
 800167e:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001680:	d14c      	bne.n	800171c <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8001682:	2900      	cmp	r1, #0
 8001684:	d048      	beq.n	8001718 <HAL_UART_Transmit+0xaa>
 8001686:	2a00      	cmp	r2, #0
 8001688:	d046      	beq.n	8001718 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 800168a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800168e:	2b01      	cmp	r3, #1
 8001690:	d044      	beq.n	800171c <HAL_UART_Transmit+0xae>
 8001692:	2301      	movs	r3, #1
 8001694:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001698:	2300      	movs	r3, #0
 800169a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800169c:	2321      	movs	r3, #33	; 0x21
 800169e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80016a2:	f7fe ffd1 	bl	8000648 <HAL_GetTick>
    huart->TxXferSize = Size;
 80016a6:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80016aa:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80016ac:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80016b0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80016b4:	b292      	uxth	r2, r2
 80016b6:	b962      	cbnz	r2, 80016d2 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016b8:	9700      	str	r7, [sp, #0]
 80016ba:	4633      	mov	r3, r6
 80016bc:	2140      	movs	r1, #64	; 0x40
 80016be:	4620      	mov	r0, r4
 80016c0:	f7ff ffa4 	bl	800160c <UART_WaitOnFlagUntilTimeout>
 80016c4:	b998      	cbnz	r0, 80016ee <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80016c6:	2320      	movs	r3, #32
 80016c8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 80016cc:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 80016d0:	e00e      	b.n	80016f0 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 80016d2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016d6:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29b      	uxth	r3, r3
 80016dc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016e0:	2200      	movs	r2, #0
 80016e2:	4633      	mov	r3, r6
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7ff ff90 	bl	800160c <UART_WaitOnFlagUntilTimeout>
 80016ec:	b118      	cbz	r0, 80016f6 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 80016ee:	2003      	movs	r0, #3
}
 80016f0:	b002      	add	sp, #8
 80016f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016f6:	68a3      	ldr	r3, [r4, #8]
 80016f8:	6822      	ldr	r2, [r4, #0]
 80016fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016fe:	d107      	bne.n	8001710 <HAL_UART_Transmit+0xa2>
 8001700:	6923      	ldr	r3, [r4, #16]
 8001702:	b92b      	cbnz	r3, 8001710 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001704:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800170c:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 800170e:	e7cf      	b.n	80016b0 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001710:	782b      	ldrb	r3, [r5, #0]
 8001712:	8513      	strh	r3, [r2, #40]	; 0x28
 8001714:	3501      	adds	r5, #1
 8001716:	e7cb      	b.n	80016b0 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001718:	2001      	movs	r0, #1
 800171a:	e7e9      	b.n	80016f0 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800171c:	2002      	movs	r0, #2
 800171e:	e7e7      	b.n	80016f0 <HAL_UART_Transmit+0x82>

08001720 <UART_CheckIdleState>:
{
 8001720:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001722:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001724:	2600      	movs	r6, #0
 8001726:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001728:	f7fe ff8e 	bl	8000648 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001732:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001734:	d417      	bmi.n	8001766 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001736:	6823      	ldr	r3, [r4, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	075b      	lsls	r3, r3, #29
 800173c:	d50a      	bpl.n	8001754 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800173e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2200      	movs	r2, #0
 8001746:	462b      	mov	r3, r5
 8001748:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800174c:	4620      	mov	r0, r4
 800174e:	f7ff ff5d 	bl	800160c <UART_WaitOnFlagUntilTimeout>
 8001752:	b9a0      	cbnz	r0, 800177e <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001754:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001756:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001758:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800175c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001760:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001764:	e00c      	b.n	8001780 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001766:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	4632      	mov	r2, r6
 800176e:	4603      	mov	r3, r0
 8001770:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001774:	4620      	mov	r0, r4
 8001776:	f7ff ff49 	bl	800160c <UART_WaitOnFlagUntilTimeout>
 800177a:	2800      	cmp	r0, #0
 800177c:	d0db      	beq.n	8001736 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800177e:	2003      	movs	r0, #3
}
 8001780:	b002      	add	sp, #8
 8001782:	bd70      	pop	{r4, r5, r6, pc}

08001784 <HAL_UART_Init>:
{
 8001784:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001786:	4604      	mov	r4, r0
 8001788:	b360      	cbz	r0, 80017e4 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800178a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800178e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001792:	b91b      	cbnz	r3, 800179c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001794:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001798:	f7fe feb8 	bl	800050c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800179c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800179e:	2324      	movs	r3, #36	; 0x24
 80017a0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80017a4:	6813      	ldr	r3, [r2, #0]
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80017ac:	4620      	mov	r0, r4
 80017ae:	f7ff fdd1 	bl	8001354 <UART_SetConfig>
 80017b2:	2801      	cmp	r0, #1
 80017b4:	d016      	beq.n	80017e4 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80017b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017b8:	b113      	cbz	r3, 80017c0 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80017ba:	4620      	mov	r0, r4
 80017bc:	f7ff fed2 	bl	8001564 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017c0:	6823      	ldr	r3, [r4, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017d0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80017d8:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80017da:	601a      	str	r2, [r3, #0]
}
 80017dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80017e0:	f7ff bf9e 	b.w	8001720 <UART_CheckIdleState>
}
 80017e4:	2001      	movs	r0, #1
 80017e6:	bd10      	pop	{r4, pc}

080017e8 <__libc_init_array>:
 80017e8:	b570      	push	{r4, r5, r6, lr}
 80017ea:	4e0d      	ldr	r6, [pc, #52]	; (8001820 <__libc_init_array+0x38>)
 80017ec:	4c0d      	ldr	r4, [pc, #52]	; (8001824 <__libc_init_array+0x3c>)
 80017ee:	1ba4      	subs	r4, r4, r6
 80017f0:	10a4      	asrs	r4, r4, #2
 80017f2:	2500      	movs	r5, #0
 80017f4:	42a5      	cmp	r5, r4
 80017f6:	d109      	bne.n	800180c <__libc_init_array+0x24>
 80017f8:	4e0b      	ldr	r6, [pc, #44]	; (8001828 <__libc_init_array+0x40>)
 80017fa:	4c0c      	ldr	r4, [pc, #48]	; (800182c <__libc_init_array+0x44>)
 80017fc:	f000 f818 	bl	8001830 <_init>
 8001800:	1ba4      	subs	r4, r4, r6
 8001802:	10a4      	asrs	r4, r4, #2
 8001804:	2500      	movs	r5, #0
 8001806:	42a5      	cmp	r5, r4
 8001808:	d105      	bne.n	8001816 <__libc_init_array+0x2e>
 800180a:	bd70      	pop	{r4, r5, r6, pc}
 800180c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001810:	4798      	blx	r3
 8001812:	3501      	adds	r5, #1
 8001814:	e7ee      	b.n	80017f4 <__libc_init_array+0xc>
 8001816:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800181a:	4798      	blx	r3
 800181c:	3501      	adds	r5, #1
 800181e:	e7f2      	b.n	8001806 <__libc_init_array+0x1e>
 8001820:	08001884 	.word	0x08001884
 8001824:	08001884 	.word	0x08001884
 8001828:	08001884 	.word	0x08001884
 800182c:	08001888 	.word	0x08001888

08001830 <_init>:
 8001830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001832:	bf00      	nop
 8001834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001836:	bc08      	pop	{r3}
 8001838:	469e      	mov	lr, r3
 800183a:	4770      	bx	lr

0800183c <_fini>:
 800183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183e:	bf00      	nop
 8001840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001842:	bc08      	pop	{r3}
 8001844:	469e      	mov	lr, r3
 8001846:	4770      	bx	lr
