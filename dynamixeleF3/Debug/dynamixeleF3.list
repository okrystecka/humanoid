
dynamixeleF3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015d8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800176c  0800176c  0001176c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080017a8  080017a8  000117a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080017ac  080017ac  000117ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080017b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000100  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000104  20000104  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c5bd  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001b2c  00000000  00000000  0002c5f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002f44  00000000  00000000  0002e11d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000004f0  00000000  00000000  00031068  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000007a0  00000000  00000000  00031558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000352e  00000000  00000000  00031cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000259c  00000000  00000000  00035226  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000377c2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000c6c  00000000  00000000  00037840  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001754 	.word	0x08001754

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08001754 	.word	0x08001754

080001d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001d4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001d6:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <HAL_InitTick+0x24>)
{
 80001d8:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001da:	6818      	ldr	r0, [r3, #0]
 80001dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e4:	f000 f880 	bl	80002e8 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001e8:	2200      	movs	r2, #0
 80001ea:	4621      	mov	r1, r4
 80001ec:	f04f 30ff 	mov.w	r0, #4294967295
 80001f0:	f000 f846 	bl	8000280 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001f4:	2000      	movs	r0, #0
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000000 	.word	0x20000000

080001fc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001fc:	4a07      	ldr	r2, [pc, #28]	; (800021c <HAL_Init+0x20>)
{
 80001fe:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000200:	6813      	ldr	r3, [r2, #0]
 8000202:	f043 0310 	orr.w	r3, r3, #16
 8000206:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000208:	2003      	movs	r0, #3
 800020a:	f000 f827 	bl	800025c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800020e:	2000      	movs	r0, #0
 8000210:	f7ff ffe0 	bl	80001d4 <HAL_InitTick>
  HAL_MspInit();
 8000214:	f001 f988 	bl	8001528 <HAL_MspInit>
}
 8000218:	2000      	movs	r0, #0
 800021a:	bd08      	pop	{r3, pc}
 800021c:	40022000 	.word	0x40022000

08000220 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000220:	4a02      	ldr	r2, [pc, #8]	; (800022c <HAL_IncTick+0xc>)
 8000222:	6813      	ldr	r3, [r2, #0]
 8000224:	3301      	adds	r3, #1
 8000226:	6013      	str	r3, [r2, #0]
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000020 	.word	0x20000020

08000230 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000230:	4b01      	ldr	r3, [pc, #4]	; (8000238 <HAL_GetTick+0x8>)
 8000232:	6818      	ldr	r0, [r3, #0]
}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	20000020 	.word	0x20000020

0800023c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800023c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800023e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000240:	f7ff fff6 	bl	8000230 <HAL_GetTick>
  uint32_t wait = Delay;
 8000244:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000246:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000248:	4605      	mov	r5, r0
  {
     wait++;
 800024a:	bf18      	it	ne
 800024c:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800024e:	f7ff ffef 	bl	8000230 <HAL_GetTick>
 8000252:	1b40      	subs	r0, r0, r5
 8000254:	42a0      	cmp	r0, r4
 8000256:	d3fa      	bcc.n	800024e <HAL_Delay+0x12>
  {
  }
}
 8000258:	b003      	add	sp, #12
 800025a:	bd30      	pop	{r4, r5, pc}

0800025c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800025c:	4a07      	ldr	r2, [pc, #28]	; (800027c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800025e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000260:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000264:	041b      	lsls	r3, r3, #16
 8000266:	0c1b      	lsrs	r3, r3, #16
 8000268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800026c:	0200      	lsls	r0, r0, #8
 800026e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000272:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000276:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000278:	60d3      	str	r3, [r2, #12]
 800027a:	4770      	bx	lr
 800027c:	e000ed00 	.word	0xe000ed00

08000280 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000280:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000282:	b530      	push	{r4, r5, lr}
 8000284:	68dc      	ldr	r4, [r3, #12]
 8000286:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800028a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800028e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000290:	2b04      	cmp	r3, #4
 8000292:	bf28      	it	cs
 8000294:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000298:	f04f 0501 	mov.w	r5, #1
 800029c:	fa05 f303 	lsl.w	r3, r5, r3
 80002a0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a4:	bf8c      	ite	hi
 80002a6:	3c03      	subhi	r4, #3
 80002a8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002aa:	4019      	ands	r1, r3
 80002ac:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002ae:	fa05 f404 	lsl.w	r4, r5, r4
 80002b2:	3c01      	subs	r4, #1
 80002b4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002b6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b8:	ea42 0201 	orr.w	r2, r2, r1
 80002bc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	bfaf      	iteee	ge
 80002c2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c6:	f000 000f 	andlt.w	r0, r0, #15
 80002ca:	4b06      	ldrlt	r3, [pc, #24]	; (80002e4 <HAL_NVIC_SetPriority+0x64>)
 80002cc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ce:	bfa5      	ittet	ge
 80002d0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002d4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002dc:	bd30      	pop	{r4, r5, pc}
 80002de:	bf00      	nop
 80002e0:	e000ed00 	.word	0xe000ed00
 80002e4:	e000ed14 	.word	0xe000ed14

080002e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002e8:	3801      	subs	r0, #1
 80002ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ee:	d20a      	bcs.n	8000306 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	4a07      	ldr	r2, [pc, #28]	; (8000310 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002f4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	21f0      	movs	r1, #240	; 0xf0
 80002f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002fe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000300:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000306:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	e000e010 	.word	0xe000e010
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000314:	4b04      	ldr	r3, [pc, #16]	; (8000328 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000316:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000318:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800031a:	bf0c      	ite	eq
 800031c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000320:	f022 0204 	bicne.w	r2, r2, #4
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	4770      	bx	lr
 8000328:	e000e010 	.word	0xe000e010

0800032c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800032c:	4770      	bx	lr

0800032e <HAL_SYSTICK_IRQHandler>:
{
 800032e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000330:	f7ff fffc 	bl	800032c <HAL_SYSTICK_Callback>
 8000334:	bd08      	pop	{r3, pc}
	...

08000338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800033c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000340:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80004d4 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000344:	4a61      	ldr	r2, [pc, #388]	; (80004cc <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000346:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000348:	fa38 f403 	lsrs.w	r4, r8, r3
 800034c:	d102      	bne.n	8000354 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 800034e:	b003      	add	sp, #12
 8000350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000354:	f04f 0e01 	mov.w	lr, #1
 8000358:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 800035c:	ea18 060e 	ands.w	r6, r8, lr
 8000360:	f000 80a6 	beq.w	80004b0 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000364:	684c      	ldr	r4, [r1, #4]
 8000366:	f024 0710 	bic.w	r7, r4, #16
 800036a:	2f02      	cmp	r7, #2
 800036c:	d116      	bne.n	800039c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 800036e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000372:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000376:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800037a:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800037e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000382:	f04f 0c0f 	mov.w	ip, #15
 8000386:	fa0c fc0b 	lsl.w	ip, ip, fp
 800038a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800038e:	690d      	ldr	r5, [r1, #16]
 8000390:	fa05 f50b 	lsl.w	r5, r5, fp
 8000394:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000398:	f8ca 5020 	str.w	r5, [sl, #32]
 800039c:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003a0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80003a2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003a6:	fa05 f50a 	lsl.w	r5, r5, sl
 80003aa:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ac:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003b0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003b4:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ba:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003be:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80003c0:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003c4:	d811      	bhi.n	80003ea <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80003c6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003c8:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003cc:	68cf      	ldr	r7, [r1, #12]
 80003ce:	fa07 fc0a 	lsl.w	ip, r7, sl
 80003d2:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80003d6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80003d8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003da:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003de:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80003e2:	409f      	lsls	r7, r3
 80003e4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80003e8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80003ea:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003ec:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003ee:	688f      	ldr	r7, [r1, #8]
 80003f0:	fa07 f70a 	lsl.w	r7, r7, sl
 80003f4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80003f6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003f8:	00e5      	lsls	r5, r4, #3
 80003fa:	d559      	bpl.n	80004b0 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fc:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000400:	f045 0501 	orr.w	r5, r5, #1
 8000404:	f8c9 5018 	str.w	r5, [r9, #24]
 8000408:	f8d9 5018 	ldr.w	r5, [r9, #24]
 800040c:	f023 0703 	bic.w	r7, r3, #3
 8000410:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000414:	f005 0501 	and.w	r5, r5, #1
 8000418:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800041c:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800041e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000422:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000424:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000426:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800042a:	f04f 0e0f 	mov.w	lr, #15
 800042e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000432:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000436:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800043a:	d03b      	beq.n	80004b4 <HAL_GPIO_Init+0x17c>
 800043c:	4d24      	ldr	r5, [pc, #144]	; (80004d0 <HAL_GPIO_Init+0x198>)
 800043e:	42a8      	cmp	r0, r5
 8000440:	d03a      	beq.n	80004b8 <HAL_GPIO_Init+0x180>
 8000442:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000446:	42a8      	cmp	r0, r5
 8000448:	d038      	beq.n	80004bc <HAL_GPIO_Init+0x184>
 800044a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800044e:	42a8      	cmp	r0, r5
 8000450:	d036      	beq.n	80004c0 <HAL_GPIO_Init+0x188>
 8000452:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000456:	42a8      	cmp	r0, r5
 8000458:	d034      	beq.n	80004c4 <HAL_GPIO_Init+0x18c>
 800045a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800045e:	42a8      	cmp	r0, r5
 8000460:	d032      	beq.n	80004c8 <HAL_GPIO_Init+0x190>
 8000462:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000466:	42a8      	cmp	r0, r5
 8000468:	bf14      	ite	ne
 800046a:	2507      	movne	r5, #7
 800046c:	2506      	moveq	r5, #6
 800046e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000472:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000476:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000478:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800047a:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800047c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000480:	bf0c      	ite	eq
 8000482:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000484:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000486:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000488:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800048a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800048e:	bf0c      	ite	eq
 8000490:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000492:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000494:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000496:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000498:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800049c:	bf0c      	ite	eq
 800049e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80004a0:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80004a2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80004a4:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004a6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80004a8:	bf54      	ite	pl
 80004aa:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80004ac:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80004ae:	60d5      	str	r5, [r2, #12]
    position++;
 80004b0:	3301      	adds	r3, #1
 80004b2:	e749      	b.n	8000348 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80004b4:	2500      	movs	r5, #0
 80004b6:	e7da      	b.n	800046e <HAL_GPIO_Init+0x136>
 80004b8:	2501      	movs	r5, #1
 80004ba:	e7d8      	b.n	800046e <HAL_GPIO_Init+0x136>
 80004bc:	2502      	movs	r5, #2
 80004be:	e7d6      	b.n	800046e <HAL_GPIO_Init+0x136>
 80004c0:	2503      	movs	r5, #3
 80004c2:	e7d4      	b.n	800046e <HAL_GPIO_Init+0x136>
 80004c4:	2504      	movs	r5, #4
 80004c6:	e7d2      	b.n	800046e <HAL_GPIO_Init+0x136>
 80004c8:	2505      	movs	r5, #5
 80004ca:	e7d0      	b.n	800046e <HAL_GPIO_Init+0x136>
 80004cc:	40010400 	.word	0x40010400
 80004d0:	48000400 	.word	0x48000400
 80004d4:	40021000 	.word	0x40021000

080004d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004d8:	b10a      	cbz	r2, 80004de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004da:	6181      	str	r1, [r0, #24]
 80004dc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004de:	6281      	str	r1, [r0, #40]	; 0x28
 80004e0:	4770      	bx	lr
	...

080004e4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004e4:	6803      	ldr	r3, [r0, #0]
{
 80004e6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ea:	07df      	lsls	r7, r3, #31
{
 80004ec:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ee:	d411      	bmi.n	8000514 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004f0:	682b      	ldr	r3, [r5, #0]
 80004f2:	079e      	lsls	r6, r3, #30
 80004f4:	f100 808b 	bmi.w	800060e <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004f8:	682b      	ldr	r3, [r5, #0]
 80004fa:	071c      	lsls	r4, r3, #28
 80004fc:	f100 80fe 	bmi.w	80006fc <HAL_RCC_OscConfig+0x218>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000500:	682b      	ldr	r3, [r5, #0]
 8000502:	0758      	lsls	r0, r3, #29
 8000504:	f100 8147 	bmi.w	8000796 <HAL_RCC_OscConfig+0x2b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000508:	69aa      	ldr	r2, [r5, #24]
 800050a:	2a00      	cmp	r2, #0
 800050c:	f040 81dd 	bne.w	80008ca <HAL_RCC_OscConfig+0x3e6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000510:	2000      	movs	r0, #0
 8000512:	e024      	b.n	800055e <HAL_RCC_OscConfig+0x7a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000514:	4cbd      	ldr	r4, [pc, #756]	; (800080c <HAL_RCC_OscConfig+0x328>)
 8000516:	6863      	ldr	r3, [r4, #4]
 8000518:	f003 030c 	and.w	r3, r3, #12
 800051c:	2b04      	cmp	r3, #4
 800051e:	d00a      	beq.n	8000536 <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000520:	6863      	ldr	r3, [r4, #4]
 8000522:	f003 030c 	and.w	r3, r3, #12
 8000526:	2b08      	cmp	r3, #8
 8000528:	d11c      	bne.n	8000564 <HAL_RCC_OscConfig+0x80>
 800052a:	6863      	ldr	r3, [r4, #4]
 800052c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000534:	d116      	bne.n	8000564 <HAL_RCC_OscConfig+0x80>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000536:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800053a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800053e:	6821      	ldr	r1, [r4, #0]
 8000540:	fa93 f3a3 	rbit	r3, r3
 8000544:	fab3 f383 	clz	r3, r3
 8000548:	f003 031f 	and.w	r3, r3, #31
 800054c:	2201      	movs	r2, #1
 800054e:	fa02 f303 	lsl.w	r3, r2, r3
 8000552:	420b      	tst	r3, r1
 8000554:	d0cc      	beq.n	80004f0 <HAL_RCC_OscConfig+0xc>
 8000556:	686b      	ldr	r3, [r5, #4]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d1c9      	bne.n	80004f0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800055c:	2001      	movs	r0, #1
}
 800055e:	b002      	add	sp, #8
 8000560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000564:	686b      	ldr	r3, [r5, #4]
 8000566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800056a:	d11e      	bne.n	80005aa <HAL_RCC_OscConfig+0xc6>
 800056c:	6823      	ldr	r3, [r4, #0]
 800056e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000572:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000574:	f7ff fe5c 	bl	8000230 <HAL_GetTick>
 8000578:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800057c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800057e:	2701      	movs	r7, #1
 8000580:	fa96 f3a6 	rbit	r3, r6
 8000584:	6822      	ldr	r2, [r4, #0]
 8000586:	fa96 f3a6 	rbit	r3, r6
 800058a:	fab3 f383 	clz	r3, r3
 800058e:	f003 031f 	and.w	r3, r3, #31
 8000592:	fa07 f303 	lsl.w	r3, r7, r3
 8000596:	4213      	tst	r3, r2
 8000598:	d1aa      	bne.n	80004f0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800059a:	f7ff fe49 	bl	8000230 <HAL_GetTick>
 800059e:	eba0 0008 	sub.w	r0, r0, r8
 80005a2:	2864      	cmp	r0, #100	; 0x64
 80005a4:	d9ec      	bls.n	8000580 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 80005a6:	2003      	movs	r0, #3
 80005a8:	e7d9      	b.n	800055e <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005aa:	bb0b      	cbnz	r3, 80005f0 <HAL_RCC_OscConfig+0x10c>
 80005ac:	6823      	ldr	r3, [r4, #0]
 80005ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005b2:	6023      	str	r3, [r4, #0]
 80005b4:	6823      	ldr	r3, [r4, #0]
 80005b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005bc:	f7ff fe38 	bl	8000230 <HAL_GetTick>
 80005c0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005c4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005c6:	2701      	movs	r7, #1
 80005c8:	fa96 f3a6 	rbit	r3, r6
 80005cc:	6822      	ldr	r2, [r4, #0]
 80005ce:	fa96 f3a6 	rbit	r3, r6
 80005d2:	fab3 f383 	clz	r3, r3
 80005d6:	f003 031f 	and.w	r3, r3, #31
 80005da:	fa07 f303 	lsl.w	r3, r7, r3
 80005de:	4213      	tst	r3, r2
 80005e0:	d086      	beq.n	80004f0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005e2:	f7ff fe25 	bl	8000230 <HAL_GetTick>
 80005e6:	eba0 0008 	sub.w	r0, r0, r8
 80005ea:	2864      	cmp	r0, #100	; 0x64
 80005ec:	d9ec      	bls.n	80005c8 <HAL_RCC_OscConfig+0xe4>
 80005ee:	e7da      	b.n	80005a6 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005f4:	6823      	ldr	r3, [r4, #0]
 80005f6:	d103      	bne.n	8000600 <HAL_RCC_OscConfig+0x11c>
 80005f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005fc:	6023      	str	r3, [r4, #0]
 80005fe:	e7b5      	b.n	800056c <HAL_RCC_OscConfig+0x88>
 8000600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000604:	6023      	str	r3, [r4, #0]
 8000606:	6823      	ldr	r3, [r4, #0]
 8000608:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800060c:	e7b1      	b.n	8000572 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800060e:	4c7f      	ldr	r4, [pc, #508]	; (800080c <HAL_RCC_OscConfig+0x328>)
 8000610:	6863      	ldr	r3, [r4, #4]
 8000612:	f013 0f0c 	tst.w	r3, #12
 8000616:	d00a      	beq.n	800062e <HAL_RCC_OscConfig+0x14a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000618:	6863      	ldr	r3, [r4, #4]
 800061a:	f003 030c 	and.w	r3, r3, #12
 800061e:	2b08      	cmp	r3, #8
 8000620:	d124      	bne.n	800066c <HAL_RCC_OscConfig+0x188>
 8000622:	6863      	ldr	r3, [r4, #4]
 8000624:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800062c:	d11e      	bne.n	800066c <HAL_RCC_OscConfig+0x188>
 800062e:	2302      	movs	r3, #2
 8000630:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000634:	6821      	ldr	r1, [r4, #0]
 8000636:	fa93 f3a3 	rbit	r3, r3
 800063a:	fab3 f383 	clz	r3, r3
 800063e:	f003 031f 	and.w	r3, r3, #31
 8000642:	2201      	movs	r2, #1
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	420b      	tst	r3, r1
 800064a:	d002      	beq.n	8000652 <HAL_RCC_OscConfig+0x16e>
 800064c:	68eb      	ldr	r3, [r5, #12]
 800064e:	4293      	cmp	r3, r2
 8000650:	d184      	bne.n	800055c <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000652:	6821      	ldr	r1, [r4, #0]
 8000654:	23f8      	movs	r3, #248	; 0xf8
 8000656:	fa93 f3a3 	rbit	r3, r3
 800065a:	fab3 f283 	clz	r2, r3
 800065e:	692b      	ldr	r3, [r5, #16]
 8000660:	4093      	lsls	r3, r2
 8000662:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000666:	4313      	orrs	r3, r2
 8000668:	6023      	str	r3, [r4, #0]
 800066a:	e745      	b.n	80004f8 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800066c:	68ea      	ldr	r2, [r5, #12]
 800066e:	2601      	movs	r6, #1
 8000670:	b30a      	cbz	r2, 80006b6 <HAL_RCC_OscConfig+0x1d2>
 8000672:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000676:	fab3 f383 	clz	r3, r3
 800067a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800067e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	2702      	movs	r7, #2
 8000686:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000688:	f7ff fdd2 	bl	8000230 <HAL_GetTick>
 800068c:	4680      	mov	r8, r0
 800068e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000692:	6822      	ldr	r2, [r4, #0]
 8000694:	fa97 f3a7 	rbit	r3, r7
 8000698:	fab3 f383 	clz	r3, r3
 800069c:	f003 031f 	and.w	r3, r3, #31
 80006a0:	fa06 f303 	lsl.w	r3, r6, r3
 80006a4:	4213      	tst	r3, r2
 80006a6:	d1d4      	bne.n	8000652 <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006a8:	f7ff fdc2 	bl	8000230 <HAL_GetTick>
 80006ac:	eba0 0008 	sub.w	r0, r0, r8
 80006b0:	2802      	cmp	r0, #2
 80006b2:	d9ec      	bls.n	800068e <HAL_RCC_OscConfig+0x1aa>
 80006b4:	e777      	b.n	80005a6 <HAL_RCC_OscConfig+0xc2>
 80006b6:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80006ba:	fab3 f383 	clz	r3, r3
 80006be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	2702      	movs	r7, #2
 80006ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006cc:	f7ff fdb0 	bl	8000230 <HAL_GetTick>
 80006d0:	4680      	mov	r8, r0
 80006d2:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006d6:	6822      	ldr	r2, [r4, #0]
 80006d8:	fa97 f3a7 	rbit	r3, r7
 80006dc:	fab3 f383 	clz	r3, r3
 80006e0:	f003 031f 	and.w	r3, r3, #31
 80006e4:	fa06 f303 	lsl.w	r3, r6, r3
 80006e8:	4213      	tst	r3, r2
 80006ea:	f43f af05 	beq.w	80004f8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006ee:	f7ff fd9f 	bl	8000230 <HAL_GetTick>
 80006f2:	eba0 0008 	sub.w	r0, r0, r8
 80006f6:	2802      	cmp	r0, #2
 80006f8:	d9eb      	bls.n	80006d2 <HAL_RCC_OscConfig+0x1ee>
 80006fa:	e754      	b.n	80005a6 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006fc:	696a      	ldr	r2, [r5, #20]
 80006fe:	4e43      	ldr	r6, [pc, #268]	; (800080c <HAL_RCC_OscConfig+0x328>)
 8000700:	4943      	ldr	r1, [pc, #268]	; (8000810 <HAL_RCC_OscConfig+0x32c>)
 8000702:	2401      	movs	r4, #1
 8000704:	b31a      	cbz	r2, 800074e <HAL_RCC_OscConfig+0x26a>
 8000706:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 800070a:	fab3 f383 	clz	r3, r3
 800070e:	440b      	add	r3, r1
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	2702      	movs	r7, #2
 8000714:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000716:	f7ff fd8b 	bl	8000230 <HAL_GetTick>
 800071a:	4680      	mov	r8, r0
 800071c:	fa97 f3a7 	rbit	r3, r7
 8000720:	fa97 f3a7 	rbit	r3, r7
 8000724:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000728:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800072a:	fa97 f3a7 	rbit	r3, r7
 800072e:	fab3 f383 	clz	r3, r3
 8000732:	f003 031f 	and.w	r3, r3, #31
 8000736:	fa04 f303 	lsl.w	r3, r4, r3
 800073a:	4213      	tst	r3, r2
 800073c:	f47f aee0 	bne.w	8000500 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000740:	f7ff fd76 	bl	8000230 <HAL_GetTick>
 8000744:	eba0 0008 	sub.w	r0, r0, r8
 8000748:	2802      	cmp	r0, #2
 800074a:	d9e7      	bls.n	800071c <HAL_RCC_OscConfig+0x238>
 800074c:	e72b      	b.n	80005a6 <HAL_RCC_OscConfig+0xc2>
 800074e:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000752:	fab3 f383 	clz	r3, r3
 8000756:	440b      	add	r3, r1
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	2702      	movs	r7, #2
 800075c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800075e:	f7ff fd67 	bl	8000230 <HAL_GetTick>
 8000762:	4680      	mov	r8, r0
 8000764:	fa97 f3a7 	rbit	r3, r7
 8000768:	fa97 f3a7 	rbit	r3, r7
 800076c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000770:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000772:	fa97 f3a7 	rbit	r3, r7
 8000776:	fab3 f383 	clz	r3, r3
 800077a:	f003 031f 	and.w	r3, r3, #31
 800077e:	fa04 f303 	lsl.w	r3, r4, r3
 8000782:	4213      	tst	r3, r2
 8000784:	f43f aebc 	beq.w	8000500 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000788:	f7ff fd52 	bl	8000230 <HAL_GetTick>
 800078c:	eba0 0008 	sub.w	r0, r0, r8
 8000790:	2802      	cmp	r0, #2
 8000792:	d9e7      	bls.n	8000764 <HAL_RCC_OscConfig+0x280>
 8000794:	e707      	b.n	80005a6 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000796:	4c1d      	ldr	r4, [pc, #116]	; (800080c <HAL_RCC_OscConfig+0x328>)
 8000798:	69e3      	ldr	r3, [r4, #28]
 800079a:	00d9      	lsls	r1, r3, #3
 800079c:	d434      	bmi.n	8000808 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	69e3      	ldr	r3, [r4, #28]
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a4:	61e3      	str	r3, [r4, #28]
 80007a6:	69e3      	ldr	r3, [r4, #28]
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ac:	9301      	str	r3, [sp, #4]
 80007ae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80007b0:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007b2:	4f18      	ldr	r7, [pc, #96]	; (8000814 <HAL_RCC_OscConfig+0x330>)
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	05da      	lsls	r2, r3, #23
 80007b8:	d52e      	bpl.n	8000818 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007ba:	68ab      	ldr	r3, [r5, #8]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d13c      	bne.n	800083a <HAL_RCC_OscConfig+0x356>
 80007c0:	6a23      	ldr	r3, [r4, #32]
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007c8:	f7ff fd32 	bl	8000230 <HAL_GetTick>
 80007cc:	2702      	movs	r7, #2
 80007ce:	4682      	mov	sl, r0
 80007d0:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007d2:	f04f 0801 	mov.w	r8, #1
 80007d6:	fa97 f3a7 	rbit	r3, r7
 80007da:	fa97 f3a7 	rbit	r3, r7
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d06b      	beq.n	80008ba <HAL_RCC_OscConfig+0x3d6>
 80007e2:	6a22      	ldr	r2, [r4, #32]
 80007e4:	fa99 f3a9 	rbit	r3, r9
 80007e8:	fab3 f383 	clz	r3, r3
 80007ec:	f003 031f 	and.w	r3, r3, #31
 80007f0:	fa08 f303 	lsl.w	r3, r8, r3
 80007f4:	4213      	tst	r3, r2
 80007f6:	d057      	beq.n	80008a8 <HAL_RCC_OscConfig+0x3c4>
    if(pwrclkchanged == SET)
 80007f8:	2e00      	cmp	r6, #0
 80007fa:	f43f ae85 	beq.w	8000508 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007fe:	69e3      	ldr	r3, [r4, #28]
 8000800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000804:	61e3      	str	r3, [r4, #28]
 8000806:	e67f      	b.n	8000508 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000808:	2600      	movs	r6, #0
 800080a:	e7d2      	b.n	80007b2 <HAL_RCC_OscConfig+0x2ce>
 800080c:	40021000 	.word	0x40021000
 8000810:	10908120 	.word	0x10908120
 8000814:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800081e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000820:	f7ff fd06 	bl	8000230 <HAL_GetTick>
 8000824:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	05db      	lsls	r3, r3, #23
 800082a:	d4c6      	bmi.n	80007ba <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800082c:	f7ff fd00 	bl	8000230 <HAL_GetTick>
 8000830:	eba0 0008 	sub.w	r0, r0, r8
 8000834:	2864      	cmp	r0, #100	; 0x64
 8000836:	d9f6      	bls.n	8000826 <HAL_RCC_OscConfig+0x342>
 8000838:	e6b5      	b.n	80005a6 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800083a:	bb3b      	cbnz	r3, 800088c <HAL_RCC_OscConfig+0x3a8>
 800083c:	6a23      	ldr	r3, [r4, #32]
 800083e:	f023 0301 	bic.w	r3, r3, #1
 8000842:	6223      	str	r3, [r4, #32]
 8000844:	6a23      	ldr	r3, [r4, #32]
 8000846:	f023 0304 	bic.w	r3, r3, #4
 800084a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800084c:	f7ff fcf0 	bl	8000230 <HAL_GetTick>
 8000850:	2702      	movs	r7, #2
 8000852:	4682      	mov	sl, r0
 8000854:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000856:	f04f 0801 	mov.w	r8, #1
 800085a:	fa97 f3a7 	rbit	r3, r7
 800085e:	fa97 f3a7 	rbit	r3, r7
 8000862:	b373      	cbz	r3, 80008c2 <HAL_RCC_OscConfig+0x3de>
 8000864:	6a22      	ldr	r2, [r4, #32]
 8000866:	fa99 f3a9 	rbit	r3, r9
 800086a:	fab3 f383 	clz	r3, r3
 800086e:	f003 031f 	and.w	r3, r3, #31
 8000872:	fa08 f303 	lsl.w	r3, r8, r3
 8000876:	4213      	tst	r3, r2
 8000878:	d0be      	beq.n	80007f8 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800087a:	f7ff fcd9 	bl	8000230 <HAL_GetTick>
 800087e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000882:	eba0 000a 	sub.w	r0, r0, sl
 8000886:	4298      	cmp	r0, r3
 8000888:	d9e7      	bls.n	800085a <HAL_RCC_OscConfig+0x376>
 800088a:	e68c      	b.n	80005a6 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800088c:	2b05      	cmp	r3, #5
 800088e:	6a23      	ldr	r3, [r4, #32]
 8000890:	d103      	bne.n	800089a <HAL_RCC_OscConfig+0x3b6>
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6223      	str	r3, [r4, #32]
 8000898:	e792      	b.n	80007c0 <HAL_RCC_OscConfig+0x2dc>
 800089a:	f023 0301 	bic.w	r3, r3, #1
 800089e:	6223      	str	r3, [r4, #32]
 80008a0:	6a23      	ldr	r3, [r4, #32]
 80008a2:	f023 0304 	bic.w	r3, r3, #4
 80008a6:	e78e      	b.n	80007c6 <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008a8:	f7ff fcc2 	bl	8000230 <HAL_GetTick>
 80008ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80008b0:	eba0 000a 	sub.w	r0, r0, sl
 80008b4:	4298      	cmp	r0, r3
 80008b6:	d98e      	bls.n	80007d6 <HAL_RCC_OscConfig+0x2f2>
 80008b8:	e675      	b.n	80005a6 <HAL_RCC_OscConfig+0xc2>
 80008ba:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008c0:	e790      	b.n	80007e4 <HAL_RCC_OscConfig+0x300>
 80008c2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008c8:	e7cd      	b.n	8000866 <HAL_RCC_OscConfig+0x382>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008ca:	4c44      	ldr	r4, [pc, #272]	; (80009dc <HAL_RCC_OscConfig+0x4f8>)
 80008cc:	6863      	ldr	r3, [r4, #4]
 80008ce:	f003 030c 	and.w	r3, r3, #12
 80008d2:	2b08      	cmp	r3, #8
 80008d4:	f43f ae42 	beq.w	800055c <HAL_RCC_OscConfig+0x78>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008d8:	2a02      	cmp	r2, #2
 80008da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008de:	d158      	bne.n	8000992 <HAL_RCC_OscConfig+0x4ae>
 80008e0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80008e4:	fab3 f383 	clz	r3, r3
 80008e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008f6:	f7ff fc9b 	bl	8000230 <HAL_GetTick>
 80008fa:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80008fe:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000900:	2601      	movs	r6, #1
 8000902:	fa97 f3a7 	rbit	r3, r7
 8000906:	6822      	ldr	r2, [r4, #0]
 8000908:	fa97 f3a7 	rbit	r3, r7
 800090c:	fab3 f383 	clz	r3, r3
 8000910:	f003 031f 	and.w	r3, r3, #31
 8000914:	fa06 f303 	lsl.w	r3, r6, r3
 8000918:	4213      	tst	r3, r2
 800091a:	d133      	bne.n	8000984 <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800091c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800091e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000920:	f023 030f 	bic.w	r3, r3, #15
 8000924:	4313      	orrs	r3, r2
 8000926:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000928:	6862      	ldr	r2, [r4, #4]
 800092a:	6a2b      	ldr	r3, [r5, #32]
 800092c:	69e9      	ldr	r1, [r5, #28]
 800092e:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8000932:	430b      	orrs	r3, r1
 8000934:	4313      	orrs	r3, r2
 8000936:	6063      	str	r3, [r4, #4]
 8000938:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800093c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000940:	fab3 f383 	clz	r3, r3
 8000944:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000948:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000952:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000954:	f7ff fc6c 	bl	8000230 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000958:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800095a:	4607      	mov	r7, r0
 800095c:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000960:	6822      	ldr	r2, [r4, #0]
 8000962:	fa95 f3a5 	rbit	r3, r5
 8000966:	fab3 f383 	clz	r3, r3
 800096a:	f003 031f 	and.w	r3, r3, #31
 800096e:	fa06 f303 	lsl.w	r3, r6, r3
 8000972:	4213      	tst	r3, r2
 8000974:	f47f adcc 	bne.w	8000510 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000978:	f7ff fc5a 	bl	8000230 <HAL_GetTick>
 800097c:	1bc0      	subs	r0, r0, r7
 800097e:	2802      	cmp	r0, #2
 8000980:	d9ec      	bls.n	800095c <HAL_RCC_OscConfig+0x478>
 8000982:	e610      	b.n	80005a6 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000984:	f7ff fc54 	bl	8000230 <HAL_GetTick>
 8000988:	eba0 0008 	sub.w	r0, r0, r8
 800098c:	2802      	cmp	r0, #2
 800098e:	d9b8      	bls.n	8000902 <HAL_RCC_OscConfig+0x41e>
 8000990:	e609      	b.n	80005a6 <HAL_RCC_OscConfig+0xc2>
 8000992:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000996:	fab3 f383 	clz	r3, r3
 800099a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800099e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009a8:	f7ff fc42 	bl	8000230 <HAL_GetTick>
 80009ac:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009b0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009b2:	2601      	movs	r6, #1
 80009b4:	fa95 f3a5 	rbit	r3, r5
 80009b8:	6822      	ldr	r2, [r4, #0]
 80009ba:	fa95 f3a5 	rbit	r3, r5
 80009be:	fab3 f383 	clz	r3, r3
 80009c2:	f003 031f 	and.w	r3, r3, #31
 80009c6:	fa06 f303 	lsl.w	r3, r6, r3
 80009ca:	4213      	tst	r3, r2
 80009cc:	f43f ada0 	beq.w	8000510 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009d0:	f7ff fc2e 	bl	8000230 <HAL_GetTick>
 80009d4:	1bc0      	subs	r0, r0, r7
 80009d6:	2802      	cmp	r0, #2
 80009d8:	d9ec      	bls.n	80009b4 <HAL_RCC_OscConfig+0x4d0>
 80009da:	e5e4      	b.n	80005a6 <HAL_RCC_OscConfig+0xc2>
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80009e0:	4911      	ldr	r1, [pc, #68]	; (8000a28 <HAL_RCC_GetSysClockFreq+0x48>)
 80009e2:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009e4:	f003 020c 	and.w	r2, r3, #12
 80009e8:	2a08      	cmp	r2, #8
 80009ea:	d11a      	bne.n	8000a22 <HAL_RCC_GetSysClockFreq+0x42>
 80009ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80009f0:	fa92 f2a2 	rbit	r2, r2
 80009f4:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80009f6:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80009fa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80009fc:	fa90 f0a0 	rbit	r0, r0
 8000a00:	fab0 f080 	clz	r0, r0
 8000a04:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a08:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000a0c:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a0e:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a10:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a12:	4807      	ldr	r0, [pc, #28]	; (8000a30 <HAL_RCC_GetSysClockFreq+0x50>)
 8000a14:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a16:	4807      	ldr	r0, [pc, #28]	; (8000a34 <HAL_RCC_GetSysClockFreq+0x54>)
 8000a18:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a1c:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a1e:	4348      	muls	r0, r1
 8000a20:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000a22:	4804      	ldr	r0, [pc, #16]	; (8000a34 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	0800176c 	.word	0x0800176c
 8000a30:	0800177c 	.word	0x0800177c
 8000a34:	007a1200 	.word	0x007a1200

08000a38 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a38:	4a5c      	ldr	r2, [pc, #368]	; (8000bac <HAL_RCC_ClockConfig+0x174>)
 8000a3a:	6813      	ldr	r3, [r2, #0]
 8000a3c:	f003 0307 	and.w	r3, r3, #7
 8000a40:	428b      	cmp	r3, r1
{
 8000a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a46:	4606      	mov	r6, r0
 8000a48:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a4a:	d330      	bcc.n	8000aae <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a4c:	6832      	ldr	r2, [r6, #0]
 8000a4e:	0791      	lsls	r1, r2, #30
 8000a50:	d43a      	bmi.n	8000ac8 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a52:	07d2      	lsls	r2, r2, #31
 8000a54:	d440      	bmi.n	8000ad8 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a56:	4a55      	ldr	r2, [pc, #340]	; (8000bac <HAL_RCC_ClockConfig+0x174>)
 8000a58:	6813      	ldr	r3, [r2, #0]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	429d      	cmp	r5, r3
 8000a60:	f0c0 8092 	bcc.w	8000b88 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a64:	6832      	ldr	r2, [r6, #0]
 8000a66:	4c52      	ldr	r4, [pc, #328]	; (8000bb0 <HAL_RCC_ClockConfig+0x178>)
 8000a68:	f012 0f04 	tst.w	r2, #4
 8000a6c:	f040 8097 	bne.w	8000b9e <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a70:	0713      	lsls	r3, r2, #28
 8000a72:	d506      	bpl.n	8000a82 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a74:	6863      	ldr	r3, [r4, #4]
 8000a76:	6932      	ldr	r2, [r6, #16]
 8000a78:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a7c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a80:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a82:	f7ff ffad 	bl	80009e0 <HAL_RCC_GetSysClockFreq>
 8000a86:	6863      	ldr	r3, [r4, #4]
 8000a88:	22f0      	movs	r2, #240	; 0xf0
 8000a8a:	fa92 f2a2 	rbit	r2, r2
 8000a8e:	fab2 f282 	clz	r2, r2
 8000a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a96:	40d3      	lsrs	r3, r2
 8000a98:	4a46      	ldr	r2, [pc, #280]	; (8000bb4 <HAL_RCC_ClockConfig+0x17c>)
 8000a9a:	5cd3      	ldrb	r3, [r2, r3]
 8000a9c:	40d8      	lsrs	r0, r3
 8000a9e:	4b46      	ldr	r3, [pc, #280]	; (8000bb8 <HAL_RCC_ClockConfig+0x180>)
 8000aa0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f7ff fb96 	bl	80001d4 <HAL_InitTick>
  return HAL_OK;
 8000aa8:	2000      	movs	r0, #0
}
 8000aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000aae:	6813      	ldr	r3, [r2, #0]
 8000ab0:	f023 0307 	bic.w	r3, r3, #7
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ab8:	6813      	ldr	r3, [r2, #0]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d0c4      	beq.n	8000a4c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ac8:	4939      	ldr	r1, [pc, #228]	; (8000bb0 <HAL_RCC_ClockConfig+0x178>)
 8000aca:	68b0      	ldr	r0, [r6, #8]
 8000acc:	684b      	ldr	r3, [r1, #4]
 8000ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ad2:	4303      	orrs	r3, r0
 8000ad4:	604b      	str	r3, [r1, #4]
 8000ad6:	e7bc      	b.n	8000a52 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ad8:	6872      	ldr	r2, [r6, #4]
 8000ada:	4c35      	ldr	r4, [pc, #212]	; (8000bb0 <HAL_RCC_ClockConfig+0x178>)
 8000adc:	2a01      	cmp	r2, #1
 8000ade:	d128      	bne.n	8000b32 <HAL_RCC_ClockConfig+0xfa>
 8000ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ae4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ae8:	6821      	ldr	r1, [r4, #0]
 8000aea:	fa93 f3a3 	rbit	r3, r3
 8000aee:	fab3 f383 	clz	r3, r3
 8000af2:	f003 031f 	and.w	r3, r3, #31
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000afc:	d0e1      	beq.n	8000ac2 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000afe:	6863      	ldr	r3, [r4, #4]
 8000b00:	f023 0303 	bic.w	r3, r3, #3
 8000b04:	431a      	orrs	r2, r3
 8000b06:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000b08:	f7ff fb92 	bl	8000230 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b0c:	6873      	ldr	r3, [r6, #4]
 8000b0e:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000b10:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b12:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b16:	d11f      	bne.n	8000b58 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b18:	6863      	ldr	r3, [r4, #4]
 8000b1a:	f003 030c 	and.w	r3, r3, #12
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	d099      	beq.n	8000a56 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b22:	f7ff fb85 	bl	8000230 <HAL_GetTick>
 8000b26:	1bc0      	subs	r0, r0, r7
 8000b28:	4540      	cmp	r0, r8
 8000b2a:	d9f5      	bls.n	8000b18 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b32:	2a02      	cmp	r2, #2
 8000b34:	bf0c      	ite	eq
 8000b36:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b3a:	2302      	movne	r3, #2
 8000b3c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b40:	6820      	ldr	r0, [r4, #0]
 8000b42:	fa93 f3a3 	rbit	r3, r3
 8000b46:	fab3 f383 	clz	r3, r3
 8000b4a:	f003 031f 	and.w	r3, r3, #31
 8000b4e:	2101      	movs	r1, #1
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	4203      	tst	r3, r0
 8000b56:	e7d1      	b.n	8000afc <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d110      	bne.n	8000b7e <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b5c:	6863      	ldr	r3, [r4, #4]
 8000b5e:	f003 030c 	and.w	r3, r3, #12
 8000b62:	2b08      	cmp	r3, #8
 8000b64:	f43f af77 	beq.w	8000a56 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b68:	f7ff fb62 	bl	8000230 <HAL_GetTick>
 8000b6c:	1bc0      	subs	r0, r0, r7
 8000b6e:	4540      	cmp	r0, r8
 8000b70:	d9f4      	bls.n	8000b5c <HAL_RCC_ClockConfig+0x124>
 8000b72:	e7db      	b.n	8000b2c <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b74:	f7ff fb5c 	bl	8000230 <HAL_GetTick>
 8000b78:	1bc0      	subs	r0, r0, r7
 8000b7a:	4540      	cmp	r0, r8
 8000b7c:	d8d6      	bhi.n	8000b2c <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b7e:	6863      	ldr	r3, [r4, #4]
 8000b80:	f013 0f0c 	tst.w	r3, #12
 8000b84:	d1f6      	bne.n	8000b74 <HAL_RCC_ClockConfig+0x13c>
 8000b86:	e766      	b.n	8000a56 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b88:	6813      	ldr	r3, [r2, #0]
 8000b8a:	f023 0307 	bic.w	r3, r3, #7
 8000b8e:	432b      	orrs	r3, r5
 8000b90:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	f003 0307 	and.w	r3, r3, #7
 8000b98:	429d      	cmp	r5, r3
 8000b9a:	d192      	bne.n	8000ac2 <HAL_RCC_ClockConfig+0x8a>
 8000b9c:	e762      	b.n	8000a64 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b9e:	6863      	ldr	r3, [r4, #4]
 8000ba0:	68f1      	ldr	r1, [r6, #12]
 8000ba2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ba6:	430b      	orrs	r3, r1
 8000ba8:	6063      	str	r3, [r4, #4]
 8000baa:	e761      	b.n	8000a70 <HAL_RCC_ClockConfig+0x38>
 8000bac:	40022000 	.word	0x40022000
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	08001790 	.word	0x08001790
 8000bb8:	20000000 	.word	0x20000000

08000bbc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000bbc:	4b01      	ldr	r3, [pc, #4]	; (8000bc4 <HAL_RCC_GetHCLKFreq+0x8>)
 8000bbe:	6818      	ldr	r0, [r3, #0]
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000000 	.word	0x20000000

08000bc8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8000bca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	fa92 f2a2 	rbit	r2, r2
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000bdc:	40d3      	lsrs	r3, r2
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000be0:	5cd3      	ldrb	r3, [r2, r3]
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000be4:	6810      	ldr	r0, [r2, #0]
}    
 8000be6:	40d8      	lsrs	r0, r3
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	080017a0 	.word	0x080017a0
 8000bf4:	20000000 	.word	0x20000000

08000bf8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000bfa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	fa92 f2a2 	rbit	r2, r2
 8000c04:	fab2 f282 	clz	r2, r2
 8000c08:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000c0c:	40d3      	lsrs	r3, r2
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000c10:	5cd3      	ldrb	r3, [r2, r3]
 8000c12:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000c14:	6810      	ldr	r0, [r2, #0]
} 
 8000c16:	40d8      	lsrs	r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	080017a0 	.word	0x080017a0
 8000c24:	20000000 	.word	0x20000000

08000c28 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c28:	6803      	ldr	r3, [r0, #0]
{
 8000c2a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c2e:	03df      	lsls	r7, r3, #15
{
 8000c30:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c32:	d523      	bpl.n	8000c7c <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c34:	4d9b      	ldr	r5, [pc, #620]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c36:	69eb      	ldr	r3, [r5, #28]
 8000c38:	00de      	lsls	r6, r3, #3
 8000c3a:	f100 80d7 	bmi.w	8000dec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	69eb      	ldr	r3, [r5, #28]
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	61eb      	str	r3, [r5, #28]
 8000c46:	69eb      	ldr	r3, [r5, #28]
 8000c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	9301      	str	r3, [sp, #4]
 8000c4e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c50:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c52:	4f95      	ldr	r7, [pc, #596]	; (8000ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	05d8      	lsls	r0, r3, #23
 8000c58:	f140 80ca 	bpl.w	8000df0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000c5c:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c5e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000c62:	f040 80da 	bne.w	8000e1a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000c66:	6a2b      	ldr	r3, [r5, #32]
 8000c68:	6862      	ldr	r2, [r4, #4]
 8000c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c72:	b11e      	cbz	r6, 8000c7c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c74:	69eb      	ldr	r3, [r5, #28]
 8000c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000c7c:	6820      	ldr	r0, [r4, #0]
 8000c7e:	07c3      	lsls	r3, r0, #31
 8000c80:	d506      	bpl.n	8000c90 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000c82:	4a88      	ldr	r2, [pc, #544]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c84:	68a1      	ldr	r1, [r4, #8]
 8000c86:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c88:	f023 0303 	bic.w	r3, r3, #3
 8000c8c:	430b      	orrs	r3, r1
 8000c8e:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000c90:	0787      	lsls	r7, r0, #30
 8000c92:	d506      	bpl.n	8000ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000c94:	4a83      	ldr	r2, [pc, #524]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c96:	68e1      	ldr	r1, [r4, #12]
 8000c98:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c9a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000c9e:	430b      	orrs	r3, r1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000ca2:	0746      	lsls	r6, r0, #29
 8000ca4:	d506      	bpl.n	8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000ca6:	4a7f      	ldr	r2, [pc, #508]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ca8:	6921      	ldr	r1, [r4, #16]
 8000caa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cac:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000cb0:	430b      	orrs	r3, r1
 8000cb2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000cb4:	0685      	lsls	r5, r0, #26
 8000cb6:	d506      	bpl.n	8000cc6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000cb8:	4a7a      	ldr	r2, [pc, #488]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000cba:	69e1      	ldr	r1, [r4, #28]
 8000cbc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cbe:	f023 0310 	bic.w	r3, r3, #16
 8000cc2:	430b      	orrs	r3, r1
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000cc6:	0381      	lsls	r1, r0, #14
 8000cc8:	d506      	bpl.n	8000cd8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8000cca:	4a76      	ldr	r2, [pc, #472]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ccc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000cce:	6853      	ldr	r3, [r2, #4]
 8000cd0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000cd4:	430b      	orrs	r3, r1
 8000cd6:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000cd8:	0642      	lsls	r2, r0, #25
 8000cda:	d506      	bpl.n	8000cea <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000cdc:	4a71      	ldr	r2, [pc, #452]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000cde:	6a21      	ldr	r1, [r4, #32]
 8000ce0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ce2:	f023 0320 	bic.w	r3, r3, #32
 8000ce6:	430b      	orrs	r3, r1
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000cea:	0343      	lsls	r3, r0, #13
 8000cec:	d506      	bpl.n	8000cfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000cee:	4a6d      	ldr	r2, [pc, #436]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000cf0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000cf2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cf8:	430b      	orrs	r3, r1
 8000cfa:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000cfc:	0707      	lsls	r7, r0, #28
 8000cfe:	d506      	bpl.n	8000d0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000d00:	4a68      	ldr	r2, [pc, #416]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d02:	6961      	ldr	r1, [r4, #20]
 8000d04:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d06:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000d0a:	430b      	orrs	r3, r1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8000d0e:	06c6      	lsls	r6, r0, #27
 8000d10:	d506      	bpl.n	8000d20 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8000d12:	4a64      	ldr	r2, [pc, #400]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d14:	69a1      	ldr	r1, [r4, #24]
 8000d16:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d18:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000d1c:	430b      	orrs	r3, r1
 8000d1e:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8000d20:	0585      	lsls	r5, r0, #22
 8000d22:	d506      	bpl.n	8000d32 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000d24:	4a5f      	ldr	r2, [pc, #380]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d26:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000d28:	6853      	ldr	r3, [r2, #4]
 8000d2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000d2e:	430b      	orrs	r3, r1
 8000d30:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000d32:	0601      	lsls	r1, r0, #24
 8000d34:	d506      	bpl.n	8000d44 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000d36:	4a5b      	ldr	r2, [pc, #364]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d38:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000d3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000d3c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000d40:	430b      	orrs	r3, r1
 8000d42:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8000d44:	05c2      	lsls	r2, r0, #23
 8000d46:	d506      	bpl.n	8000d56 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8000d48:	4a56      	ldr	r2, [pc, #344]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d4a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000d4c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000d4e:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8000d52:	430b      	orrs	r3, r1
 8000d54:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000d56:	04c3      	lsls	r3, r0, #19
 8000d58:	d506      	bpl.n	8000d68 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000d5a:	4a52      	ldr	r2, [pc, #328]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d5e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d64:	430b      	orrs	r3, r1
 8000d66:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8000d68:	0487      	lsls	r7, r0, #18
 8000d6a:	d506      	bpl.n	8000d7a <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8000d6c:	4a4d      	ldr	r2, [pc, #308]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d6e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000d70:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d72:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d76:	430b      	orrs	r3, r1
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8000d7a:	02c6      	lsls	r6, r0, #11
 8000d7c:	d506      	bpl.n	8000d8c <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8000d7e:	4a49      	ldr	r2, [pc, #292]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d80:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000d82:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d88:	430b      	orrs	r3, r1
 8000d8a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8000d8c:	0285      	lsls	r5, r0, #10
 8000d8e:	d506      	bpl.n	8000d9e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8000d90:	4a44      	ldr	r2, [pc, #272]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d92:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000d94:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d96:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000d9a:	430b      	orrs	r3, r1
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8000d9e:	0241      	lsls	r1, r0, #9
 8000da0:	d506      	bpl.n	8000db0 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8000da2:	4a40      	ldr	r2, [pc, #256]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000da4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000da6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000da8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000dac:	430b      	orrs	r3, r1
 8000dae:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8000db0:	0202      	lsls	r2, r0, #8
 8000db2:	d506      	bpl.n	8000dc2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8000db4:	4a3b      	ldr	r2, [pc, #236]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000db6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000db8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dbe:	430b      	orrs	r3, r1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8000dc2:	01c3      	lsls	r3, r0, #7
 8000dc4:	d506      	bpl.n	8000dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8000dc6:	4a37      	ldr	r2, [pc, #220]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000dc8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000dca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000dd0:	430b      	orrs	r3, r1
 8000dd2:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8000dd4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8000dd8:	d01c      	beq.n	8000e14 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8000dda:	4a32      	ldr	r2, [pc, #200]	; (8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ddc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000dde:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000de0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000de4:	430b      	orrs	r3, r1
 8000de6:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000de8:	2000      	movs	r0, #0
 8000dea:	e013      	b.n	8000e14 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8000dec:	2600      	movs	r6, #0
 8000dee:	e730      	b.n	8000c52 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000df8:	f7ff fa1a 	bl	8000230 <HAL_GetTick>
 8000dfc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	05d9      	lsls	r1, r3, #23
 8000e02:	f53f af2b 	bmi.w	8000c5c <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e06:	f7ff fa13 	bl	8000230 <HAL_GetTick>
 8000e0a:	eba0 0008 	sub.w	r0, r0, r8
 8000e0e:	2864      	cmp	r0, #100	; 0x64
 8000e10:	d9f5      	bls.n	8000dfe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8000e12:	2003      	movs	r0, #3
}
 8000e14:	b002      	add	sp, #8
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e1a:	6862      	ldr	r2, [r4, #4]
 8000e1c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000e20:	4293      	cmp	r3, r2
 8000e22:	f43f af20 	beq.w	8000c66 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e26:	6a29      	ldr	r1, [r5, #32]
 8000e28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e2c:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8000e30:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e34:	f8df e074 	ldr.w	lr, [pc, #116]	; 8000eac <HAL_RCCEx_PeriphCLKConfig+0x284>
 8000e38:	fab2 f282 	clz	r2, r2
 8000e3c:	4472      	add	r2, lr
 8000e3e:	0092      	lsls	r2, r2, #2
 8000e40:	2701      	movs	r7, #1
 8000e42:	6017      	str	r7, [r2, #0]
 8000e44:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e48:	fab3 f383 	clz	r3, r3
 8000e4c:	4473      	add	r3, lr
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e54:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8000e56:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e58:	f57f af05 	bpl.w	8000c66 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8000e5c:	f7ff f9e8 	bl	8000230 <HAL_GetTick>
 8000e60:	f04f 0802 	mov.w	r8, #2
 8000e64:	4682      	mov	sl, r0
 8000e66:	46c1      	mov	r9, r8
 8000e68:	fa98 f3a8 	rbit	r3, r8
 8000e6c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e70:	b1a3      	cbz	r3, 8000e9c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8000e72:	6a2a      	ldr	r2, [r5, #32]
 8000e74:	fa99 f3a9 	rbit	r3, r9
 8000e78:	fab3 f383 	clz	r3, r3
 8000e7c:	f003 031f 	and.w	r3, r3, #31
 8000e80:	fa07 f303 	lsl.w	r3, r7, r3
 8000e84:	4213      	tst	r3, r2
 8000e86:	f47f aeee 	bne.w	8000c66 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e8a:	f7ff f9d1 	bl	8000230 <HAL_GetTick>
 8000e8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e92:	eba0 000a 	sub.w	r0, r0, sl
 8000e96:	4298      	cmp	r0, r3
 8000e98:	d9e6      	bls.n	8000e68 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8000e9a:	e7ba      	b.n	8000e12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8000e9c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000ea2:	e7e7      	b.n	8000e74 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40007000 	.word	0x40007000
 8000eac:	10908100 	.word	0x10908100

08000eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000eb0:	b538      	push	{r3, r4, r5, lr}
 8000eb2:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000eb4:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000eb6:	6921      	ldr	r1, [r4, #16]
 8000eb8:	68a2      	ldr	r2, [r4, #8]
 8000eba:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ebc:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	6961      	ldr	r1, [r4, #20]
 8000ec2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ec4:	4977      	ldr	r1, [pc, #476]	; (80010a4 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000ec6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ec8:	4001      	ands	r1, r0
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ece:	686a      	ldr	r2, [r5, #4]
 8000ed0:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000ed2:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ed4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000edc:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000ede:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000ee0:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000ee4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000eea:	4a6f      	ldr	r2, [pc, #444]	; (80010a8 <UART_SetConfig+0x1f8>)
 8000eec:	4295      	cmp	r5, r2
 8000eee:	d112      	bne.n	8000f16 <UART_SetConfig+0x66>
 8000ef0:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8000ef4:	496d      	ldr	r1, [pc, #436]	; (80010ac <UART_SetConfig+0x1fc>)
 8000ef6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000ef8:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f00:	5c8a      	ldrb	r2, [r1, r2]
 8000f02:	d066      	beq.n	8000fd2 <UART_SetConfig+0x122>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8000f04:	2a08      	cmp	r2, #8
 8000f06:	d819      	bhi.n	8000f3c <UART_SetConfig+0x8c>
 8000f08:	e8df f002 	tbb	[pc, r2]
 8000f0c:	189e92c2 	.word	0x189e92c2
 8000f10:	181818a9 	.word	0x181818a9
 8000f14:	ac          	.byte	0xac
 8000f15:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f16:	4a66      	ldr	r2, [pc, #408]	; (80010b0 <UART_SetConfig+0x200>)
 8000f18:	4295      	cmp	r5, r2
 8000f1a:	d124      	bne.n	8000f66 <UART_SetConfig+0xb6>
 8000f1c:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8000f20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f22:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8000f26:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000f2a:	f000 80a0 	beq.w	800106e <UART_SetConfig+0x1be>
 8000f2e:	d807      	bhi.n	8000f40 <UART_SetConfig+0x90>
 8000f30:	2a00      	cmp	r2, #0
 8000f32:	f000 80aa 	beq.w	800108a <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f3a:	d076      	beq.n	800102a <UART_SetConfig+0x17a>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8000f3c:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8000f3e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f40:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8000f44:	f000 8099 	beq.w	800107a <UART_SetConfig+0x1ca>
 8000f48:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8000f4c:	d1f3      	bne.n	8000f36 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f52:	d179      	bne.n	8001048 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000f54:	6860      	ldr	r0, [r4, #4]
 8000f56:	0843      	lsrs	r3, r0, #1
 8000f58:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8000f5c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000f60:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f64:	e054      	b.n	8001010 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f66:	4a53      	ldr	r2, [pc, #332]	; (80010b4 <UART_SetConfig+0x204>)
 8000f68:	4295      	cmp	r5, r2
 8000f6a:	d10e      	bne.n	8000f8a <UART_SetConfig+0xda>
 8000f6c:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8000f70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f72:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8000f76:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8000f7a:	d078      	beq.n	800106e <UART_SetConfig+0x1be>
 8000f7c:	d9d8      	bls.n	8000f30 <UART_SetConfig+0x80>
 8000f7e:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8000f82:	d07a      	beq.n	800107a <UART_SetConfig+0x1ca>
 8000f84:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8000f88:	e7e0      	b.n	8000f4c <UART_SetConfig+0x9c>
 8000f8a:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <UART_SetConfig+0x208>)
 8000f8c:	4295      	cmp	r5, r2
 8000f8e:	d10e      	bne.n	8000fae <UART_SetConfig+0xfe>
 8000f90:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8000f94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f96:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8000f9a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8000f9e:	d066      	beq.n	800106e <UART_SetConfig+0x1be>
 8000fa0:	d9c6      	bls.n	8000f30 <UART_SetConfig+0x80>
 8000fa2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8000fa6:	d068      	beq.n	800107a <UART_SetConfig+0x1ca>
 8000fa8:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8000fac:	e7ce      	b.n	8000f4c <UART_SetConfig+0x9c>
 8000fae:	4a43      	ldr	r2, [pc, #268]	; (80010bc <UART_SetConfig+0x20c>)
 8000fb0:	4295      	cmp	r5, r2
 8000fb2:	d1c0      	bne.n	8000f36 <UART_SetConfig+0x86>
 8000fb4:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8000fb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000fba:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8000fbe:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8000fc2:	d054      	beq.n	800106e <UART_SetConfig+0x1be>
 8000fc4:	d9b4      	bls.n	8000f30 <UART_SetConfig+0x80>
 8000fc6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8000fca:	d056      	beq.n	800107a <UART_SetConfig+0x1ca>
 8000fcc:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8000fd0:	e7bc      	b.n	8000f4c <UART_SetConfig+0x9c>
    switch (clocksource)
 8000fd2:	2a08      	cmp	r2, #8
 8000fd4:	d829      	bhi.n	800102a <UART_SetConfig+0x17a>
 8000fd6:	a301      	add	r3, pc, #4	; (adr r3, 8000fdc <UART_SetConfig+0x12c>)
 8000fd8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000fdc:	08001001 	.word	0x08001001
 8000fe0:	08001025 	.word	0x08001025
 8000fe4:	08000f55 	.word	0x08000f55
 8000fe8:	0800102b 	.word	0x0800102b
 8000fec:	08001075 	.word	0x08001075
 8000ff0:	0800102b 	.word	0x0800102b
 8000ff4:	0800102b 	.word	0x0800102b
 8000ff8:	0800102b 	.word	0x0800102b
 8000ffc:	08001081 	.word	0x08001081
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001000:	f7ff fde2 	bl	8000bc8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001004:	6861      	ldr	r1, [r4, #4]
 8001006:	084a      	lsrs	r2, r1, #1
 8001008:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800100c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001010:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001012:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001014:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8001018:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800101a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800101e:	4313      	orrs	r3, r2
 8001020:	60cb      	str	r3, [r1, #12]
 8001022:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001024:	f7ff fde8 	bl	8000bf8 <HAL_RCC_GetPCLK2Freq>
 8001028:	e7ec      	b.n	8001004 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 800102a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800102c:	2300      	movs	r3, #0
 800102e:	e7f1      	b.n	8001014 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001030:	f7ff fde2 	bl	8000bf8 <HAL_RCC_GetPCLK2Freq>
 8001034:	6863      	ldr	r3, [r4, #4]
 8001036:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800103a:	fbb0 f0f3 	udiv	r0, r0, r3
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <UART_SetConfig+0x1f8>)
 8001040:	b280      	uxth	r0, r0
 8001042:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001044:	2000      	movs	r0, #0
        break;
 8001046:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001048:	6862      	ldr	r2, [r4, #4]
 800104a:	0853      	lsrs	r3, r2, #1
 800104c:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001050:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001054:	fbb3 f3f2 	udiv	r3, r3, r2
 8001058:	b29b      	uxth	r3, r3
 800105a:	60eb      	str	r3, [r5, #12]
 800105c:	e7f2      	b.n	8001044 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800105e:	f7ff fcbf 	bl	80009e0 <HAL_RCC_GetSysClockFreq>
 8001062:	e017      	b.n	8001094 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001064:	6862      	ldr	r2, [r4, #4]
 8001066:	0853      	lsrs	r3, r2, #1
 8001068:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800106c:	e7f2      	b.n	8001054 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800106e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001072:	d1f4      	bne.n	800105e <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001074:	f7ff fcb4 	bl	80009e0 <HAL_RCC_GetSysClockFreq>
 8001078:	e7c4      	b.n	8001004 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800107a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800107e:	d1f1      	bne.n	8001064 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001080:	6860      	ldr	r0, [r4, #4]
 8001082:	0843      	lsrs	r3, r0, #1
 8001084:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001088:	e76a      	b.n	8000f60 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800108a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800108e:	d0b7      	beq.n	8001000 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001090:	f7ff fd9a 	bl	8000bc8 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001094:	6863      	ldr	r3, [r4, #4]
 8001096:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800109a:	fbb0 f0f3 	udiv	r0, r0, r3
 800109e:	b280      	uxth	r0, r0
 80010a0:	60e8      	str	r0, [r5, #12]
 80010a2:	e7cf      	b.n	8001044 <UART_SetConfig+0x194>
 80010a4:	efff69f3 	.word	0xefff69f3
 80010a8:	40013800 	.word	0x40013800
 80010ac:	0800178c 	.word	0x0800178c
 80010b0:	40004400 	.word	0x40004400
 80010b4:	40004800 	.word	0x40004800
 80010b8:	40004c00 	.word	0x40004c00
 80010bc:	40005000 	.word	0x40005000

080010c0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80010c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80010c2:	07da      	lsls	r2, r3, #31
{
 80010c4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80010c6:	d506      	bpl.n	80010d6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80010c8:	6801      	ldr	r1, [r0, #0]
 80010ca:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80010cc:	684a      	ldr	r2, [r1, #4]
 80010ce:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80010d2:	4322      	orrs	r2, r4
 80010d4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80010d6:	079c      	lsls	r4, r3, #30
 80010d8:	d506      	bpl.n	80010e8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80010da:	6801      	ldr	r1, [r0, #0]
 80010dc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80010de:	684a      	ldr	r2, [r1, #4]
 80010e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010e4:	4322      	orrs	r2, r4
 80010e6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80010e8:	0759      	lsls	r1, r3, #29
 80010ea:	d506      	bpl.n	80010fa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80010ec:	6801      	ldr	r1, [r0, #0]
 80010ee:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80010f0:	684a      	ldr	r2, [r1, #4]
 80010f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010f6:	4322      	orrs	r2, r4
 80010f8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80010fa:	071a      	lsls	r2, r3, #28
 80010fc:	d506      	bpl.n	800110c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80010fe:	6801      	ldr	r1, [r0, #0]
 8001100:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001102:	684a      	ldr	r2, [r1, #4]
 8001104:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001108:	4322      	orrs	r2, r4
 800110a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800110c:	06dc      	lsls	r4, r3, #27
 800110e:	d506      	bpl.n	800111e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001110:	6801      	ldr	r1, [r0, #0]
 8001112:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001114:	688a      	ldr	r2, [r1, #8]
 8001116:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800111a:	4322      	orrs	r2, r4
 800111c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800111e:	0699      	lsls	r1, r3, #26
 8001120:	d506      	bpl.n	8001130 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001122:	6801      	ldr	r1, [r0, #0]
 8001124:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001126:	688a      	ldr	r2, [r1, #8]
 8001128:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800112c:	4322      	orrs	r2, r4
 800112e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001130:	065a      	lsls	r2, r3, #25
 8001132:	d50f      	bpl.n	8001154 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001134:	6801      	ldr	r1, [r0, #0]
 8001136:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001138:	684a      	ldr	r2, [r1, #4]
 800113a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800113e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001140:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001144:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001146:	d105      	bne.n	8001154 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001148:	684a      	ldr	r2, [r1, #4]
 800114a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800114c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001150:	4322      	orrs	r2, r4
 8001152:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001154:	061b      	lsls	r3, r3, #24
 8001156:	d506      	bpl.n	8001166 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001158:	6802      	ldr	r2, [r0, #0]
 800115a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800115c:	6853      	ldr	r3, [r2, #4]
 800115e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001162:	430b      	orrs	r3, r1
 8001164:	6053      	str	r3, [r2, #4]
 8001166:	bd10      	pop	{r4, pc}

08001168 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800116c:	9d06      	ldr	r5, [sp, #24]
 800116e:	4604      	mov	r4, r0
 8001170:	460f      	mov	r7, r1
 8001172:	4616      	mov	r6, r2
 8001174:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001176:	6821      	ldr	r1, [r4, #0]
 8001178:	69ca      	ldr	r2, [r1, #28]
 800117a:	ea37 0302 	bics.w	r3, r7, r2
 800117e:	bf0c      	ite	eq
 8001180:	2201      	moveq	r2, #1
 8001182:	2200      	movne	r2, #0
 8001184:	42b2      	cmp	r2, r6
 8001186:	d002      	beq.n	800118e <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001188:	2000      	movs	r0, #0
}
 800118a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800118e:	1c6b      	adds	r3, r5, #1
 8001190:	d0f2      	beq.n	8001178 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001192:	b99d      	cbnz	r5, 80011bc <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001194:	6823      	ldr	r3, [r4, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800119c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	f022 0201 	bic.w	r2, r2, #1
 80011a4:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80011a6:	2320      	movs	r3, #32
 80011a8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80011ac:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80011b0:	2300      	movs	r3, #0
 80011b2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80011b6:	2003      	movs	r0, #3
 80011b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80011bc:	f7ff f838 	bl	8000230 <HAL_GetTick>
 80011c0:	eba0 0008 	sub.w	r0, r0, r8
 80011c4:	4285      	cmp	r5, r0
 80011c6:	d2d6      	bcs.n	8001176 <UART_WaitOnFlagUntilTimeout+0xe>
 80011c8:	e7e4      	b.n	8001194 <UART_WaitOnFlagUntilTimeout+0x2c>

080011ca <HAL_UART_Transmit>:
{
 80011ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80011ce:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80011d0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80011d4:	2b20      	cmp	r3, #32
{
 80011d6:	4604      	mov	r4, r0
 80011d8:	460d      	mov	r5, r1
 80011da:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80011dc:	d14c      	bne.n	8001278 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 80011de:	2900      	cmp	r1, #0
 80011e0:	d048      	beq.n	8001274 <HAL_UART_Transmit+0xaa>
 80011e2:	2a00      	cmp	r2, #0
 80011e4:	d046      	beq.n	8001274 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80011e6:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d044      	beq.n	8001278 <HAL_UART_Transmit+0xae>
 80011ee:	2301      	movs	r3, #1
 80011f0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80011f8:	2321      	movs	r3, #33	; 0x21
 80011fa:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80011fe:	f7ff f817 	bl	8000230 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001202:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001206:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001208:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800120c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001210:	b292      	uxth	r2, r2
 8001212:	b962      	cbnz	r2, 800122e <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001214:	9700      	str	r7, [sp, #0]
 8001216:	4633      	mov	r3, r6
 8001218:	2140      	movs	r1, #64	; 0x40
 800121a:	4620      	mov	r0, r4
 800121c:	f7ff ffa4 	bl	8001168 <UART_WaitOnFlagUntilTimeout>
 8001220:	b998      	cbnz	r0, 800124a <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8001222:	2320      	movs	r3, #32
 8001224:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8001228:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 800122c:	e00e      	b.n	800124c <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 800122e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001232:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8001234:	3b01      	subs	r3, #1
 8001236:	b29b      	uxth	r3, r3
 8001238:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800123c:	2200      	movs	r2, #0
 800123e:	4633      	mov	r3, r6
 8001240:	2180      	movs	r1, #128	; 0x80
 8001242:	4620      	mov	r0, r4
 8001244:	f7ff ff90 	bl	8001168 <UART_WaitOnFlagUntilTimeout>
 8001248:	b118      	cbz	r0, 8001252 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 800124a:	2003      	movs	r0, #3
}
 800124c:	b002      	add	sp, #8
 800124e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001252:	68a3      	ldr	r3, [r4, #8]
 8001254:	6822      	ldr	r2, [r4, #0]
 8001256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800125a:	d107      	bne.n	800126c <HAL_UART_Transmit+0xa2>
 800125c:	6923      	ldr	r3, [r4, #16]
 800125e:	b92b      	cbnz	r3, 800126c <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001260:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001268:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 800126a:	e7cf      	b.n	800120c <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800126c:	782b      	ldrb	r3, [r5, #0]
 800126e:	8513      	strh	r3, [r2, #40]	; 0x28
 8001270:	3501      	adds	r5, #1
 8001272:	e7cb      	b.n	800120c <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001274:	2001      	movs	r0, #1
 8001276:	e7e9      	b.n	800124c <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001278:	2002      	movs	r0, #2
 800127a:	e7e7      	b.n	800124c <HAL_UART_Transmit+0x82>

0800127c <UART_CheckIdleState>:
{
 800127c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800127e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001280:	2600      	movs	r6, #0
 8001282:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001284:	f7fe ffd4 	bl	8000230 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800128e:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001290:	d417      	bmi.n	80012c2 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	075b      	lsls	r3, r3, #29
 8001298:	d50a      	bpl.n	80012b0 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800129a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2200      	movs	r2, #0
 80012a2:	462b      	mov	r3, r5
 80012a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80012a8:	4620      	mov	r0, r4
 80012aa:	f7ff ff5d 	bl	8001168 <UART_WaitOnFlagUntilTimeout>
 80012ae:	b9a0      	cbnz	r0, 80012da <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80012b0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80012b2:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80012b4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80012b8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80012bc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80012c0:	e00c      	b.n	80012dc <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80012c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	4632      	mov	r2, r6
 80012ca:	4603      	mov	r3, r0
 80012cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80012d0:	4620      	mov	r0, r4
 80012d2:	f7ff ff49 	bl	8001168 <UART_WaitOnFlagUntilTimeout>
 80012d6:	2800      	cmp	r0, #0
 80012d8:	d0db      	beq.n	8001292 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80012da:	2003      	movs	r0, #3
}
 80012dc:	b002      	add	sp, #8
 80012de:	bd70      	pop	{r4, r5, r6, pc}

080012e0 <HAL_UART_Init>:
{
 80012e0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80012e2:	4604      	mov	r4, r0
 80012e4:	b360      	cbz	r0, 8001340 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80012e6:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80012ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012ee:	b91b      	cbnz	r3, 80012f8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80012f0:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80012f4:	f000 f956 	bl	80015a4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80012f8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80012fa:	2324      	movs	r3, #36	; 0x24
 80012fc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001300:	6813      	ldr	r3, [r2, #0]
 8001302:	f023 0301 	bic.w	r3, r3, #1
 8001306:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001308:	4620      	mov	r0, r4
 800130a:	f7ff fdd1 	bl	8000eb0 <UART_SetConfig>
 800130e:	2801      	cmp	r0, #1
 8001310:	d016      	beq.n	8001340 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001314:	b113      	cbz	r3, 800131c <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001316:	4620      	mov	r0, r4
 8001318:	f7ff fed2 	bl	80010c0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001324:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800132c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001334:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001336:	601a      	str	r2, [r3, #0]
}
 8001338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800133c:	f7ff bf9e 	b.w	800127c <UART_CheckIdleState>
}
 8001340:	2001      	movs	r0, #1
 8001342:	bd10      	pop	{r4, pc}

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b510      	push	{r4, lr}
 8001346:	b0a6      	sub	sp, #152	; 0x98
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001348:	2301      	movs	r3, #1
 800134a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800134c:	2310      	movs	r3, #16
 800134e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001350:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001354:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001356:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800135a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800135c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001360:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001362:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001364:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001366:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001368:	f7ff f8bc 	bl	80004e4 <HAL_RCC_OscConfig>
 800136c:	b100      	cbz	r0, 8001370 <SystemClock_Config+0x2c>
 800136e:	e7fe      	b.n	800136e <SystemClock_Config+0x2a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001370:	230f      	movs	r3, #15
 8001372:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001374:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001376:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137a:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800137c:	4621      	mov	r1, r4
 800137e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001380:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001382:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001384:	f7ff fb58 	bl	8000a38 <HAL_RCC_ClockConfig>
 8001388:	b100      	cbz	r0, 800138c <SystemClock_Config+0x48>
 800138a:	e7fe      	b.n	800138a <SystemClock_Config+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800138c:	2303      	movs	r3, #3
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800138e:	9012      	str	r0, [sp, #72]	; 0x48
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001390:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001392:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8001394:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001396:	f7ff fc47 	bl	8000c28 <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4604      	mov	r4, r0
 800139c:	b100      	cbz	r0, 80013a0 <SystemClock_Config+0x5c>
 800139e:	e7fe      	b.n	800139e <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80013a0:	f7ff fc0c 	bl	8000bbc <HAL_RCC_GetHCLKFreq>
 80013a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80013ac:	f7fe ff9c 	bl	80002e8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80013b0:	2004      	movs	r0, #4
 80013b2:	f7fe ffaf 	bl	8000314 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80013b6:	4622      	mov	r2, r4
 80013b8:	4621      	mov	r1, r4
 80013ba:	f04f 30ff 	mov.w	r0, #4294967295
 80013be:	f7fe ff5f 	bl	8000280 <HAL_NVIC_SetPriority>
}
 80013c2:	b026      	add	sp, #152	; 0x98
 80013c4:	bd10      	pop	{r4, pc}
	...

080013c8 <main>:
{
 80013c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013cc:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 80013ce:	f7fe ff15 	bl	80001fc <HAL_Init>
  SystemClock_Config();
 80013d2:	f7ff ffb7 	bl	8001344 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	4b4c      	ldr	r3, [pc, #304]	; (8001508 <main+0x140>)
  huart1.Instance = USART1;
 80013d8:	4c4c      	ldr	r4, [pc, #304]	; (800150c <main+0x144>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	695a      	ldr	r2, [r3, #20]
  huart1.Init.BaudRate = 1000000;
 80013dc:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8001524 <main+0x15c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80013e4:	615a      	str	r2, [r3, #20]
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80013ec:	9201      	str	r2, [sp, #4]
 80013ee:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80013f6:	615a      	str	r2, [r3, #20]
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80013fe:	9202      	str	r2, [sp, #8]
 8001400:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	695a      	ldr	r2, [r3, #20]
 8001404:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001408:	615a      	str	r2, [r3, #20]
 800140a:	695a      	ldr	r2, [r3, #20]
 800140c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001410:	9203      	str	r2, [sp, #12]
 8001412:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	695a      	ldr	r2, [r3, #20]
 8001416:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800141a:	615a      	str	r2, [r3, #20]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001424:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001426:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800142a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001430:	f7ff f852 	bl	80004d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = B1_Pin;
 800143a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800143c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800143e:	4b34      	ldr	r3, [pc, #208]	; (8001510 <main+0x148>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001440:	4834      	ldr	r0, [pc, #208]	; (8001514 <main+0x14c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001442:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	9507      	str	r5, [sp, #28]

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2601      	movs	r6, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001448:	f7fe ff76 	bl	8000338 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 800144c:	f44f 6384 	mov.w	r3, #1056	; 0x420
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001454:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8001456:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f7fe ff6b 	bl	8000338 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 1000000;
 8001462:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <main+0x150>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001464:	60a5      	str	r5, [r4, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001466:	270c      	movs	r7, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001468:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 1000000;
 800146a:	e884 0108 	stmia.w	r4, {r3, r8}
  huart1.Init.StopBits = UART_STOPBITS_1;
 800146e:	60e5      	str	r5, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001470:	6125      	str	r5, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001472:	6167      	str	r7, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001474:	61a5      	str	r5, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001476:	61e5      	str	r5, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001478:	6225      	str	r5, [r4, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800147a:	6265      	str	r5, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800147c:	f7ff ff30 	bl	80012e0 <HAL_UART_Init>
 8001480:	b100      	cbz	r0, 8001484 <main+0xbc>
 8001482:	e7fe      	b.n	8001482 <main+0xba>
  huart2.Instance = USART2;
 8001484:	4b25      	ldr	r3, [pc, #148]	; (800151c <main+0x154>)
 8001486:	4a26      	ldr	r2, [pc, #152]	; (8001520 <main+0x158>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001488:	60d8      	str	r0, [r3, #12]
  huart2.Init.BaudRate = 1000000;
 800148a:	e883 0104 	stmia.w	r3, {r2, r8}
  huart2.Init.Parity = UART_PARITY_NONE;
 800148e:	6118      	str	r0, [r3, #16]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8001490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001494:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001496:	61d8      	str	r0, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001498:	6218      	str	r0, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800149a:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800149c:	4618      	mov	r0, r3
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 800149e:	609a      	str	r2, [r3, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a0:	615f      	str	r7, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014a2:	f7ff ff1d 	bl	80012e0 <HAL_UART_Init>
 80014a6:	b100      	cbz	r0, 80014aa <main+0xe2>
 80014a8:	e7fe      	b.n	80014a8 <main+0xe0>
  sent[6]=0x01;
 80014aa:	f88d 601a 	strb.w	r6, [sp, #26]
	  HAL_Delay(1000);
 80014ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014b2:	f7fe fec3 	bl	800023c <HAL_Delay>
	  sent[0] = 0xFF;
 80014b6:	23ff      	movs	r3, #255	; 0xff
 80014b8:	f88d 3014 	strb.w	r3, [sp, #20]
	  sent[1] = 0xFF;
 80014bc:	f88d 3015 	strb.w	r3, [sp, #21]
	  sent[2] = 0xFE; //ID
 80014c0:	23fe      	movs	r3, #254	; 0xfe
 80014c2:	f88d 3016 	strb.w	r3, [sp, #22]
	  sent[3] = 0x04; // Length
 80014c6:	2304      	movs	r3, #4
 80014c8:	f88d 3017 	strb.w	r3, [sp, #23]
	  sent[4] = 0x03; //Instruction?
 80014cc:	2303      	movs	r3, #3
 80014ce:	f88d 3018 	strb.w	r3, [sp, #24]
	  sent[5] = 0x19;//Value1?->Adress
 80014d2:	2319      	movs	r3, #25
 80014d4:	f88d 3019 	strb.w	r3, [sp, #25]
	  sent[6] = sent[6] ^ 0x01;
 80014d8:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80014dc:	f083 0301 	eor.w	r3, r3, #1
 80014e0:	f88d 301a 	strb.w	r3, [sp, #26]
	  sent[7] = ~(sent[2] + sent[3] + sent[4] + sent[5]+sent[6]); // checksum
 80014e4:	331e      	adds	r3, #30
 80014e6:	43db      	mvns	r3, r3
 80014e8:	f88d 301b 	strb.w	r3, [sp, #27]
	  HAL_UART_Transmit(&huart1,&sent,8,100);
 80014ec:	a905      	add	r1, sp, #20
 80014ee:	2364      	movs	r3, #100	; 0x64
 80014f0:	2208      	movs	r2, #8
 80014f2:	4620      	mov	r0, r4
 80014f4:	f7ff fe69 	bl	80011ca <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2,&sent,8,100);
 80014f8:	2364      	movs	r3, #100	; 0x64
 80014fa:	2208      	movs	r2, #8
 80014fc:	a905      	add	r1, sp, #20
 80014fe:	4807      	ldr	r0, [pc, #28]	; (800151c <main+0x154>)
 8001500:	f7ff fe63 	bl	80011ca <HAL_UART_Transmit>
 8001504:	e7d3      	b.n	80014ae <main+0xe6>
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000
 800150c:	20000024 	.word	0x20000024
 8001510:	10210000 	.word	0x10210000
 8001514:	48000800 	.word	0x48000800
 8001518:	40013800 	.word	0x40013800
 800151c:	20000094 	.word	0x20000094
 8001520:	40004400 	.word	0x40004400
 8001524:	000f4240 	.word	0x000f4240

08001528 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_MspInit+0x78>)
{
 800152a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152c:	699a      	ldr	r2, [r3, #24]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	619a      	str	r2, [r3, #24]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800153c:	2007      	movs	r0, #7
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001540:	f7fe fe8c 	bl	800025c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	4611      	mov	r1, r2
 8001548:	f06f 000b 	mvn.w	r0, #11
 800154c:	f7fe fe98 	bl	8000280 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	4611      	mov	r1, r2
 8001554:	f06f 000a 	mvn.w	r0, #10
 8001558:	f7fe fe92 	bl	8000280 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800155c:	2200      	movs	r2, #0
 800155e:	4611      	mov	r1, r2
 8001560:	f06f 0009 	mvn.w	r0, #9
 8001564:	f7fe fe8c 	bl	8000280 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	4611      	mov	r1, r2
 800156c:	f06f 0004 	mvn.w	r0, #4
 8001570:	f7fe fe86 	bl	8000280 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	4611      	mov	r1, r2
 8001578:	f06f 0003 	mvn.w	r0, #3
 800157c:	f7fe fe80 	bl	8000280 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	4611      	mov	r1, r2
 8001584:	f06f 0001 	mvn.w	r0, #1
 8001588:	f7fe fe7a 	bl	8000280 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	4611      	mov	r1, r2
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f7fe fe74 	bl	8000280 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001598:	b003      	add	sp, #12
 800159a:	f85d fb04 	ldr.w	pc, [sp], #4
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000

080015a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80015a6:	6803      	ldr	r3, [r0, #0]
 80015a8:	4a21      	ldr	r2, [pc, #132]	; (8001630 <HAL_UART_MspInit+0x8c>)
 80015aa:	4293      	cmp	r3, r2
{
 80015ac:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 80015ae:	d119      	bne.n	80015e4 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015b0:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_UART_MspInit+0x90>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b2:	4821      	ldr	r0, [pc, #132]	; (8001638 <HAL_UART_MspInit+0x94>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015ba:	619a      	str	r2, [r3, #24]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015c6:	2330      	movs	r3, #48	; 0x30
 80015c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015d6:	2307      	movs	r3, #7
 80015d8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015da:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f7fe feac 	bl	8000338 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015e0:	b008      	add	sp, #32
 80015e2:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART2)
 80015e4:	4a15      	ldr	r2, [pc, #84]	; (800163c <HAL_UART_MspInit+0x98>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d1fa      	bne.n	80015e0 <HAL_UART_MspInit+0x3c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_UART_MspInit+0x90>)
 80015ec:	69da      	ldr	r2, [r3, #28]
 80015ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80015f2:	61da      	str	r2, [r3, #28]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	9302      	str	r3, [sp, #8]
 80015fc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015fe:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001602:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001606:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001608:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	a903      	add	r1, sp, #12
 800160c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001610:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001616:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f7fe fe8e 	bl	8000338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART_RX_Pin;
 800161c:	2308      	movs	r3, #8
 800161e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001626:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001628:	a903      	add	r1, sp, #12
 800162a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162e:	e7d5      	b.n	80015dc <HAL_UART_MspInit+0x38>
 8001630:	40013800 	.word	0x40013800
 8001634:	40021000 	.word	0x40021000
 8001638:	48000800 	.word	0x48000800
 800163c:	40004400 	.word	0x40004400

08001640 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001640:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001642:	f7fe fded 	bl	8000220 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800164a:	f7fe be70 	b.w	800032e <HAL_SYSTICK_IRQHandler>
	...

08001650 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001650:	4915      	ldr	r1, [pc, #84]	; (80016a8 <SystemInit+0x58>)
 8001652:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001656:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800165a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <SystemInit+0x5c>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001668:	6858      	ldr	r0, [r3, #4]
 800166a:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <SystemInit+0x60>)
 800166c:	4002      	ands	r2, r0
 800166e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001676:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800167a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001682:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800168a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800168c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800168e:	f022 020f 	bic.w	r2, r2, #15
 8001692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001694:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001696:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <SystemInit+0x64>)
 8001698:	4002      	ands	r2, r0
 800169a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80016a4:	608b      	str	r3, [r1, #8]
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00
 80016ac:	40021000 	.word	0x40021000
 80016b0:	f87fc00c 	.word	0xf87fc00c
 80016b4:	ff00fccc 	.word	0xff00fccc

080016b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016be:	e003      	b.n	80016c8 <LoopCopyDataInit>

080016c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016c6:	3104      	adds	r1, #4

080016c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016c8:	480b      	ldr	r0, [pc, #44]	; (80016f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80016cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016d0:	d3f6      	bcc.n	80016c0 <CopyDataInit>
	ldr	r2, =_sbss
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016d4:	e002      	b.n	80016dc <LoopFillZerobss>

080016d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016d8:	f842 3b04 	str.w	r3, [r2], #4

080016dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <LoopForever+0x16>)
	cmp	r2, r3
 80016de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016e0:	d3f9      	bcc.n	80016d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016e2:	f7ff ffb5 	bl	8001650 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e6:	f000 f811 	bl	800170c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ea:	f7ff fe6d 	bl	80013c8 <main>

080016ee <LoopForever>:

LoopForever:
    b LoopForever
 80016ee:	e7fe      	b.n	80016ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016f0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80016f4:	080017b0 	.word	0x080017b0
	ldr	r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016fc:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8001700:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8001704:	20000104 	.word	0x20000104

08001708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC1_2_IRQHandler>
	...

0800170c <__libc_init_array>:
 800170c:	b570      	push	{r4, r5, r6, lr}
 800170e:	4e0d      	ldr	r6, [pc, #52]	; (8001744 <__libc_init_array+0x38>)
 8001710:	4c0d      	ldr	r4, [pc, #52]	; (8001748 <__libc_init_array+0x3c>)
 8001712:	1ba4      	subs	r4, r4, r6
 8001714:	10a4      	asrs	r4, r4, #2
 8001716:	2500      	movs	r5, #0
 8001718:	42a5      	cmp	r5, r4
 800171a:	d109      	bne.n	8001730 <__libc_init_array+0x24>
 800171c:	4e0b      	ldr	r6, [pc, #44]	; (800174c <__libc_init_array+0x40>)
 800171e:	4c0c      	ldr	r4, [pc, #48]	; (8001750 <__libc_init_array+0x44>)
 8001720:	f000 f818 	bl	8001754 <_init>
 8001724:	1ba4      	subs	r4, r4, r6
 8001726:	10a4      	asrs	r4, r4, #2
 8001728:	2500      	movs	r5, #0
 800172a:	42a5      	cmp	r5, r4
 800172c:	d105      	bne.n	800173a <__libc_init_array+0x2e>
 800172e:	bd70      	pop	{r4, r5, r6, pc}
 8001730:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001734:	4798      	blx	r3
 8001736:	3501      	adds	r5, #1
 8001738:	e7ee      	b.n	8001718 <__libc_init_array+0xc>
 800173a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800173e:	4798      	blx	r3
 8001740:	3501      	adds	r5, #1
 8001742:	e7f2      	b.n	800172a <__libc_init_array+0x1e>
 8001744:	080017a8 	.word	0x080017a8
 8001748:	080017a8 	.word	0x080017a8
 800174c:	080017a8 	.word	0x080017a8
 8001750:	080017ac 	.word	0x080017ac

08001754 <_init>:
 8001754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001756:	bf00      	nop
 8001758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800175a:	bc08      	pop	{r3}
 800175c:	469e      	mov	lr, r3
 800175e:	4770      	bx	lr

08001760 <_fini>:
 8001760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001762:	bf00      	nop
 8001764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001766:	bc08      	pop	{r3}
 8001768:	469e      	mov	lr, r3
 800176a:	4770      	bx	lr
